var Hc=Object.defineProperty;var kc=(e,t,r)=>t in e?Hc(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var nr=(e,t,r)=>(kc(e,typeof t!="symbol"?t+"":t,r),r),Uo=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)};var Ee=(e,t,r)=>(Uo(e,t,"read from private field"),r?r.call(e):t.get(e)),Vt=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},Bt=(e,t,r,n)=>(Uo(e,t,"write to private field"),n?n.call(e,r):t.set(e,r),r);import{g as Mc,a as Ec,c as Ge}from"./_commonjsHelpers.js";var Oa={exports:{}},lo={exports:{}},Aa=function(t,r){return function(){for(var o=new Array(arguments.length),i=0;i<o.length;i++)o[i]=arguments[i];return t.apply(r,o)}},Bc=Aa,Vr=Object.prototype.toString;function ho(e){return Array.isArray(e)}function Gi(e){return typeof e>"u"}function Nc(e){return e!==null&&!Gi(e)&&e.constructor!==null&&!Gi(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}function Sa(e){return Vr.call(e)==="[object ArrayBuffer]"}function Tc(e){return Vr.call(e)==="[object FormData]"}function Lc(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Sa(e.buffer),t}function Oc(e){return typeof e=="string"}function Ac(e){return typeof e=="number"}function Xa(e){return e!==null&&typeof e=="object"}function en(e){if(Vr.call(e)!=="[object Object]")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}function Sc(e){return Vr.call(e)==="[object Date]"}function Xc(e){return Vr.call(e)==="[object File]"}function Fc(e){return Vr.call(e)==="[object Blob]"}function Fa(e){return Vr.call(e)==="[object Function]"}function jc(e){return Xa(e)&&Fa(e.pipe)}function Uc(e){return Vr.call(e)==="[object URLSearchParams]"}function Rc(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function Zc(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function xo(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),ho(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}function Yi(){var e={};function t(o,i){en(e[i])&&en(o)?e[i]=Yi(e[i],o):en(o)?e[i]=Yi({},o):ho(o)?e[i]=o.slice():e[i]=o}for(var r=0,n=arguments.length;r<n;r++)xo(arguments[r],t);return e}function Cc(e,t,r){return xo(t,function(o,i){r&&typeof o=="function"?e[i]=Bc(o,r):e[i]=o}),e}function Dc(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}var tr={isArray:ho,isArrayBuffer:Sa,isBuffer:Nc,isFormData:Tc,isArrayBufferView:Lc,isString:Oc,isNumber:Ac,isObject:Xa,isPlainObject:en,isUndefined:Gi,isDate:Sc,isFile:Xc,isBlob:Fc,isFunction:Fa,isStream:jc,isURLSearchParams:Uc,isStandardBrowserEnv:Zc,forEach:xo,merge:Yi,extend:Cc,trim:Rc,stripBOM:Dc},i0=tr;function Ro(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var ja=function(t,r,n){if(!r)return t;var o;if(n)o=n(r);else if(i0.isURLSearchParams(r))o=r.toString();else{var i=[];i0.forEach(r,function(y,x){y===null||typeof y>"u"||(i0.isArray(y)?x=x+"[]":y=[y],i0.forEach(y,function(m){i0.isDate(m)?m=m.toISOString():i0.isObject(m)&&(m=JSON.stringify(m)),i.push(Ro(x)+"="+Ro(m))}))}),o=i.join("&")}if(o){var l=t.indexOf("#");l!==-1&&(t=t.slice(0,l)),t+=(t.indexOf("?")===-1?"?":"&")+o}return t},Ic=tr;function bn(){this.handlers=[]}bn.prototype.use=function(t,r,n){return this.handlers.push({fulfilled:t,rejected:r,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1};bn.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};bn.prototype.forEach=function(t){Ic.forEach(this.handlers,function(n){n!==null&&t(n)})};var qc=bn,Vc=tr,Wc=function(t,r){Vc.forEach(t,function(o,i){i!==r&&i.toUpperCase()===r.toUpperCase()&&(t[r]=o,delete t[i])})},Ua=function(t,r,n,o,i){return t.config=r,n&&(t.code=n),t.request=o,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},t},On,Zo;function Ra(){if(Zo)return On;Zo=1;var e=Ua;return On=function(r,n,o,i,l){var f=new Error(r);return e(f,n,o,i,l)},On}var An,Co;function Gc(){if(Co)return An;Co=1;var e=Ra();return An=function(r,n,o){var i=o.config.validateStatus;!o.status||!i||i(o.status)?r(o):n(e("Request failed with status code "+o.status,o.config,null,o.request,o))},An}var Sn,Do;function Yc(){if(Do)return Sn;Do=1;var e=tr;return Sn=e.isStandardBrowserEnv()?function(){return{write:function(n,o,i,l,f,y){var x=[];x.push(n+"="+encodeURIComponent(o)),e.isNumber(i)&&x.push("expires="+new Date(i).toGMTString()),e.isString(l)&&x.push("path="+l),e.isString(f)&&x.push("domain="+f),y===!0&&x.push("secure"),document.cookie=x.join("; ")},read:function(n){var o=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return o?decodeURIComponent(o[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),Sn}var Xn,Io;function Kc(){return Io||(Io=1,Xn=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}),Xn}var Fn,qo;function Jc(){return qo||(qo=1,Fn=function(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t}),Fn}var jn,Vo;function Qc(){if(Vo)return jn;Vo=1;var e=Kc(),t=Jc();return jn=function(n,o){return n&&!e(o)?t(n,o):o},jn}var Un,Wo;function _c(){if(Wo)return Un;Wo=1;var e=tr,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Un=function(n){var o={},i,l,f;return n&&e.forEach(n.split(`
`),function(x){if(f=x.indexOf(":"),i=e.trim(x.substr(0,f)).toLowerCase(),l=e.trim(x.substr(f+1)),i){if(o[i]&&t.indexOf(i)>=0)return;i==="set-cookie"?o[i]=(o[i]?o[i]:[]).concat([l]):o[i]=o[i]?o[i]+", "+l:l}}),o},Un}var Rn,Go;function $c(){if(Go)return Rn;Go=1;var e=tr;return Rn=e.isStandardBrowserEnv()?function(){var r=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a"),o;function i(l){var f=l;return r&&(n.setAttribute("href",f),f=n.href),n.setAttribute("href",f),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return o=i(window.location.href),function(f){var y=e.isString(f)?i(f):f;return y.protocol===o.protocol&&y.host===o.host}}():function(){return function(){return!0}}(),Rn}var Zn,Yo;function mn(){if(Yo)return Zn;Yo=1;function e(t){this.message=t}return e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,Zn=e,Zn}var Cn,Ko;function Jo(){if(Ko)return Cn;Ko=1;var e=tr,t=Gc(),r=Yc(),n=ja,o=Qc(),i=_c(),l=$c(),f=Ra(),y=wn(),x=mn();return Cn=function(m){return new Promise(function(E,N){var O=m.data,C=m.headers,V=m.responseType,j;function X(){m.cancelToken&&m.cancelToken.unsubscribe(j),m.signal&&m.signal.removeEventListener("abort",j)}e.isFormData(O)&&delete C["Content-Type"];var F=new XMLHttpRequest;if(m.auth){var G=m.auth.username||"",Y=m.auth.password?unescape(encodeURIComponent(m.auth.password)):"";C.Authorization="Basic "+btoa(G+":"+Y)}var _=o(m.baseURL,m.url);F.open(m.method.toUpperCase(),n(_,m.params,m.paramsSerializer),!0),F.timeout=m.timeout;function $(){if(!!F){var S="getAllResponseHeaders"in F?i(F.getAllResponseHeaders()):null,U=!V||V==="text"||V==="json"?F.responseText:F.response,Z={data:U,status:F.status,statusText:F.statusText,headers:S,config:m,request:F};t(function(s){E(s),X()},function(s){N(s),X()},Z),F=null}}if("onloadend"in F?F.onloadend=$:F.onreadystatechange=function(){!F||F.readyState!==4||F.status===0&&!(F.responseURL&&F.responseURL.indexOf("file:")===0)||setTimeout($)},F.onabort=function(){!F||(N(f("Request aborted",m,"ECONNABORTED",F)),F=null)},F.onerror=function(){N(f("Network Error",m,null,F)),F=null},F.ontimeout=function(){var U=m.timeout?"timeout of "+m.timeout+"ms exceeded":"timeout exceeded",Z=m.transitional||y.transitional;m.timeoutErrorMessage&&(U=m.timeoutErrorMessage),N(f(U,m,Z.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",F)),F=null},e.isStandardBrowserEnv()){var ie=(m.withCredentials||l(_))&&m.xsrfCookieName?r.read(m.xsrfCookieName):void 0;ie&&(C[m.xsrfHeaderName]=ie)}"setRequestHeader"in F&&e.forEach(C,function(U,Z){typeof O>"u"&&Z.toLowerCase()==="content-type"?delete C[Z]:F.setRequestHeader(Z,U)}),e.isUndefined(m.withCredentials)||(F.withCredentials=!!m.withCredentials),V&&V!=="json"&&(F.responseType=m.responseType),typeof m.onDownloadProgress=="function"&&F.addEventListener("progress",m.onDownloadProgress),typeof m.onUploadProgress=="function"&&F.upload&&F.upload.addEventListener("progress",m.onUploadProgress),(m.cancelToken||m.signal)&&(j=function(S){!F||(N(!S||S&&S.type?new x("canceled"):S),F.abort(),F=null)},m.cancelToken&&m.cancelToken.subscribe(j),m.signal&&(m.signal.aborted?j():m.signal.addEventListener("abort",j))),O||(O=null),F.send(O)})},Cn}var Dn,Qo;function wn(){if(Qo)return Dn;Qo=1;var e=tr,t=Wc,r=Ua,n={"Content-Type":"application/x-www-form-urlencoded"};function o(y,x){!e.isUndefined(y)&&e.isUndefined(y["Content-Type"])&&(y["Content-Type"]=x)}function i(){var y;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(y=Jo()),y}function l(y,x,v){if(e.isString(y))try{return(x||JSON.parse)(y),e.trim(y)}catch(m){if(m.name!=="SyntaxError")throw m}return(v||JSON.stringify)(y)}var f={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:i(),transformRequest:[function(x,v){return t(v,"Accept"),t(v,"Content-Type"),e.isFormData(x)||e.isArrayBuffer(x)||e.isBuffer(x)||e.isStream(x)||e.isFile(x)||e.isBlob(x)?x:e.isArrayBufferView(x)?x.buffer:e.isURLSearchParams(x)?(o(v,"application/x-www-form-urlencoded;charset=utf-8"),x.toString()):e.isObject(x)||v&&v["Content-Type"]==="application/json"?(o(v,"application/json"),l(x)):x}],transformResponse:[function(x){var v=this.transitional||f.transitional,m=v&&v.silentJSONParsing,w=v&&v.forcedJSONParsing,E=!m&&this.responseType==="json";if(E||w&&e.isString(x)&&x.length)try{return JSON.parse(x)}catch(N){if(E)throw N.name==="SyntaxError"?r(N,this,"E_JSON_PARSE"):N}return x}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(x){return x>=200&&x<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};return e.forEach(["delete","get","head"],function(x){f.headers[x]={}}),e.forEach(["post","put","patch"],function(x){f.headers[x]=e.merge(n)}),Dn=f,Dn}var eu=tr,tu=wn(),ru=function(t,r,n){var o=this||tu;return eu.forEach(n,function(l){t=l.call(o,t,r)}),t},In,_o;function Za(){return _o||(_o=1,In=function(t){return!!(t&&t.__CANCEL__)}),In}var $o=tr,qn=ru,nu=Za(),iu=wn(),ou=mn();function Vn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new ou("canceled")}var su=function(t){Vn(t),t.headers=t.headers||{},t.data=qn.call(t,t.data,t.headers,t.transformRequest),t.headers=$o.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),$o.forEach(["delete","get","head","post","put","patch","common"],function(o){delete t.headers[o]});var r=t.adapter||iu.adapter;return r(t).then(function(o){return Vn(t),o.data=qn.call(t,o.data,o.headers,t.transformResponse),o},function(o){return nu(o)||(Vn(t),o&&o.response&&(o.response.data=qn.call(t,o.response.data,o.response.headers,t.transformResponse))),Promise.reject(o)})},ir=tr,Ca=function(t,r){r=r||{};var n={};function o(v,m){return ir.isPlainObject(v)&&ir.isPlainObject(m)?ir.merge(v,m):ir.isPlainObject(m)?ir.merge({},m):ir.isArray(m)?m.slice():m}function i(v){if(ir.isUndefined(r[v])){if(!ir.isUndefined(t[v]))return o(void 0,t[v])}else return o(t[v],r[v])}function l(v){if(!ir.isUndefined(r[v]))return o(void 0,r[v])}function f(v){if(ir.isUndefined(r[v])){if(!ir.isUndefined(t[v]))return o(void 0,t[v])}else return o(void 0,r[v])}function y(v){if(v in r)return o(t[v],r[v]);if(v in t)return o(void 0,t[v])}var x={url:l,method:l,data:l,baseURL:f,transformRequest:f,transformResponse:f,paramsSerializer:f,timeout:f,timeoutMessage:f,withCredentials:f,adapter:f,responseType:f,xsrfCookieName:f,xsrfHeaderName:f,onUploadProgress:f,onDownloadProgress:f,decompress:f,maxContentLength:f,maxBodyLength:f,transport:f,httpAgent:f,httpsAgent:f,cancelToken:f,socketPath:f,responseEncoding:f,validateStatus:y};return ir.forEach(Object.keys(t).concat(Object.keys(r)),function(m){var w=x[m]||i,E=w(m);ir.isUndefined(E)&&w!==y||(n[m]=E)}),n},Wn,es;function Da(){return es||(es=1,Wn={version:"0.25.0"}),Wn}var au=Da().version,po={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){po[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}});var ts={};po.transitional=function(t,r,n){function o(i,l){return"[Axios v"+au+"] Transitional option '"+i+"'"+l+(n?". "+n:"")}return function(i,l,f){if(t===!1)throw new Error(o(l," has been removed"+(r?" in "+r:"")));return r&&!ts[l]&&(ts[l]=!0,console.warn(o(l," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(i,l,f):!0}};function fu(e,t,r){if(typeof e!="object")throw new TypeError("options must be an object");for(var n=Object.keys(e),o=n.length;o-- >0;){var i=n[o],l=t[i];if(l){var f=e[i],y=f===void 0||l(f,i,e);if(y!==!0)throw new TypeError("option "+i+" must be "+y);continue}if(r!==!0)throw Error("Unknown option "+i)}}var cu={assertOptions:fu,validators:po},Ia=tr,uu=ja,rs=qc,ns=su,gn=Ca,qa=cu,o0=qa.validators;function q0(e){this.defaults=e,this.interceptors={request:new rs,response:new rs}}q0.prototype.request=function(t,r){if(typeof t=="string"?(r=r||{},r.url=t):r=t||{},!r.url)throw new Error("Provided config url is not valid");r=gn(this.defaults,r),r.method?r.method=r.method.toLowerCase():this.defaults.method?r.method=this.defaults.method.toLowerCase():r.method="get";var n=r.transitional;n!==void 0&&qa.assertOptions(n,{silentJSONParsing:o0.transitional(o0.boolean),forcedJSONParsing:o0.transitional(o0.boolean),clarifyTimeoutError:o0.transitional(o0.boolean)},!1);var o=[],i=!0;this.interceptors.request.forEach(function(E){typeof E.runWhen=="function"&&E.runWhen(r)===!1||(i=i&&E.synchronous,o.unshift(E.fulfilled,E.rejected))});var l=[];this.interceptors.response.forEach(function(E){l.push(E.fulfilled,E.rejected)});var f;if(!i){var y=[ns,void 0];for(Array.prototype.unshift.apply(y,o),y=y.concat(l),f=Promise.resolve(r);y.length;)f=f.then(y.shift(),y.shift());return f}for(var x=r;o.length;){var v=o.shift(),m=o.shift();try{x=v(x)}catch(w){m(w);break}}try{f=ns(x)}catch(w){return Promise.reject(w)}for(;l.length;)f=f.then(l.shift(),l.shift());return f};q0.prototype.getUri=function(t){if(!t.url)throw new Error("Provided config url is not valid");return t=gn(this.defaults,t),uu(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")};Ia.forEach(["delete","get","head","options"],function(t){q0.prototype[t]=function(r,n){return this.request(gn(n||{},{method:t,url:r,data:(n||{}).data}))}});Ia.forEach(["post","put","patch"],function(t){q0.prototype[t]=function(r,n,o){return this.request(gn(o||{},{method:t,url:r,data:n}))}});var lu=q0,Gn,is;function hu(){if(is)return Gn;is=1;var e=mn();function t(r){if(typeof r!="function")throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(l){n=l});var o=this;this.promise.then(function(i){if(!!o._listeners){var l,f=o._listeners.length;for(l=0;l<f;l++)o._listeners[l](i);o._listeners=null}}),this.promise.then=function(i){var l,f=new Promise(function(y){o.subscribe(y),l=y}).then(i);return f.cancel=function(){o.unsubscribe(l)},f},r(function(l){o.reason||(o.reason=new e(l),n(o.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.prototype.subscribe=function(n){if(this.reason){n(this.reason);return}this._listeners?this._listeners.push(n):this._listeners=[n]},t.prototype.unsubscribe=function(n){if(!!this._listeners){var o=this._listeners.indexOf(n);o!==-1&&this._listeners.splice(o,1)}},t.source=function(){var n,o=new t(function(l){n=l});return{token:o,cancel:n}},Gn=t,Gn}var Yn,os;function du(){return os||(os=1,Yn=function(t){return function(n){return t.apply(null,n)}}),Yn}var Kn,ss;function xu(){if(ss)return Kn;ss=1;var e=tr;return Kn=function(r){return e.isObject(r)&&r.isAxiosError===!0},Kn}var as=tr,pu=Aa,tn=lu,vu=Ca,yu=wn();function Va(e){var t=new tn(e),r=pu(tn.prototype.request,t);return as.extend(r,tn.prototype,t),as.extend(r,t),r.create=function(o){return Va(vu(e,o))},r}var Hr=Va(yu);Hr.Axios=tn;Hr.Cancel=mn();Hr.CancelToken=hu();Hr.isCancel=Za();Hr.VERSION=Da().version;Hr.all=function(t){return Promise.all(t)};Hr.spread=du();Hr.isAxiosError=xu();lo.exports=Hr;lo.exports.default=Hr;(function(e){e.exports=lo.exports})(Oa);const Ki=Mc(Oa.exports),Wa="3.7.3",bu=Wa,mu=typeof atob=="function",wu=typeof btoa=="function",P0=typeof Buffer=="function",fs=typeof TextDecoder=="function"?new TextDecoder:void 0,cs=typeof TextEncoder=="function"?new TextEncoder:void 0,gu="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",T0=Array.prototype.slice.call(gu),K0=(e=>{let t={};return e.forEach((r,n)=>t[r]=n),t})(T0),Pu=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Yt=String.fromCharCode.bind(String),us=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):(e,t=r=>r)=>new Uint8Array(Array.prototype.slice.call(e,0).map(t)),Ga=e=>e.replace(/=/g,"").replace(/[+\/]/g,t=>t=="+"?"-":"_"),Ya=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Ka=e=>{let t,r,n,o,i="";const l=e.length%3;for(let f=0;f<e.length;){if((r=e.charCodeAt(f++))>255||(n=e.charCodeAt(f++))>255||(o=e.charCodeAt(f++))>255)throw new TypeError("invalid character found");t=r<<16|n<<8|o,i+=T0[t>>18&63]+T0[t>>12&63]+T0[t>>6&63]+T0[t&63]}return l?i.slice(0,l-3)+"===".substring(l):i},vo=wu?e=>btoa(e):P0?e=>Buffer.from(e,"binary").toString("base64"):Ka,Ji=P0?e=>Buffer.from(e).toString("base64"):e=>{let r=[];for(let n=0,o=e.length;n<o;n+=4096)r.push(Yt.apply(null,e.subarray(n,n+4096)));return vo(r.join(""))},rn=(e,t=!1)=>t?Ga(Ji(e)):Ji(e),zu=e=>{if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?Yt(192|t>>>6)+Yt(128|t&63):Yt(224|t>>>12&15)+Yt(128|t>>>6&63)+Yt(128|t&63)}else{var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return Yt(240|t>>>18&7)+Yt(128|t>>>12&63)+Yt(128|t>>>6&63)+Yt(128|t&63)}},Hu=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Ja=e=>e.replace(Hu,zu),ls=P0?e=>Buffer.from(e,"utf8").toString("base64"):cs?e=>Ji(cs.encode(e)):e=>vo(Ja(e)),u0=(e,t=!1)=>t?Ga(ls(e)):ls(e),hs=e=>u0(e,!0),ku=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,Mu=e=>{switch(e.length){case 4:var t=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),r=t-65536;return Yt((r>>>10)+55296)+Yt((r&1023)+56320);case 3:return Yt((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return Yt((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},Qa=e=>e.replace(ku,Mu),_a=e=>{if(e=e.replace(/\s+/g,""),!Pu.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let t,r="",n,o;for(let i=0;i<e.length;)t=K0[e.charAt(i++)]<<18|K0[e.charAt(i++)]<<12|(n=K0[e.charAt(i++)])<<6|(o=K0[e.charAt(i++)]),r+=n===64?Yt(t>>16&255):o===64?Yt(t>>16&255,t>>8&255):Yt(t>>16&255,t>>8&255,t&255);return r},yo=mu?e=>atob(Ya(e)):P0?e=>Buffer.from(e,"base64").toString("binary"):_a,$a=P0?e=>us(Buffer.from(e,"base64")):e=>us(yo(e),t=>t.charCodeAt(0)),ef=e=>$a(tf(e)),Eu=P0?e=>Buffer.from(e,"base64").toString("utf8"):fs?e=>fs.decode($a(e)):e=>Qa(yo(e)),tf=e=>Ya(e.replace(/[-_]/g,t=>t=="-"?"+":"/")),Qi=e=>Eu(tf(e)),Bu=e=>{if(typeof e!="string")return!1;const t=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},rf=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),nf=function(){const e=(t,r)=>Object.defineProperty(String.prototype,t,rf(r));e("fromBase64",function(){return Qi(this)}),e("toBase64",function(t){return u0(this,t)}),e("toBase64URI",function(){return u0(this,!0)}),e("toBase64URL",function(){return u0(this,!0)}),e("toUint8Array",function(){return ef(this)})},of=function(){const e=(t,r)=>Object.defineProperty(Uint8Array.prototype,t,rf(r));e("toBase64",function(t){return rn(this,t)}),e("toBase64URI",function(){return rn(this,!0)}),e("toBase64URL",function(){return rn(this,!0)})},Nu=()=>{nf(),of()},Tu={version:Wa,VERSION:bu,atob:yo,atobPolyfill:_a,btoa:vo,btoaPolyfill:Ka,fromBase64:Qi,toBase64:u0,encode:u0,encodeURI:hs,encodeURL:hs,utob:Ja,btou:Qa,decode:Qi,isValid:Bu,fromUint8Array:rn,toUint8Array:ef,extendString:nf,extendUint8Array:of,extendBuiltins:Nu};var _r={},Pn={};Pn.byteLength=Au;Pn.toByteArray=Xu;Pn.fromByteArray=Uu;var wr=[],lr=[],Lu=typeof Uint8Array<"u"?Uint8Array:Array,Jn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var s0=0,Ou=Jn.length;s0<Ou;++s0)wr[s0]=Jn[s0],lr[Jn.charCodeAt(s0)]=s0;lr["-".charCodeAt(0)]=62;lr["_".charCodeAt(0)]=63;function sf(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");r===-1&&(r=t);var n=r===t?0:4-r%4;return[r,n]}function Au(e){var t=sf(e),r=t[0],n=t[1];return(r+n)*3/4-n}function Su(e,t,r){return(t+r)*3/4-r}function Xu(e){var t,r=sf(e),n=r[0],o=r[1],i=new Lu(Su(e,n,o)),l=0,f=o>0?n-4:n,y;for(y=0;y<f;y+=4)t=lr[e.charCodeAt(y)]<<18|lr[e.charCodeAt(y+1)]<<12|lr[e.charCodeAt(y+2)]<<6|lr[e.charCodeAt(y+3)],i[l++]=t>>16&255,i[l++]=t>>8&255,i[l++]=t&255;return o===2&&(t=lr[e.charCodeAt(y)]<<2|lr[e.charCodeAt(y+1)]>>4,i[l++]=t&255),o===1&&(t=lr[e.charCodeAt(y)]<<10|lr[e.charCodeAt(y+1)]<<4|lr[e.charCodeAt(y+2)]>>2,i[l++]=t>>8&255,i[l++]=t&255),i}function Fu(e){return wr[e>>18&63]+wr[e>>12&63]+wr[e>>6&63]+wr[e&63]}function ju(e,t,r){for(var n,o=[],i=t;i<r;i+=3)n=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255),o.push(Fu(n));return o.join("")}function Uu(e){for(var t,r=e.length,n=r%3,o=[],i=16383,l=0,f=r-n;l<f;l+=i)o.push(ju(e,l,l+i>f?f:l+i));return n===1?(t=e[r-1],o.push(wr[t>>2]+wr[t<<4&63]+"==")):n===2&&(t=(e[r-2]<<8)+e[r-1],o.push(wr[t>>10]+wr[t>>4&63]+wr[t<<2&63]+"=")),o.join("")}var bo={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */bo.read=function(e,t,r,n,o){var i,l,f=o*8-n-1,y=(1<<f)-1,x=y>>1,v=-7,m=r?o-1:0,w=r?-1:1,E=e[t+m];for(m+=w,i=E&(1<<-v)-1,E>>=-v,v+=f;v>0;i=i*256+e[t+m],m+=w,v-=8);for(l=i&(1<<-v)-1,i>>=-v,v+=n;v>0;l=l*256+e[t+m],m+=w,v-=8);if(i===0)i=1-x;else{if(i===y)return l?NaN:(E?-1:1)*(1/0);l=l+Math.pow(2,n),i=i-x}return(E?-1:1)*l*Math.pow(2,i-n)};bo.write=function(e,t,r,n,o,i){var l,f,y,x=i*8-o-1,v=(1<<x)-1,m=v>>1,w=o===23?Math.pow(2,-24)-Math.pow(2,-77):0,E=n?0:i-1,N=n?1:-1,O=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(f=isNaN(t)?1:0,l=v):(l=Math.floor(Math.log(t)/Math.LN2),t*(y=Math.pow(2,-l))<1&&(l--,y*=2),l+m>=1?t+=w/y:t+=w*Math.pow(2,1-m),t*y>=2&&(l++,y/=2),l+m>=v?(f=0,l=v):l+m>=1?(f=(t*y-1)*Math.pow(2,o),l=l+m):(f=t*Math.pow(2,m-1)*Math.pow(2,o),l=0));o>=8;e[r+E]=f&255,E+=N,f/=256,o-=8);for(l=l<<o|f,x+=o;x>0;e[r+E]=l&255,E+=N,l/=256,x-=8);e[r+E-N]|=O*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(e){const t=Pn,r=bo,n=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=f,e.SlowBuffer=j,e.INSPECT_MAX_BYTES=50;const o=2147483647;e.kMaxLength=o,f.TYPED_ARRAY_SUPPORT=i(),!f.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function i(){try{const P=new Uint8Array(1),u={foo:function(){return 42}};return Object.setPrototypeOf(u,Uint8Array.prototype),Object.setPrototypeOf(P,u),P.foo()===42}catch{return!1}}Object.defineProperty(f.prototype,"parent",{enumerable:!0,get:function(){if(!!f.isBuffer(this))return this.buffer}}),Object.defineProperty(f.prototype,"offset",{enumerable:!0,get:function(){if(!!f.isBuffer(this))return this.byteOffset}});function l(P){if(P>o)throw new RangeError('The value "'+P+'" is invalid for option "size"');const u=new Uint8Array(P);return Object.setPrototypeOf(u,f.prototype),u}function f(P,u,h){if(typeof P=="number"){if(typeof u=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return m(P)}return y(P,u,h)}f.poolSize=8192;function y(P,u,h){if(typeof P=="string")return w(P,u);if(ArrayBuffer.isView(P))return N(P);if(P==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof P);if(vt(P,ArrayBuffer)||P&&vt(P.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(vt(P,SharedArrayBuffer)||P&&vt(P.buffer,SharedArrayBuffer)))return O(P,u,h);if(typeof P=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const T=P.valueOf&&P.valueOf();if(T!=null&&T!==P)return f.from(T,u,h);const I=C(P);if(I)return I;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof P[Symbol.toPrimitive]=="function")return f.from(P[Symbol.toPrimitive]("string"),u,h);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof P)}f.from=function(P,u,h){return y(P,u,h)},Object.setPrototypeOf(f.prototype,Uint8Array.prototype),Object.setPrototypeOf(f,Uint8Array);function x(P){if(typeof P!="number")throw new TypeError('"size" argument must be of type number');if(P<0)throw new RangeError('The value "'+P+'" is invalid for option "size"')}function v(P,u,h){return x(P),P<=0?l(P):u!==void 0?typeof h=="string"?l(P).fill(u,h):l(P).fill(u):l(P)}f.alloc=function(P,u,h){return v(P,u,h)};function m(P){return x(P),l(P<0?0:V(P)|0)}f.allocUnsafe=function(P){return m(P)},f.allocUnsafeSlow=function(P){return m(P)};function w(P,u){if((typeof u!="string"||u==="")&&(u="utf8"),!f.isEncoding(u))throw new TypeError("Unknown encoding: "+u);const h=X(P,u)|0;let T=l(h);const I=T.write(P,u);return I!==h&&(T=T.slice(0,I)),T}function E(P){const u=P.length<0?0:V(P.length)|0,h=l(u);for(let T=0;T<u;T+=1)h[T]=P[T]&255;return h}function N(P){if(vt(P,Uint8Array)){const u=new Uint8Array(P);return O(u.buffer,u.byteOffset,u.byteLength)}return E(P)}function O(P,u,h){if(u<0||P.byteLength<u)throw new RangeError('"offset" is outside of buffer bounds');if(P.byteLength<u+(h||0))throw new RangeError('"length" is outside of buffer bounds');let T;return u===void 0&&h===void 0?T=new Uint8Array(P):h===void 0?T=new Uint8Array(P,u):T=new Uint8Array(P,u,h),Object.setPrototypeOf(T,f.prototype),T}function C(P){if(f.isBuffer(P)){const u=V(P.length)|0,h=l(u);return h.length===0||P.copy(h,0,0,u),h}if(P.length!==void 0)return typeof P.length!="number"||Qe(P.length)?l(0):E(P);if(P.type==="Buffer"&&Array.isArray(P.data))return E(P.data)}function V(P){if(P>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return P|0}function j(P){return+P!=P&&(P=0),f.alloc(+P)}f.isBuffer=function(u){return u!=null&&u._isBuffer===!0&&u!==f.prototype},f.compare=function(u,h){if(vt(u,Uint8Array)&&(u=f.from(u,u.offset,u.byteLength)),vt(h,Uint8Array)&&(h=f.from(h,h.offset,h.byteLength)),!f.isBuffer(u)||!f.isBuffer(h))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(u===h)return 0;let T=u.length,I=h.length;for(let J=0,te=Math.min(T,I);J<te;++J)if(u[J]!==h[J]){T=u[J],I=h[J];break}return T<I?-1:I<T?1:0},f.isEncoding=function(u){switch(String(u).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(u,h){if(!Array.isArray(u))throw new TypeError('"list" argument must be an Array of Buffers');if(u.length===0)return f.alloc(0);let T;if(h===void 0)for(h=0,T=0;T<u.length;++T)h+=u[T].length;const I=f.allocUnsafe(h);let J=0;for(T=0;T<u.length;++T){let te=u[T];if(vt(te,Uint8Array))J+te.length>I.length?(f.isBuffer(te)||(te=f.from(te)),te.copy(I,J)):Uint8Array.prototype.set.call(I,te,J);else if(f.isBuffer(te))te.copy(I,J);else throw new TypeError('"list" argument must be an Array of Buffers');J+=te.length}return I};function X(P,u){if(f.isBuffer(P))return P.length;if(ArrayBuffer.isView(P)||vt(P,ArrayBuffer))return P.byteLength;if(typeof P!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof P);const h=P.length,T=arguments.length>2&&arguments[2]===!0;if(!T&&h===0)return 0;let I=!1;for(;;)switch(u){case"ascii":case"latin1":case"binary":return h;case"utf8":case"utf-8":return ct(P).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h*2;case"hex":return h>>>1;case"base64":return rt(P).length;default:if(I)return T?-1:ct(P).length;u=(""+u).toLowerCase(),I=!0}}f.byteLength=X;function F(P,u,h){let T=!1;if((u===void 0||u<0)&&(u=0),u>this.length||((h===void 0||h>this.length)&&(h=this.length),h<=0)||(h>>>=0,u>>>=0,h<=u))return"";for(P||(P="utf8");;)switch(P){case"hex":return D(this,u,h);case"utf8":case"utf-8":return s(this,u,h);case"ascii":return L(this,u,h);case"latin1":case"binary":return A(this,u,h);case"base64":return b(this,u,h);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return q(this,u,h);default:if(T)throw new TypeError("Unknown encoding: "+P);P=(P+"").toLowerCase(),T=!0}}f.prototype._isBuffer=!0;function G(P,u,h){const T=P[u];P[u]=P[h],P[h]=T}f.prototype.swap16=function(){const u=this.length;if(u%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let h=0;h<u;h+=2)G(this,h,h+1);return this},f.prototype.swap32=function(){const u=this.length;if(u%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let h=0;h<u;h+=4)G(this,h,h+3),G(this,h+1,h+2);return this},f.prototype.swap64=function(){const u=this.length;if(u%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let h=0;h<u;h+=8)G(this,h,h+7),G(this,h+1,h+6),G(this,h+2,h+5),G(this,h+3,h+4);return this},f.prototype.toString=function(){const u=this.length;return u===0?"":arguments.length===0?s(this,0,u):F.apply(this,arguments)},f.prototype.toLocaleString=f.prototype.toString,f.prototype.equals=function(u){if(!f.isBuffer(u))throw new TypeError("Argument must be a Buffer");return this===u?!0:f.compare(this,u)===0},f.prototype.inspect=function(){let u="";const h=e.INSPECT_MAX_BYTES;return u=this.toString("hex",0,h).replace(/(.{2})/g,"$1 ").trim(),this.length>h&&(u+=" ... "),"<Buffer "+u+">"},n&&(f.prototype[n]=f.prototype.inspect),f.prototype.compare=function(u,h,T,I,J){if(vt(u,Uint8Array)&&(u=f.from(u,u.offset,u.byteLength)),!f.isBuffer(u))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof u);if(h===void 0&&(h=0),T===void 0&&(T=u?u.length:0),I===void 0&&(I=0),J===void 0&&(J=this.length),h<0||T>u.length||I<0||J>this.length)throw new RangeError("out of range index");if(I>=J&&h>=T)return 0;if(I>=J)return-1;if(h>=T)return 1;if(h>>>=0,T>>>=0,I>>>=0,J>>>=0,this===u)return 0;let te=J-I,Ae=T-h;const Be=Math.min(te,Ae),Ne=this.slice(I,J),lt=u.slice(h,T);for(let Me=0;Me<Be;++Me)if(Ne[Me]!==lt[Me]){te=Ne[Me],Ae=lt[Me];break}return te<Ae?-1:Ae<te?1:0};function Y(P,u,h,T,I){if(P.length===0)return-1;if(typeof h=="string"?(T=h,h=0):h>2147483647?h=2147483647:h<-2147483648&&(h=-2147483648),h=+h,Qe(h)&&(h=I?0:P.length-1),h<0&&(h=P.length+h),h>=P.length){if(I)return-1;h=P.length-1}else if(h<0)if(I)h=0;else return-1;if(typeof u=="string"&&(u=f.from(u,T)),f.isBuffer(u))return u.length===0?-1:_(P,u,h,T,I);if(typeof u=="number")return u=u&255,typeof Uint8Array.prototype.indexOf=="function"?I?Uint8Array.prototype.indexOf.call(P,u,h):Uint8Array.prototype.lastIndexOf.call(P,u,h):_(P,[u],h,T,I);throw new TypeError("val must be string, number or Buffer")}function _(P,u,h,T,I){let J=1,te=P.length,Ae=u.length;if(T!==void 0&&(T=String(T).toLowerCase(),T==="ucs2"||T==="ucs-2"||T==="utf16le"||T==="utf-16le")){if(P.length<2||u.length<2)return-1;J=2,te/=2,Ae/=2,h/=2}function Be(lt,Me){return J===1?lt[Me]:lt.readUInt16BE(Me*J)}let Ne;if(I){let lt=-1;for(Ne=h;Ne<te;Ne++)if(Be(P,Ne)===Be(u,lt===-1?0:Ne-lt)){if(lt===-1&&(lt=Ne),Ne-lt+1===Ae)return lt*J}else lt!==-1&&(Ne-=Ne-lt),lt=-1}else for(h+Ae>te&&(h=te-Ae),Ne=h;Ne>=0;Ne--){let lt=!0;for(let Me=0;Me<Ae;Me++)if(Be(P,Ne+Me)!==Be(u,Me)){lt=!1;break}if(lt)return Ne}return-1}f.prototype.includes=function(u,h,T){return this.indexOf(u,h,T)!==-1},f.prototype.indexOf=function(u,h,T){return Y(this,u,h,T,!0)},f.prototype.lastIndexOf=function(u,h,T){return Y(this,u,h,T,!1)};function $(P,u,h,T){h=Number(h)||0;const I=P.length-h;T?(T=Number(T),T>I&&(T=I)):T=I;const J=u.length;T>J/2&&(T=J/2);let te;for(te=0;te<T;++te){const Ae=parseInt(u.substr(te*2,2),16);if(Qe(Ae))return te;P[h+te]=Ae}return te}function ie(P,u,h,T){return Ve(ct(u,P.length-h),P,h,T)}function S(P,u,h,T){return Ve(pt(u),P,h,T)}function U(P,u,h,T){return Ve(rt(u),P,h,T)}function Z(P,u,h,T){return Ve(Qt(u,P.length-h),P,h,T)}f.prototype.write=function(u,h,T,I){if(h===void 0)I="utf8",T=this.length,h=0;else if(T===void 0&&typeof h=="string")I=h,T=this.length,h=0;else if(isFinite(h))h=h>>>0,isFinite(T)?(T=T>>>0,I===void 0&&(I="utf8")):(I=T,T=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const J=this.length-h;if((T===void 0||T>J)&&(T=J),u.length>0&&(T<0||h<0)||h>this.length)throw new RangeError("Attempt to write outside buffer bounds");I||(I="utf8");let te=!1;for(;;)switch(I){case"hex":return $(this,u,h,T);case"utf8":case"utf-8":return ie(this,u,h,T);case"ascii":case"latin1":case"binary":return S(this,u,h,T);case"base64":return U(this,u,h,T);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Z(this,u,h,T);default:if(te)throw new TypeError("Unknown encoding: "+I);I=(""+I).toLowerCase(),te=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function b(P,u,h){return u===0&&h===P.length?t.fromByteArray(P):t.fromByteArray(P.slice(u,h))}function s(P,u,h){h=Math.min(P.length,h);const T=[];let I=u;for(;I<h;){const J=P[I];let te=null,Ae=J>239?4:J>223?3:J>191?2:1;if(I+Ae<=h){let Be,Ne,lt,Me;switch(Ae){case 1:J<128&&(te=J);break;case 2:Be=P[I+1],(Be&192)===128&&(Me=(J&31)<<6|Be&63,Me>127&&(te=Me));break;case 3:Be=P[I+1],Ne=P[I+2],(Be&192)===128&&(Ne&192)===128&&(Me=(J&15)<<12|(Be&63)<<6|Ne&63,Me>2047&&(Me<55296||Me>57343)&&(te=Me));break;case 4:Be=P[I+1],Ne=P[I+2],lt=P[I+3],(Be&192)===128&&(Ne&192)===128&&(lt&192)===128&&(Me=(J&15)<<18|(Be&63)<<12|(Ne&63)<<6|lt&63,Me>65535&&Me<1114112&&(te=Me))}}te===null?(te=65533,Ae=1):te>65535&&(te-=65536,T.push(te>>>10&1023|55296),te=56320|te&1023),T.push(te),I+=Ae}return z(T)}const d=4096;function z(P){const u=P.length;if(u<=d)return String.fromCharCode.apply(String,P);let h="",T=0;for(;T<u;)h+=String.fromCharCode.apply(String,P.slice(T,T+=d));return h}function L(P,u,h){let T="";h=Math.min(P.length,h);for(let I=u;I<h;++I)T+=String.fromCharCode(P[I]&127);return T}function A(P,u,h){let T="";h=Math.min(P.length,h);for(let I=u;I<h;++I)T+=String.fromCharCode(P[I]);return T}function D(P,u,h){const T=P.length;(!u||u<0)&&(u=0),(!h||h<0||h>T)&&(h=T);let I="";for(let J=u;J<h;++J)I+=ut[P[J]];return I}function q(P,u,h){const T=P.slice(u,h);let I="";for(let J=0;J<T.length-1;J+=2)I+=String.fromCharCode(T[J]+T[J+1]*256);return I}f.prototype.slice=function(u,h){const T=this.length;u=~~u,h=h===void 0?T:~~h,u<0?(u+=T,u<0&&(u=0)):u>T&&(u=T),h<0?(h+=T,h<0&&(h=0)):h>T&&(h=T),h<u&&(h=u);const I=this.subarray(u,h);return Object.setPrototypeOf(I,f.prototype),I};function g(P,u,h){if(P%1!==0||P<0)throw new RangeError("offset is not uint");if(P+u>h)throw new RangeError("Trying to access beyond buffer length")}f.prototype.readUintLE=f.prototype.readUIntLE=function(u,h,T){u=u>>>0,h=h>>>0,T||g(u,h,this.length);let I=this[u],J=1,te=0;for(;++te<h&&(J*=256);)I+=this[u+te]*J;return I},f.prototype.readUintBE=f.prototype.readUIntBE=function(u,h,T){u=u>>>0,h=h>>>0,T||g(u,h,this.length);let I=this[u+--h],J=1;for(;h>0&&(J*=256);)I+=this[u+--h]*J;return I},f.prototype.readUint8=f.prototype.readUInt8=function(u,h){return u=u>>>0,h||g(u,1,this.length),this[u]},f.prototype.readUint16LE=f.prototype.readUInt16LE=function(u,h){return u=u>>>0,h||g(u,2,this.length),this[u]|this[u+1]<<8},f.prototype.readUint16BE=f.prototype.readUInt16BE=function(u,h){return u=u>>>0,h||g(u,2,this.length),this[u]<<8|this[u+1]},f.prototype.readUint32LE=f.prototype.readUInt32LE=function(u,h){return u=u>>>0,h||g(u,4,this.length),(this[u]|this[u+1]<<8|this[u+2]<<16)+this[u+3]*16777216},f.prototype.readUint32BE=f.prototype.readUInt32BE=function(u,h){return u=u>>>0,h||g(u,4,this.length),this[u]*16777216+(this[u+1]<<16|this[u+2]<<8|this[u+3])},f.prototype.readBigUInt64LE=qt(function(u){u=u>>>0,At(u,"offset");const h=this[u],T=this[u+7];(h===void 0||T===void 0)&&Ce(u,this.length-8);const I=h+this[++u]*2**8+this[++u]*2**16+this[++u]*2**24,J=this[++u]+this[++u]*2**8+this[++u]*2**16+T*2**24;return BigInt(I)+(BigInt(J)<<BigInt(32))}),f.prototype.readBigUInt64BE=qt(function(u){u=u>>>0,At(u,"offset");const h=this[u],T=this[u+7];(h===void 0||T===void 0)&&Ce(u,this.length-8);const I=h*2**24+this[++u]*2**16+this[++u]*2**8+this[++u],J=this[++u]*2**24+this[++u]*2**16+this[++u]*2**8+T;return(BigInt(I)<<BigInt(32))+BigInt(J)}),f.prototype.readIntLE=function(u,h,T){u=u>>>0,h=h>>>0,T||g(u,h,this.length);let I=this[u],J=1,te=0;for(;++te<h&&(J*=256);)I+=this[u+te]*J;return J*=128,I>=J&&(I-=Math.pow(2,8*h)),I},f.prototype.readIntBE=function(u,h,T){u=u>>>0,h=h>>>0,T||g(u,h,this.length);let I=h,J=1,te=this[u+--I];for(;I>0&&(J*=256);)te+=this[u+--I]*J;return J*=128,te>=J&&(te-=Math.pow(2,8*h)),te},f.prototype.readInt8=function(u,h){return u=u>>>0,h||g(u,1,this.length),this[u]&128?(255-this[u]+1)*-1:this[u]},f.prototype.readInt16LE=function(u,h){u=u>>>0,h||g(u,2,this.length);const T=this[u]|this[u+1]<<8;return T&32768?T|4294901760:T},f.prototype.readInt16BE=function(u,h){u=u>>>0,h||g(u,2,this.length);const T=this[u+1]|this[u]<<8;return T&32768?T|4294901760:T},f.prototype.readInt32LE=function(u,h){return u=u>>>0,h||g(u,4,this.length),this[u]|this[u+1]<<8|this[u+2]<<16|this[u+3]<<24},f.prototype.readInt32BE=function(u,h){return u=u>>>0,h||g(u,4,this.length),this[u]<<24|this[u+1]<<16|this[u+2]<<8|this[u+3]},f.prototype.readBigInt64LE=qt(function(u){u=u>>>0,At(u,"offset");const h=this[u],T=this[u+7];(h===void 0||T===void 0)&&Ce(u,this.length-8);const I=this[u+4]+this[u+5]*2**8+this[u+6]*2**16+(T<<24);return(BigInt(I)<<BigInt(32))+BigInt(h+this[++u]*2**8+this[++u]*2**16+this[++u]*2**24)}),f.prototype.readBigInt64BE=qt(function(u){u=u>>>0,At(u,"offset");const h=this[u],T=this[u+7];(h===void 0||T===void 0)&&Ce(u,this.length-8);const I=(h<<24)+this[++u]*2**16+this[++u]*2**8+this[++u];return(BigInt(I)<<BigInt(32))+BigInt(this[++u]*2**24+this[++u]*2**16+this[++u]*2**8+T)}),f.prototype.readFloatLE=function(u,h){return u=u>>>0,h||g(u,4,this.length),r.read(this,u,!0,23,4)},f.prototype.readFloatBE=function(u,h){return u=u>>>0,h||g(u,4,this.length),r.read(this,u,!1,23,4)},f.prototype.readDoubleLE=function(u,h){return u=u>>>0,h||g(u,8,this.length),r.read(this,u,!0,52,8)},f.prototype.readDoubleBE=function(u,h){return u=u>>>0,h||g(u,8,this.length),r.read(this,u,!1,52,8)};function c(P,u,h,T,I,J){if(!f.isBuffer(P))throw new TypeError('"buffer" argument must be a Buffer instance');if(u>I||u<J)throw new RangeError('"value" argument is out of bounds');if(h+T>P.length)throw new RangeError("Index out of range")}f.prototype.writeUintLE=f.prototype.writeUIntLE=function(u,h,T,I){if(u=+u,h=h>>>0,T=T>>>0,!I){const Ae=Math.pow(2,8*T)-1;c(this,u,h,T,Ae,0)}let J=1,te=0;for(this[h]=u&255;++te<T&&(J*=256);)this[h+te]=u/J&255;return h+T},f.prototype.writeUintBE=f.prototype.writeUIntBE=function(u,h,T,I){if(u=+u,h=h>>>0,T=T>>>0,!I){const Ae=Math.pow(2,8*T)-1;c(this,u,h,T,Ae,0)}let J=T-1,te=1;for(this[h+J]=u&255;--J>=0&&(te*=256);)this[h+J]=u/te&255;return h+T},f.prototype.writeUint8=f.prototype.writeUInt8=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,1,255,0),this[h]=u&255,h+1},f.prototype.writeUint16LE=f.prototype.writeUInt16LE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,2,65535,0),this[h]=u&255,this[h+1]=u>>>8,h+2},f.prototype.writeUint16BE=f.prototype.writeUInt16BE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,2,65535,0),this[h]=u>>>8,this[h+1]=u&255,h+2},f.prototype.writeUint32LE=f.prototype.writeUInt32LE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,4,4294967295,0),this[h+3]=u>>>24,this[h+2]=u>>>16,this[h+1]=u>>>8,this[h]=u&255,h+4},f.prototype.writeUint32BE=f.prototype.writeUInt32BE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,4,4294967295,0),this[h]=u>>>24,this[h+1]=u>>>16,this[h+2]=u>>>8,this[h+3]=u&255,h+4};function M(P,u,h,T,I){tt(u,T,I,P,h,7);let J=Number(u&BigInt(4294967295));P[h++]=J,J=J>>8,P[h++]=J,J=J>>8,P[h++]=J,J=J>>8,P[h++]=J;let te=Number(u>>BigInt(32)&BigInt(4294967295));return P[h++]=te,te=te>>8,P[h++]=te,te=te>>8,P[h++]=te,te=te>>8,P[h++]=te,h}function Q(P,u,h,T,I){tt(u,T,I,P,h,7);let J=Number(u&BigInt(4294967295));P[h+7]=J,J=J>>8,P[h+6]=J,J=J>>8,P[h+5]=J,J=J>>8,P[h+4]=J;let te=Number(u>>BigInt(32)&BigInt(4294967295));return P[h+3]=te,te=te>>8,P[h+2]=te,te=te>>8,P[h+1]=te,te=te>>8,P[h]=te,h+8}f.prototype.writeBigUInt64LE=qt(function(u,h=0){return M(this,u,h,BigInt(0),BigInt("0xffffffffffffffff"))}),f.prototype.writeBigUInt64BE=qt(function(u,h=0){return Q(this,u,h,BigInt(0),BigInt("0xffffffffffffffff"))}),f.prototype.writeIntLE=function(u,h,T,I){if(u=+u,h=h>>>0,!I){const Be=Math.pow(2,8*T-1);c(this,u,h,T,Be-1,-Be)}let J=0,te=1,Ae=0;for(this[h]=u&255;++J<T&&(te*=256);)u<0&&Ae===0&&this[h+J-1]!==0&&(Ae=1),this[h+J]=(u/te>>0)-Ae&255;return h+T},f.prototype.writeIntBE=function(u,h,T,I){if(u=+u,h=h>>>0,!I){const Be=Math.pow(2,8*T-1);c(this,u,h,T,Be-1,-Be)}let J=T-1,te=1,Ae=0;for(this[h+J]=u&255;--J>=0&&(te*=256);)u<0&&Ae===0&&this[h+J+1]!==0&&(Ae=1),this[h+J]=(u/te>>0)-Ae&255;return h+T},f.prototype.writeInt8=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,1,127,-128),u<0&&(u=255+u+1),this[h]=u&255,h+1},f.prototype.writeInt16LE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,2,32767,-32768),this[h]=u&255,this[h+1]=u>>>8,h+2},f.prototype.writeInt16BE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,2,32767,-32768),this[h]=u>>>8,this[h+1]=u&255,h+2},f.prototype.writeInt32LE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,4,2147483647,-2147483648),this[h]=u&255,this[h+1]=u>>>8,this[h+2]=u>>>16,this[h+3]=u>>>24,h+4},f.prototype.writeInt32BE=function(u,h,T){return u=+u,h=h>>>0,T||c(this,u,h,4,2147483647,-2147483648),u<0&&(u=4294967295+u+1),this[h]=u>>>24,this[h+1]=u>>>16,this[h+2]=u>>>8,this[h+3]=u&255,h+4},f.prototype.writeBigInt64LE=qt(function(u,h=0){return M(this,u,h,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),f.prototype.writeBigInt64BE=qt(function(u,h=0){return Q(this,u,h,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function ae(P,u,h,T,I,J){if(h+T>P.length)throw new RangeError("Index out of range");if(h<0)throw new RangeError("Index out of range")}function he(P,u,h,T,I){return u=+u,h=h>>>0,I||ae(P,u,h,4),r.write(P,u,h,T,23,4),h+4}f.prototype.writeFloatLE=function(u,h,T){return he(this,u,h,!0,T)},f.prototype.writeFloatBE=function(u,h,T){return he(this,u,h,!1,T)};function Je(P,u,h,T,I){return u=+u,h=h>>>0,I||ae(P,u,h,8),r.write(P,u,h,T,52,8),h+8}f.prototype.writeDoubleLE=function(u,h,T){return Je(this,u,h,!0,T)},f.prototype.writeDoubleBE=function(u,h,T){return Je(this,u,h,!1,T)},f.prototype.copy=function(u,h,T,I){if(!f.isBuffer(u))throw new TypeError("argument should be a Buffer");if(T||(T=0),!I&&I!==0&&(I=this.length),h>=u.length&&(h=u.length),h||(h=0),I>0&&I<T&&(I=T),I===T||u.length===0||this.length===0)return 0;if(h<0)throw new RangeError("targetStart out of bounds");if(T<0||T>=this.length)throw new RangeError("Index out of range");if(I<0)throw new RangeError("sourceEnd out of bounds");I>this.length&&(I=this.length),u.length-h<I-T&&(I=u.length-h+T);const J=I-T;return this===u&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(h,T,I):Uint8Array.prototype.set.call(u,this.subarray(T,I),h),J},f.prototype.fill=function(u,h,T,I){if(typeof u=="string"){if(typeof h=="string"?(I=h,h=0,T=this.length):typeof T=="string"&&(I=T,T=this.length),I!==void 0&&typeof I!="string")throw new TypeError("encoding must be a string");if(typeof I=="string"&&!f.isEncoding(I))throw new TypeError("Unknown encoding: "+I);if(u.length===1){const te=u.charCodeAt(0);(I==="utf8"&&te<128||I==="latin1")&&(u=te)}}else typeof u=="number"?u=u&255:typeof u=="boolean"&&(u=Number(u));if(h<0||this.length<h||this.length<T)throw new RangeError("Out of range index");if(T<=h)return this;h=h>>>0,T=T===void 0?this.length:T>>>0,u||(u=0);let J;if(typeof u=="number")for(J=h;J<T;++J)this[J]=u;else{const te=f.isBuffer(u)?u:f.from(u,I),Ae=te.length;if(Ae===0)throw new TypeError('The value "'+u+'" is invalid for argument "value"');for(J=0;J<T-h;++J)this[J+h]=te[J%Ae]}return this};const ve={};function Ke(P,u,h){ve[P]=class extends h{constructor(){super(),Object.defineProperty(this,"message",{value:u.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${P}]`,this.stack,delete this.name}get code(){return P}set code(I){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:I,writable:!0})}toString(){return`${this.name} [${P}]: ${this.message}`}}}Ke("ERR_BUFFER_OUT_OF_BOUNDS",function(P){return P?`${P} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),Ke("ERR_INVALID_ARG_TYPE",function(P,u){return`The "${P}" argument must be of type number. Received type ${typeof u}`},TypeError),Ke("ERR_OUT_OF_RANGE",function(P,u,h){let T=`The value of "${P}" is out of range.`,I=h;return Number.isInteger(h)&&Math.abs(h)>2**32?I=Gt(String(h)):typeof h=="bigint"&&(I=String(h),(h>BigInt(2)**BigInt(32)||h<-(BigInt(2)**BigInt(32)))&&(I=Gt(I)),I+="n"),T+=` It must be ${u}. Received ${I}`,T},RangeError);function Gt(P){let u="",h=P.length;const T=P[0]==="-"?1:0;for(;h>=T+4;h-=3)u=`_${P.slice(h-3,h)}${u}`;return`${P.slice(0,h)}${u}`}function mt(P,u,h){At(u,"offset"),(P[u]===void 0||P[u+h]===void 0)&&Ce(u,P.length-(h+1))}function tt(P,u,h,T,I,J){if(P>h||P<u){const te=typeof u=="bigint"?"n":"";let Ae;throw J>3?u===0||u===BigInt(0)?Ae=`>= 0${te} and < 2${te} ** ${(J+1)*8}${te}`:Ae=`>= -(2${te} ** ${(J+1)*8-1}${te}) and < 2 ** ${(J+1)*8-1}${te}`:Ae=`>= ${u}${te} and <= ${h}${te}`,new ve.ERR_OUT_OF_RANGE("value",Ae,P)}mt(T,I,J)}function At(P,u){if(typeof P!="number")throw new ve.ERR_INVALID_ARG_TYPE(u,"number",P)}function Ce(P,u,h){throw Math.floor(P)!==P?(At(P,h),new ve.ERR_OUT_OF_RANGE(h||"offset","an integer",P)):u<0?new ve.ERR_BUFFER_OUT_OF_BOUNDS:new ve.ERR_OUT_OF_RANGE(h||"offset",`>= ${h?1:0} and <= ${u}`,P)}const wt=/[^+/0-9A-Za-z-_]/g;function fr(P){if(P=P.split("=")[0],P=P.trim().replace(wt,""),P.length<2)return"";for(;P.length%4!==0;)P=P+"=";return P}function ct(P,u){u=u||1/0;let h;const T=P.length;let I=null;const J=[];for(let te=0;te<T;++te){if(h=P.charCodeAt(te),h>55295&&h<57344){if(!I){if(h>56319){(u-=3)>-1&&J.push(239,191,189);continue}else if(te+1===T){(u-=3)>-1&&J.push(239,191,189);continue}I=h;continue}if(h<56320){(u-=3)>-1&&J.push(239,191,189),I=h;continue}h=(I-55296<<10|h-56320)+65536}else I&&(u-=3)>-1&&J.push(239,191,189);if(I=null,h<128){if((u-=1)<0)break;J.push(h)}else if(h<2048){if((u-=2)<0)break;J.push(h>>6|192,h&63|128)}else if(h<65536){if((u-=3)<0)break;J.push(h>>12|224,h>>6&63|128,h&63|128)}else if(h<1114112){if((u-=4)<0)break;J.push(h>>18|240,h>>12&63|128,h>>6&63|128,h&63|128)}else throw new Error("Invalid code point")}return J}function pt(P){const u=[];for(let h=0;h<P.length;++h)u.push(P.charCodeAt(h)&255);return u}function Qt(P,u){let h,T,I;const J=[];for(let te=0;te<P.length&&!((u-=2)<0);++te)h=P.charCodeAt(te),T=h>>8,I=h%256,J.push(I),J.push(T);return J}function rt(P){return t.toByteArray(fr(P))}function Ve(P,u,h,T){let I;for(I=0;I<T&&!(I+h>=u.length||I>=P.length);++I)u[I+h]=P[I];return I}function vt(P,u){return P instanceof u||P!=null&&P.constructor!=null&&P.constructor.name!=null&&P.constructor.name===u.name}function Qe(P){return P!==P}const ut=function(){const P="0123456789abcdef",u=new Array(256);for(let h=0;h<16;++h){const T=h*16;for(let I=0;I<16;++I)u[T+I]=P[h]+P[I]}return u}();function qt(P){return typeof BigInt>"u"?nt:P}function nt(){throw new Error("BigInt not supported")}})(_r);function Ru(e){return e("return this")}const l0=typeof globalThis<"u"?globalThis:typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:Ru(Function);function af(e,t){return typeof l0[e]>"u"?t:l0[e]}class Zu{constructor(t){}decode(t){let r="";for(let n=0;n<t.length;n++)r+=String.fromCharCode(t[n]);return r}}const Cu=af("TextDecoder",Zu);class Du{encode(t){const r=new Uint8Array(t.length);for(let n=0;n<t.length;n++)r[n]=t.charCodeAt(n);return r}}const Iu=af("TextEncoder",Du);function fn(e){return typeof e=="function"}function et(e,t){if(!e)throw new Error(fn(t)?t():t)}function qu(e,t){return et(e!=null,t),e}const Xt=typeof l0.BigInt=="function"&&typeof l0.BigInt.asIntN=="function"?l0.BigInt:()=>Number.NaN,mo=Xt(0),cn=Xt(1);Xt(1e6);Xt(1e9);Xt(Number.MAX_SAFE_INTEGER);function V0(e,...t){for(let r=0;r<t.length;r++){const n=t[r];n&&Object.assign(e,n)}return e}const ds=Xt(256),xs=Xt(256*256);function _i(e,{isLe:t=!0,isNegative:r=!1}={}){if(!e||!e.length)return Xt(0);const n=t?e:e.reverse(),o=new DataView(n.buffer,n.byteOffset),i=n.length%2;let l=Xt(0);if(r){for(let f=n.length-2;f>=i;f-=2)l=l*xs+Xt(o.getUint16(f,!0)^65535);i&&(l=l*ds+Xt(o.getUint8(0)^255))}else{for(let f=n.length-2;f>=i;f-=2)l=l*xs+Xt(o.getUint16(f,!0));i&&(l=l*ds+Xt(o.getUint8(0)))}return r?l*-cn-cn:l}const wo=/^0x[\da-fA-F]+$/,ff=/^[\da-fA-F]+$/;function Er(e,t=-1,r){return typeof e=="string"&&(e==="0x"||wo.test(e))&&(t===-1?r||e.length%2===0:e.length===2+Math.ceil(t/4))}const Qn="0123456789abcdef",un=new Array(256);for(let e=0;e<Qn.length;e++)un[Qn[e].charCodeAt(0)]=e,e>9&&(un[Qn[e].toUpperCase().charCodeAt(0)]=e);function h0(e,t=-1){if(!e||e==="0x")return new Uint8Array;let r=0;if(wo.test(e))r=2;else if(!ff.test(e))throw new Error(`Expected hex value to convert, found '${e}'`);const n=(e.length-r)/2,o=Math.ceil(t===-1?n:t/8),i=new Uint8Array(o),l=o>n?o-n:0;for(let f=l;f<o;f++,r+=2)i[f]=(un[e.charCodeAt(r)]<<4)+un[e.charCodeAt(r+1)];return i}function Vu(e,t={}){return!e||e==="0x"?Xt(0):_i(h0(e),V0({isLe:!1,isNegative:!1},t))}var cf={exports:{}};const Wu={},uf=Object.freeze(Object.defineProperty({__proto__:null,default:Wu},Symbol.toStringTag,{value:"Module"})),go=Ec(uf);(function(e){(function(t,r){function n(b,s){if(!b)throw new Error(s||"Assertion failed")}function o(b,s){b.super_=s;var d=function(){};d.prototype=s.prototype,b.prototype=new d,b.prototype.constructor=b}function i(b,s,d){if(i.isBN(b))return b;this.negative=0,this.words=null,this.length=0,this.red=null,b!==null&&((s==="le"||s==="be")&&(d=s,s=10),this._init(b||0,s||10,d||"be"))}typeof t=="object"?t.exports=i:r.BN=i,i.BN=i,i.wordSize=26;var l;try{typeof window<"u"&&typeof window.Buffer<"u"?l=window.Buffer:l=go.Buffer}catch{}i.isBN=function(s){return s instanceof i?!0:s!==null&&typeof s=="object"&&s.constructor.wordSize===i.wordSize&&Array.isArray(s.words)},i.max=function(s,d){return s.cmp(d)>0?s:d},i.min=function(s,d){return s.cmp(d)<0?s:d},i.prototype._init=function(s,d,z){if(typeof s=="number")return this._initNumber(s,d,z);if(typeof s=="object")return this._initArray(s,d,z);d==="hex"&&(d=16),n(d===(d|0)&&d>=2&&d<=36),s=s.toString().replace(/\s+/g,"");var L=0;s[0]==="-"&&(L++,this.negative=1),L<s.length&&(d===16?this._parseHex(s,L,z):(this._parseBase(s,d,L),z==="le"&&this._initArray(this.toArray(),d,z)))},i.prototype._initNumber=function(s,d,z){s<0&&(this.negative=1,s=-s),s<67108864?(this.words=[s&67108863],this.length=1):s<4503599627370496?(this.words=[s&67108863,s/67108864&67108863],this.length=2):(n(s<9007199254740992),this.words=[s&67108863,s/67108864&67108863,1],this.length=3),z==="le"&&this._initArray(this.toArray(),d,z)},i.prototype._initArray=function(s,d,z){if(n(typeof s.length=="number"),s.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(s.length/3),this.words=new Array(this.length);for(var L=0;L<this.length;L++)this.words[L]=0;var A,D,q=0;if(z==="be")for(L=s.length-1,A=0;L>=0;L-=3)D=s[L]|s[L-1]<<8|s[L-2]<<16,this.words[A]|=D<<q&67108863,this.words[A+1]=D>>>26-q&67108863,q+=24,q>=26&&(q-=26,A++);else if(z==="le")for(L=0,A=0;L<s.length;L+=3)D=s[L]|s[L+1]<<8|s[L+2]<<16,this.words[A]|=D<<q&67108863,this.words[A+1]=D>>>26-q&67108863,q+=24,q>=26&&(q-=26,A++);return this._strip()};function f(b,s){var d=b.charCodeAt(s);if(d>=48&&d<=57)return d-48;if(d>=65&&d<=70)return d-55;if(d>=97&&d<=102)return d-87;n(!1,"Invalid character in "+b)}function y(b,s,d){var z=f(b,d);return d-1>=s&&(z|=f(b,d-1)<<4),z}i.prototype._parseHex=function(s,d,z){this.length=Math.ceil((s.length-d)/6),this.words=new Array(this.length);for(var L=0;L<this.length;L++)this.words[L]=0;var A=0,D=0,q;if(z==="be")for(L=s.length-1;L>=d;L-=2)q=y(s,d,L)<<A,this.words[D]|=q&67108863,A>=18?(A-=18,D+=1,this.words[D]|=q>>>26):A+=8;else{var g=s.length-d;for(L=g%2===0?d+1:d;L<s.length;L+=2)q=y(s,d,L)<<A,this.words[D]|=q&67108863,A>=18?(A-=18,D+=1,this.words[D]|=q>>>26):A+=8}this._strip()};function x(b,s,d,z){for(var L=0,A=0,D=Math.min(b.length,d),q=s;q<D;q++){var g=b.charCodeAt(q)-48;L*=z,g>=49?A=g-49+10:g>=17?A=g-17+10:A=g,n(g>=0&&A<z,"Invalid character"),L+=A}return L}i.prototype._parseBase=function(s,d,z){this.words=[0],this.length=1;for(var L=0,A=1;A<=67108863;A*=d)L++;L--,A=A/d|0;for(var D=s.length-z,q=D%L,g=Math.min(D,D-q)+z,c=0,M=z;M<g;M+=L)c=x(s,M,M+L,d),this.imuln(A),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(q!==0){var Q=1;for(c=x(s,M,s.length,d),M=0;M<q;M++)Q*=d;this.imuln(Q),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}this._strip()},i.prototype.copy=function(s){s.words=new Array(this.length);for(var d=0;d<this.length;d++)s.words[d]=this.words[d];s.length=this.length,s.negative=this.negative,s.red=this.red};function v(b,s){b.words=s.words,b.length=s.length,b.negative=s.negative,b.red=s.red}if(i.prototype._move=function(s){v(s,this)},i.prototype.clone=function(){var s=new i(null);return this.copy(s),s},i.prototype._expand=function(s){for(;this.length<s;)this.words[this.length++]=0;return this},i.prototype._strip=function(){for(;this.length>1&&this.words[this.length-1]===0;)this.length--;return this._normSign()},i.prototype._normSign=function(){return this.length===1&&this.words[0]===0&&(this.negative=0),this},typeof Symbol<"u"&&typeof Symbol.for=="function")try{i.prototype[Symbol.for("nodejs.util.inspect.custom")]=m}catch{i.prototype.inspect=m}else i.prototype.inspect=m;function m(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var w=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],E=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],N=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];i.prototype.toString=function(s,d){s=s||10,d=d|0||1;var z;if(s===16||s==="hex"){z="";for(var L=0,A=0,D=0;D<this.length;D++){var q=this.words[D],g=((q<<L|A)&16777215).toString(16);A=q>>>24-L&16777215,L+=2,L>=26&&(L-=26,D--),A!==0||D!==this.length-1?z=w[6-g.length]+g+z:z=g+z}for(A!==0&&(z=A.toString(16)+z);z.length%d!==0;)z="0"+z;return this.negative!==0&&(z="-"+z),z}if(s===(s|0)&&s>=2&&s<=36){var c=E[s],M=N[s];z="";var Q=this.clone();for(Q.negative=0;!Q.isZero();){var ae=Q.modrn(M).toString(s);Q=Q.idivn(M),Q.isZero()?z=ae+z:z=w[c-ae.length]+ae+z}for(this.isZero()&&(z="0"+z);z.length%d!==0;)z="0"+z;return this.negative!==0&&(z="-"+z),z}n(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var s=this.words[0];return this.length===2?s+=this.words[1]*67108864:this.length===3&&this.words[2]===1?s+=4503599627370496+this.words[1]*67108864:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),this.negative!==0?-s:s},i.prototype.toJSON=function(){return this.toString(16,2)},l&&(i.prototype.toBuffer=function(s,d){return this.toArrayLike(l,s,d)}),i.prototype.toArray=function(s,d){return this.toArrayLike(Array,s,d)};var O=function(s,d){return s.allocUnsafe?s.allocUnsafe(d):new s(d)};i.prototype.toArrayLike=function(s,d,z){this._strip();var L=this.byteLength(),A=z||Math.max(1,L);n(L<=A,"byte array longer than desired length"),n(A>0,"Requested array length <= 0");var D=O(s,A),q=d==="le"?"LE":"BE";return this["_toArrayLike"+q](D,L),D},i.prototype._toArrayLikeLE=function(s,d){for(var z=0,L=0,A=0,D=0;A<this.length;A++){var q=this.words[A]<<D|L;s[z++]=q&255,z<s.length&&(s[z++]=q>>8&255),z<s.length&&(s[z++]=q>>16&255),D===6?(z<s.length&&(s[z++]=q>>24&255),L=0,D=0):(L=q>>>24,D+=2)}if(z<s.length)for(s[z++]=L;z<s.length;)s[z++]=0},i.prototype._toArrayLikeBE=function(s,d){for(var z=s.length-1,L=0,A=0,D=0;A<this.length;A++){var q=this.words[A]<<D|L;s[z--]=q&255,z>=0&&(s[z--]=q>>8&255),z>=0&&(s[z--]=q>>16&255),D===6?(z>=0&&(s[z--]=q>>24&255),L=0,D=0):(L=q>>>24,D+=2)}if(z>=0)for(s[z--]=L;z>=0;)s[z--]=0},Math.clz32?i.prototype._countBits=function(s){return 32-Math.clz32(s)}:i.prototype._countBits=function(s){var d=s,z=0;return d>=4096&&(z+=13,d>>>=13),d>=64&&(z+=7,d>>>=7),d>=8&&(z+=4,d>>>=4),d>=2&&(z+=2,d>>>=2),z+d},i.prototype._zeroBits=function(s){if(s===0)return 26;var d=s,z=0;return(d&8191)===0&&(z+=13,d>>>=13),(d&127)===0&&(z+=7,d>>>=7),(d&15)===0&&(z+=4,d>>>=4),(d&3)===0&&(z+=2,d>>>=2),(d&1)===0&&z++,z},i.prototype.bitLength=function(){var s=this.words[this.length-1],d=this._countBits(s);return(this.length-1)*26+d};function C(b){for(var s=new Array(b.bitLength()),d=0;d<s.length;d++){var z=d/26|0,L=d%26;s[d]=b.words[z]>>>L&1}return s}i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var s=0,d=0;d<this.length;d++){var z=this._zeroBits(this.words[d]);if(s+=z,z!==26)break}return s},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(s){return this.negative!==0?this.abs().inotn(s).iaddn(1):this.clone()},i.prototype.fromTwos=function(s){return this.testn(s-1)?this.notn(s).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return this.negative!==0},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(s){for(;this.length<s.length;)this.words[this.length++]=0;for(var d=0;d<s.length;d++)this.words[d]=this.words[d]|s.words[d];return this._strip()},i.prototype.ior=function(s){return n((this.negative|s.negative)===0),this.iuor(s)},i.prototype.or=function(s){return this.length>s.length?this.clone().ior(s):s.clone().ior(this)},i.prototype.uor=function(s){return this.length>s.length?this.clone().iuor(s):s.clone().iuor(this)},i.prototype.iuand=function(s){var d;this.length>s.length?d=s:d=this;for(var z=0;z<d.length;z++)this.words[z]=this.words[z]&s.words[z];return this.length=d.length,this._strip()},i.prototype.iand=function(s){return n((this.negative|s.negative)===0),this.iuand(s)},i.prototype.and=function(s){return this.length>s.length?this.clone().iand(s):s.clone().iand(this)},i.prototype.uand=function(s){return this.length>s.length?this.clone().iuand(s):s.clone().iuand(this)},i.prototype.iuxor=function(s){var d,z;this.length>s.length?(d=this,z=s):(d=s,z=this);for(var L=0;L<z.length;L++)this.words[L]=d.words[L]^z.words[L];if(this!==d)for(;L<d.length;L++)this.words[L]=d.words[L];return this.length=d.length,this._strip()},i.prototype.ixor=function(s){return n((this.negative|s.negative)===0),this.iuxor(s)},i.prototype.xor=function(s){return this.length>s.length?this.clone().ixor(s):s.clone().ixor(this)},i.prototype.uxor=function(s){return this.length>s.length?this.clone().iuxor(s):s.clone().iuxor(this)},i.prototype.inotn=function(s){n(typeof s=="number"&&s>=0);var d=Math.ceil(s/26)|0,z=s%26;this._expand(d),z>0&&d--;for(var L=0;L<d;L++)this.words[L]=~this.words[L]&67108863;return z>0&&(this.words[L]=~this.words[L]&67108863>>26-z),this._strip()},i.prototype.notn=function(s){return this.clone().inotn(s)},i.prototype.setn=function(s,d){n(typeof s=="number"&&s>=0);var z=s/26|0,L=s%26;return this._expand(z+1),d?this.words[z]=this.words[z]|1<<L:this.words[z]=this.words[z]&~(1<<L),this._strip()},i.prototype.iadd=function(s){var d;if(this.negative!==0&&s.negative===0)return this.negative=0,d=this.isub(s),this.negative^=1,this._normSign();if(this.negative===0&&s.negative!==0)return s.negative=0,d=this.isub(s),s.negative=1,d._normSign();var z,L;this.length>s.length?(z=this,L=s):(z=s,L=this);for(var A=0,D=0;D<L.length;D++)d=(z.words[D]|0)+(L.words[D]|0)+A,this.words[D]=d&67108863,A=d>>>26;for(;A!==0&&D<z.length;D++)d=(z.words[D]|0)+A,this.words[D]=d&67108863,A=d>>>26;if(this.length=z.length,A!==0)this.words[this.length]=A,this.length++;else if(z!==this)for(;D<z.length;D++)this.words[D]=z.words[D];return this},i.prototype.add=function(s){var d;return s.negative!==0&&this.negative===0?(s.negative=0,d=this.sub(s),s.negative^=1,d):s.negative===0&&this.negative!==0?(this.negative=0,d=s.sub(this),this.negative=1,d):this.length>s.length?this.clone().iadd(s):s.clone().iadd(this)},i.prototype.isub=function(s){if(s.negative!==0){s.negative=0;var d=this.iadd(s);return s.negative=1,d._normSign()}else if(this.negative!==0)return this.negative=0,this.iadd(s),this.negative=1,this._normSign();var z=this.cmp(s);if(z===0)return this.negative=0,this.length=1,this.words[0]=0,this;var L,A;z>0?(L=this,A=s):(L=s,A=this);for(var D=0,q=0;q<A.length;q++)d=(L.words[q]|0)-(A.words[q]|0)+D,D=d>>26,this.words[q]=d&67108863;for(;D!==0&&q<L.length;q++)d=(L.words[q]|0)+D,D=d>>26,this.words[q]=d&67108863;if(D===0&&q<L.length&&L!==this)for(;q<L.length;q++)this.words[q]=L.words[q];return this.length=Math.max(this.length,q),L!==this&&(this.negative=1),this._strip()},i.prototype.sub=function(s){return this.clone().isub(s)};function V(b,s,d){d.negative=s.negative^b.negative;var z=b.length+s.length|0;d.length=z,z=z-1|0;var L=b.words[0]|0,A=s.words[0]|0,D=L*A,q=D&67108863,g=D/67108864|0;d.words[0]=q;for(var c=1;c<z;c++){for(var M=g>>>26,Q=g&67108863,ae=Math.min(c,s.length-1),he=Math.max(0,c-b.length+1);he<=ae;he++){var Je=c-he|0;L=b.words[Je]|0,A=s.words[he]|0,D=L*A+Q,M+=D/67108864|0,Q=D&67108863}d.words[c]=Q|0,g=M|0}return g!==0?d.words[c]=g|0:d.length--,d._strip()}var j=function(s,d,z){var L=s.words,A=d.words,D=z.words,q=0,g,c,M,Q=L[0]|0,ae=Q&8191,he=Q>>>13,Je=L[1]|0,ve=Je&8191,Ke=Je>>>13,Gt=L[2]|0,mt=Gt&8191,tt=Gt>>>13,At=L[3]|0,Ce=At&8191,wt=At>>>13,fr=L[4]|0,ct=fr&8191,pt=fr>>>13,Qt=L[5]|0,rt=Qt&8191,Ve=Qt>>>13,vt=L[6]|0,Qe=vt&8191,ut=vt>>>13,qt=L[7]|0,nt=qt&8191,P=qt>>>13,u=L[8]|0,h=u&8191,T=u>>>13,I=L[9]|0,J=I&8191,te=I>>>13,Ae=A[0]|0,Be=Ae&8191,Ne=Ae>>>13,lt=A[1]|0,Me=lt&8191,zt=lt>>>13,kr=A[2]|0,Tt=kr&8191,Lt=kr>>>13,n0=A[3]|0,ht=n0&8191,yt=n0>>>13,cr=A[4]|0,Mt=cr&8191,Et=cr>>>13,Lr=A[5]|0,St=Lr&8191,_e=Lr>>>13,Ct=A[6]|0,p=Ct&8191,H=Ct>>>13,k=A[7]|0,a=k&8191,B=k>>>13,K=A[8]|0,W=K&8191,ne=K>>>13,ue=A[9]|0,de=ue&8191,le=ue>>>13;z.negative=s.negative^d.negative,z.length=19,g=Math.imul(ae,Be),c=Math.imul(ae,Ne),c=c+Math.imul(he,Be)|0,M=Math.imul(he,Ne);var $e=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+($e>>>26)|0,$e&=67108863,g=Math.imul(ve,Be),c=Math.imul(ve,Ne),c=c+Math.imul(Ke,Be)|0,M=Math.imul(Ke,Ne),g=g+Math.imul(ae,Me)|0,c=c+Math.imul(ae,zt)|0,c=c+Math.imul(he,Me)|0,M=M+Math.imul(he,zt)|0;var me=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(me>>>26)|0,me&=67108863,g=Math.imul(mt,Be),c=Math.imul(mt,Ne),c=c+Math.imul(tt,Be)|0,M=Math.imul(tt,Ne),g=g+Math.imul(ve,Me)|0,c=c+Math.imul(ve,zt)|0,c=c+Math.imul(Ke,Me)|0,M=M+Math.imul(Ke,zt)|0,g=g+Math.imul(ae,Tt)|0,c=c+Math.imul(ae,Lt)|0,c=c+Math.imul(he,Tt)|0,M=M+Math.imul(he,Lt)|0;var Oe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,g=Math.imul(Ce,Be),c=Math.imul(Ce,Ne),c=c+Math.imul(wt,Be)|0,M=Math.imul(wt,Ne),g=g+Math.imul(mt,Me)|0,c=c+Math.imul(mt,zt)|0,c=c+Math.imul(tt,Me)|0,M=M+Math.imul(tt,zt)|0,g=g+Math.imul(ve,Tt)|0,c=c+Math.imul(ve,Lt)|0,c=c+Math.imul(Ke,Tt)|0,M=M+Math.imul(Ke,Lt)|0,g=g+Math.imul(ae,ht)|0,c=c+Math.imul(ae,yt)|0,c=c+Math.imul(he,ht)|0,M=M+Math.imul(he,yt)|0;var Se=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Se>>>26)|0,Se&=67108863,g=Math.imul(ct,Be),c=Math.imul(ct,Ne),c=c+Math.imul(pt,Be)|0,M=Math.imul(pt,Ne),g=g+Math.imul(Ce,Me)|0,c=c+Math.imul(Ce,zt)|0,c=c+Math.imul(wt,Me)|0,M=M+Math.imul(wt,zt)|0,g=g+Math.imul(mt,Tt)|0,c=c+Math.imul(mt,Lt)|0,c=c+Math.imul(tt,Tt)|0,M=M+Math.imul(tt,Lt)|0,g=g+Math.imul(ve,ht)|0,c=c+Math.imul(ve,yt)|0,c=c+Math.imul(Ke,ht)|0,M=M+Math.imul(Ke,yt)|0,g=g+Math.imul(ae,Mt)|0,c=c+Math.imul(ae,Et)|0,c=c+Math.imul(he,Mt)|0,M=M+Math.imul(he,Et)|0;var Re=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Re>>>26)|0,Re&=67108863,g=Math.imul(rt,Be),c=Math.imul(rt,Ne),c=c+Math.imul(Ve,Be)|0,M=Math.imul(Ve,Ne),g=g+Math.imul(ct,Me)|0,c=c+Math.imul(ct,zt)|0,c=c+Math.imul(pt,Me)|0,M=M+Math.imul(pt,zt)|0,g=g+Math.imul(Ce,Tt)|0,c=c+Math.imul(Ce,Lt)|0,c=c+Math.imul(wt,Tt)|0,M=M+Math.imul(wt,Lt)|0,g=g+Math.imul(mt,ht)|0,c=c+Math.imul(mt,yt)|0,c=c+Math.imul(tt,ht)|0,M=M+Math.imul(tt,yt)|0,g=g+Math.imul(ve,Mt)|0,c=c+Math.imul(ve,Et)|0,c=c+Math.imul(Ke,Mt)|0,M=M+Math.imul(Ke,Et)|0,g=g+Math.imul(ae,St)|0,c=c+Math.imul(ae,_e)|0,c=c+Math.imul(he,St)|0,M=M+Math.imul(he,_e)|0;var Ue=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Ue>>>26)|0,Ue&=67108863,g=Math.imul(Qe,Be),c=Math.imul(Qe,Ne),c=c+Math.imul(ut,Be)|0,M=Math.imul(ut,Ne),g=g+Math.imul(rt,Me)|0,c=c+Math.imul(rt,zt)|0,c=c+Math.imul(Ve,Me)|0,M=M+Math.imul(Ve,zt)|0,g=g+Math.imul(ct,Tt)|0,c=c+Math.imul(ct,Lt)|0,c=c+Math.imul(pt,Tt)|0,M=M+Math.imul(pt,Lt)|0,g=g+Math.imul(Ce,ht)|0,c=c+Math.imul(Ce,yt)|0,c=c+Math.imul(wt,ht)|0,M=M+Math.imul(wt,yt)|0,g=g+Math.imul(mt,Mt)|0,c=c+Math.imul(mt,Et)|0,c=c+Math.imul(tt,Mt)|0,M=M+Math.imul(tt,Et)|0,g=g+Math.imul(ve,St)|0,c=c+Math.imul(ve,_e)|0,c=c+Math.imul(Ke,St)|0,M=M+Math.imul(Ke,_e)|0,g=g+Math.imul(ae,p)|0,c=c+Math.imul(ae,H)|0,c=c+Math.imul(he,p)|0,M=M+Math.imul(he,H)|0;var Xe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Xe>>>26)|0,Xe&=67108863,g=Math.imul(nt,Be),c=Math.imul(nt,Ne),c=c+Math.imul(P,Be)|0,M=Math.imul(P,Ne),g=g+Math.imul(Qe,Me)|0,c=c+Math.imul(Qe,zt)|0,c=c+Math.imul(ut,Me)|0,M=M+Math.imul(ut,zt)|0,g=g+Math.imul(rt,Tt)|0,c=c+Math.imul(rt,Lt)|0,c=c+Math.imul(Ve,Tt)|0,M=M+Math.imul(Ve,Lt)|0,g=g+Math.imul(ct,ht)|0,c=c+Math.imul(ct,yt)|0,c=c+Math.imul(pt,ht)|0,M=M+Math.imul(pt,yt)|0,g=g+Math.imul(Ce,Mt)|0,c=c+Math.imul(Ce,Et)|0,c=c+Math.imul(wt,Mt)|0,M=M+Math.imul(wt,Et)|0,g=g+Math.imul(mt,St)|0,c=c+Math.imul(mt,_e)|0,c=c+Math.imul(tt,St)|0,M=M+Math.imul(tt,_e)|0,g=g+Math.imul(ve,p)|0,c=c+Math.imul(ve,H)|0,c=c+Math.imul(Ke,p)|0,M=M+Math.imul(Ke,H)|0,g=g+Math.imul(ae,a)|0,c=c+Math.imul(ae,B)|0,c=c+Math.imul(he,a)|0,M=M+Math.imul(he,B)|0;var je=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(je>>>26)|0,je&=67108863,g=Math.imul(h,Be),c=Math.imul(h,Ne),c=c+Math.imul(T,Be)|0,M=Math.imul(T,Ne),g=g+Math.imul(nt,Me)|0,c=c+Math.imul(nt,zt)|0,c=c+Math.imul(P,Me)|0,M=M+Math.imul(P,zt)|0,g=g+Math.imul(Qe,Tt)|0,c=c+Math.imul(Qe,Lt)|0,c=c+Math.imul(ut,Tt)|0,M=M+Math.imul(ut,Lt)|0,g=g+Math.imul(rt,ht)|0,c=c+Math.imul(rt,yt)|0,c=c+Math.imul(Ve,ht)|0,M=M+Math.imul(Ve,yt)|0,g=g+Math.imul(ct,Mt)|0,c=c+Math.imul(ct,Et)|0,c=c+Math.imul(pt,Mt)|0,M=M+Math.imul(pt,Et)|0,g=g+Math.imul(Ce,St)|0,c=c+Math.imul(Ce,_e)|0,c=c+Math.imul(wt,St)|0,M=M+Math.imul(wt,_e)|0,g=g+Math.imul(mt,p)|0,c=c+Math.imul(mt,H)|0,c=c+Math.imul(tt,p)|0,M=M+Math.imul(tt,H)|0,g=g+Math.imul(ve,a)|0,c=c+Math.imul(ve,B)|0,c=c+Math.imul(Ke,a)|0,M=M+Math.imul(Ke,B)|0,g=g+Math.imul(ae,W)|0,c=c+Math.imul(ae,ne)|0,c=c+Math.imul(he,W)|0,M=M+Math.imul(he,ne)|0;var Fe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Fe>>>26)|0,Fe&=67108863,g=Math.imul(J,Be),c=Math.imul(J,Ne),c=c+Math.imul(te,Be)|0,M=Math.imul(te,Ne),g=g+Math.imul(h,Me)|0,c=c+Math.imul(h,zt)|0,c=c+Math.imul(T,Me)|0,M=M+Math.imul(T,zt)|0,g=g+Math.imul(nt,Tt)|0,c=c+Math.imul(nt,Lt)|0,c=c+Math.imul(P,Tt)|0,M=M+Math.imul(P,Lt)|0,g=g+Math.imul(Qe,ht)|0,c=c+Math.imul(Qe,yt)|0,c=c+Math.imul(ut,ht)|0,M=M+Math.imul(ut,yt)|0,g=g+Math.imul(rt,Mt)|0,c=c+Math.imul(rt,Et)|0,c=c+Math.imul(Ve,Mt)|0,M=M+Math.imul(Ve,Et)|0,g=g+Math.imul(ct,St)|0,c=c+Math.imul(ct,_e)|0,c=c+Math.imul(pt,St)|0,M=M+Math.imul(pt,_e)|0,g=g+Math.imul(Ce,p)|0,c=c+Math.imul(Ce,H)|0,c=c+Math.imul(wt,p)|0,M=M+Math.imul(wt,H)|0,g=g+Math.imul(mt,a)|0,c=c+Math.imul(mt,B)|0,c=c+Math.imul(tt,a)|0,M=M+Math.imul(tt,B)|0,g=g+Math.imul(ve,W)|0,c=c+Math.imul(ve,ne)|0,c=c+Math.imul(Ke,W)|0,M=M+Math.imul(Ke,ne)|0,g=g+Math.imul(ae,de)|0,c=c+Math.imul(ae,le)|0,c=c+Math.imul(he,de)|0,M=M+Math.imul(he,le)|0;var we=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(we>>>26)|0,we&=67108863,g=Math.imul(J,Me),c=Math.imul(J,zt),c=c+Math.imul(te,Me)|0,M=Math.imul(te,zt),g=g+Math.imul(h,Tt)|0,c=c+Math.imul(h,Lt)|0,c=c+Math.imul(T,Tt)|0,M=M+Math.imul(T,Lt)|0,g=g+Math.imul(nt,ht)|0,c=c+Math.imul(nt,yt)|0,c=c+Math.imul(P,ht)|0,M=M+Math.imul(P,yt)|0,g=g+Math.imul(Qe,Mt)|0,c=c+Math.imul(Qe,Et)|0,c=c+Math.imul(ut,Mt)|0,M=M+Math.imul(ut,Et)|0,g=g+Math.imul(rt,St)|0,c=c+Math.imul(rt,_e)|0,c=c+Math.imul(Ve,St)|0,M=M+Math.imul(Ve,_e)|0,g=g+Math.imul(ct,p)|0,c=c+Math.imul(ct,H)|0,c=c+Math.imul(pt,p)|0,M=M+Math.imul(pt,H)|0,g=g+Math.imul(Ce,a)|0,c=c+Math.imul(Ce,B)|0,c=c+Math.imul(wt,a)|0,M=M+Math.imul(wt,B)|0,g=g+Math.imul(mt,W)|0,c=c+Math.imul(mt,ne)|0,c=c+Math.imul(tt,W)|0,M=M+Math.imul(tt,ne)|0,g=g+Math.imul(ve,de)|0,c=c+Math.imul(ve,le)|0,c=c+Math.imul(Ke,de)|0,M=M+Math.imul(Ke,le)|0;var He=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(He>>>26)|0,He&=67108863,g=Math.imul(J,Tt),c=Math.imul(J,Lt),c=c+Math.imul(te,Tt)|0,M=Math.imul(te,Lt),g=g+Math.imul(h,ht)|0,c=c+Math.imul(h,yt)|0,c=c+Math.imul(T,ht)|0,M=M+Math.imul(T,yt)|0,g=g+Math.imul(nt,Mt)|0,c=c+Math.imul(nt,Et)|0,c=c+Math.imul(P,Mt)|0,M=M+Math.imul(P,Et)|0,g=g+Math.imul(Qe,St)|0,c=c+Math.imul(Qe,_e)|0,c=c+Math.imul(ut,St)|0,M=M+Math.imul(ut,_e)|0,g=g+Math.imul(rt,p)|0,c=c+Math.imul(rt,H)|0,c=c+Math.imul(Ve,p)|0,M=M+Math.imul(Ve,H)|0,g=g+Math.imul(ct,a)|0,c=c+Math.imul(ct,B)|0,c=c+Math.imul(pt,a)|0,M=M+Math.imul(pt,B)|0,g=g+Math.imul(Ce,W)|0,c=c+Math.imul(Ce,ne)|0,c=c+Math.imul(wt,W)|0,M=M+Math.imul(wt,ne)|0,g=g+Math.imul(mt,de)|0,c=c+Math.imul(mt,le)|0,c=c+Math.imul(tt,de)|0,M=M+Math.imul(tt,le)|0;var ye=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(ye>>>26)|0,ye&=67108863,g=Math.imul(J,ht),c=Math.imul(J,yt),c=c+Math.imul(te,ht)|0,M=Math.imul(te,yt),g=g+Math.imul(h,Mt)|0,c=c+Math.imul(h,Et)|0,c=c+Math.imul(T,Mt)|0,M=M+Math.imul(T,Et)|0,g=g+Math.imul(nt,St)|0,c=c+Math.imul(nt,_e)|0,c=c+Math.imul(P,St)|0,M=M+Math.imul(P,_e)|0,g=g+Math.imul(Qe,p)|0,c=c+Math.imul(Qe,H)|0,c=c+Math.imul(ut,p)|0,M=M+Math.imul(ut,H)|0,g=g+Math.imul(rt,a)|0,c=c+Math.imul(rt,B)|0,c=c+Math.imul(Ve,a)|0,M=M+Math.imul(Ve,B)|0,g=g+Math.imul(ct,W)|0,c=c+Math.imul(ct,ne)|0,c=c+Math.imul(pt,W)|0,M=M+Math.imul(pt,ne)|0,g=g+Math.imul(Ce,de)|0,c=c+Math.imul(Ce,le)|0,c=c+Math.imul(wt,de)|0,M=M+Math.imul(wt,le)|0;var ge=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(ge>>>26)|0,ge&=67108863,g=Math.imul(J,Mt),c=Math.imul(J,Et),c=c+Math.imul(te,Mt)|0,M=Math.imul(te,Et),g=g+Math.imul(h,St)|0,c=c+Math.imul(h,_e)|0,c=c+Math.imul(T,St)|0,M=M+Math.imul(T,_e)|0,g=g+Math.imul(nt,p)|0,c=c+Math.imul(nt,H)|0,c=c+Math.imul(P,p)|0,M=M+Math.imul(P,H)|0,g=g+Math.imul(Qe,a)|0,c=c+Math.imul(Qe,B)|0,c=c+Math.imul(ut,a)|0,M=M+Math.imul(ut,B)|0,g=g+Math.imul(rt,W)|0,c=c+Math.imul(rt,ne)|0,c=c+Math.imul(Ve,W)|0,M=M+Math.imul(Ve,ne)|0,g=g+Math.imul(ct,de)|0,c=c+Math.imul(ct,le)|0,c=c+Math.imul(pt,de)|0,M=M+Math.imul(pt,le)|0;var Pe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,g=Math.imul(J,St),c=Math.imul(J,_e),c=c+Math.imul(te,St)|0,M=Math.imul(te,_e),g=g+Math.imul(h,p)|0,c=c+Math.imul(h,H)|0,c=c+Math.imul(T,p)|0,M=M+Math.imul(T,H)|0,g=g+Math.imul(nt,a)|0,c=c+Math.imul(nt,B)|0,c=c+Math.imul(P,a)|0,M=M+Math.imul(P,B)|0,g=g+Math.imul(Qe,W)|0,c=c+Math.imul(Qe,ne)|0,c=c+Math.imul(ut,W)|0,M=M+Math.imul(ut,ne)|0,g=g+Math.imul(rt,de)|0,c=c+Math.imul(rt,le)|0,c=c+Math.imul(Ve,de)|0,M=M+Math.imul(Ve,le)|0;var pe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(pe>>>26)|0,pe&=67108863,g=Math.imul(J,p),c=Math.imul(J,H),c=c+Math.imul(te,p)|0,M=Math.imul(te,H),g=g+Math.imul(h,a)|0,c=c+Math.imul(h,B)|0,c=c+Math.imul(T,a)|0,M=M+Math.imul(T,B)|0,g=g+Math.imul(nt,W)|0,c=c+Math.imul(nt,ne)|0,c=c+Math.imul(P,W)|0,M=M+Math.imul(P,ne)|0,g=g+Math.imul(Qe,de)|0,c=c+Math.imul(Qe,le)|0,c=c+Math.imul(ut,de)|0,M=M+Math.imul(ut,le)|0;var ee=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(ee>>>26)|0,ee&=67108863,g=Math.imul(J,a),c=Math.imul(J,B),c=c+Math.imul(te,a)|0,M=Math.imul(te,B),g=g+Math.imul(h,W)|0,c=c+Math.imul(h,ne)|0,c=c+Math.imul(T,W)|0,M=M+Math.imul(T,ne)|0,g=g+Math.imul(nt,de)|0,c=c+Math.imul(nt,le)|0,c=c+Math.imul(P,de)|0,M=M+Math.imul(P,le)|0;var re=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(re>>>26)|0,re&=67108863,g=Math.imul(J,W),c=Math.imul(J,ne),c=c+Math.imul(te,W)|0,M=Math.imul(te,ne),g=g+Math.imul(h,de)|0,c=c+Math.imul(h,le)|0,c=c+Math.imul(T,de)|0,M=M+Math.imul(T,le)|0;var fe=(q+g|0)+((c&8191)<<13)|0;q=(M+(c>>>13)|0)+(fe>>>26)|0,fe&=67108863,g=Math.imul(J,de),c=Math.imul(J,le),c=c+Math.imul(te,de)|0,M=Math.imul(te,le);var oe=(q+g|0)+((c&8191)<<13)|0;return q=(M+(c>>>13)|0)+(oe>>>26)|0,oe&=67108863,D[0]=$e,D[1]=me,D[2]=Oe,D[3]=Se,D[4]=Re,D[5]=Ue,D[6]=Xe,D[7]=je,D[8]=Fe,D[9]=we,D[10]=He,D[11]=ye,D[12]=ge,D[13]=Pe,D[14]=pe,D[15]=ee,D[16]=re,D[17]=fe,D[18]=oe,q!==0&&(D[19]=q,z.length++),z};Math.imul||(j=V);function X(b,s,d){d.negative=s.negative^b.negative,d.length=b.length+s.length;for(var z=0,L=0,A=0;A<d.length-1;A++){var D=L;L=0;for(var q=z&67108863,g=Math.min(A,s.length-1),c=Math.max(0,A-b.length+1);c<=g;c++){var M=A-c,Q=b.words[M]|0,ae=s.words[c]|0,he=Q*ae,Je=he&67108863;D=D+(he/67108864|0)|0,Je=Je+q|0,q=Je&67108863,D=D+(Je>>>26)|0,L+=D>>>26,D&=67108863}d.words[A]=q,z=D,D=L}return z!==0?d.words[A]=z:d.length--,d._strip()}function F(b,s,d){return X(b,s,d)}i.prototype.mulTo=function(s,d){var z,L=this.length+s.length;return this.length===10&&s.length===10?z=j(this,s,d):L<63?z=V(this,s,d):L<1024?z=X(this,s,d):z=F(this,s,d),z},i.prototype.mul=function(s){var d=new i(null);return d.words=new Array(this.length+s.length),this.mulTo(s,d)},i.prototype.mulf=function(s){var d=new i(null);return d.words=new Array(this.length+s.length),F(this,s,d)},i.prototype.imul=function(s){return this.clone().mulTo(s,this)},i.prototype.imuln=function(s){var d=s<0;d&&(s=-s),n(typeof s=="number"),n(s<67108864);for(var z=0,L=0;L<this.length;L++){var A=(this.words[L]|0)*s,D=(A&67108863)+(z&67108863);z>>=26,z+=A/67108864|0,z+=D>>>26,this.words[L]=D&67108863}return z!==0&&(this.words[L]=z,this.length++),d?this.ineg():this},i.prototype.muln=function(s){return this.clone().imuln(s)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(s){var d=C(s);if(d.length===0)return new i(1);for(var z=this,L=0;L<d.length&&d[L]===0;L++,z=z.sqr());if(++L<d.length)for(var A=z.sqr();L<d.length;L++,A=A.sqr())d[L]!==0&&(z=z.mul(A));return z},i.prototype.iushln=function(s){n(typeof s=="number"&&s>=0);var d=s%26,z=(s-d)/26,L=67108863>>>26-d<<26-d,A;if(d!==0){var D=0;for(A=0;A<this.length;A++){var q=this.words[A]&L,g=(this.words[A]|0)-q<<d;this.words[A]=g|D,D=q>>>26-d}D&&(this.words[A]=D,this.length++)}if(z!==0){for(A=this.length-1;A>=0;A--)this.words[A+z]=this.words[A];for(A=0;A<z;A++)this.words[A]=0;this.length+=z}return this._strip()},i.prototype.ishln=function(s){return n(this.negative===0),this.iushln(s)},i.prototype.iushrn=function(s,d,z){n(typeof s=="number"&&s>=0);var L;d?L=(d-d%26)/26:L=0;var A=s%26,D=Math.min((s-A)/26,this.length),q=67108863^67108863>>>A<<A,g=z;if(L-=D,L=Math.max(0,L),g){for(var c=0;c<D;c++)g.words[c]=this.words[c];g.length=D}if(D!==0)if(this.length>D)for(this.length-=D,c=0;c<this.length;c++)this.words[c]=this.words[c+D];else this.words[0]=0,this.length=1;var M=0;for(c=this.length-1;c>=0&&(M!==0||c>=L);c--){var Q=this.words[c]|0;this.words[c]=M<<26-A|Q>>>A,M=Q&q}return g&&M!==0&&(g.words[g.length++]=M),this.length===0&&(this.words[0]=0,this.length=1),this._strip()},i.prototype.ishrn=function(s,d,z){return n(this.negative===0),this.iushrn(s,d,z)},i.prototype.shln=function(s){return this.clone().ishln(s)},i.prototype.ushln=function(s){return this.clone().iushln(s)},i.prototype.shrn=function(s){return this.clone().ishrn(s)},i.prototype.ushrn=function(s){return this.clone().iushrn(s)},i.prototype.testn=function(s){n(typeof s=="number"&&s>=0);var d=s%26,z=(s-d)/26,L=1<<d;if(this.length<=z)return!1;var A=this.words[z];return!!(A&L)},i.prototype.imaskn=function(s){n(typeof s=="number"&&s>=0);var d=s%26,z=(s-d)/26;if(n(this.negative===0,"imaskn works only with positive numbers"),this.length<=z)return this;if(d!==0&&z++,this.length=Math.min(z,this.length),d!==0){var L=67108863^67108863>>>d<<d;this.words[this.length-1]&=L}return this._strip()},i.prototype.maskn=function(s){return this.clone().imaskn(s)},i.prototype.iaddn=function(s){return n(typeof s=="number"),n(s<67108864),s<0?this.isubn(-s):this.negative!==0?this.length===1&&(this.words[0]|0)<=s?(this.words[0]=s-(this.words[0]|0),this.negative=0,this):(this.negative=0,this.isubn(s),this.negative=1,this):this._iaddn(s)},i.prototype._iaddn=function(s){this.words[0]+=s;for(var d=0;d<this.length&&this.words[d]>=67108864;d++)this.words[d]-=67108864,d===this.length-1?this.words[d+1]=1:this.words[d+1]++;return this.length=Math.max(this.length,d+1),this},i.prototype.isubn=function(s){if(n(typeof s=="number"),n(s<67108864),s<0)return this.iaddn(-s);if(this.negative!==0)return this.negative=0,this.iaddn(s),this.negative=1,this;if(this.words[0]-=s,this.length===1&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var d=0;d<this.length&&this.words[d]<0;d++)this.words[d]+=67108864,this.words[d+1]-=1;return this._strip()},i.prototype.addn=function(s){return this.clone().iaddn(s)},i.prototype.subn=function(s){return this.clone().isubn(s)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(s,d,z){var L=s.length+z,A;this._expand(L);var D,q=0;for(A=0;A<s.length;A++){D=(this.words[A+z]|0)+q;var g=(s.words[A]|0)*d;D-=g&67108863,q=(D>>26)-(g/67108864|0),this.words[A+z]=D&67108863}for(;A<this.length-z;A++)D=(this.words[A+z]|0)+q,q=D>>26,this.words[A+z]=D&67108863;if(q===0)return this._strip();for(n(q===-1),q=0,A=0;A<this.length;A++)D=-(this.words[A]|0)+q,q=D>>26,this.words[A]=D&67108863;return this.negative=1,this._strip()},i.prototype._wordDiv=function(s,d){var z=this.length-s.length,L=this.clone(),A=s,D=A.words[A.length-1]|0,q=this._countBits(D);z=26-q,z!==0&&(A=A.ushln(z),L.iushln(z),D=A.words[A.length-1]|0);var g=L.length-A.length,c;if(d!=="mod"){c=new i(null),c.length=g+1,c.words=new Array(c.length);for(var M=0;M<c.length;M++)c.words[M]=0}var Q=L.clone()._ishlnsubmul(A,1,g);Q.negative===0&&(L=Q,c&&(c.words[g]=1));for(var ae=g-1;ae>=0;ae--){var he=(L.words[A.length+ae]|0)*67108864+(L.words[A.length+ae-1]|0);for(he=Math.min(he/D|0,67108863),L._ishlnsubmul(A,he,ae);L.negative!==0;)he--,L.negative=0,L._ishlnsubmul(A,1,ae),L.isZero()||(L.negative^=1);c&&(c.words[ae]=he)}return c&&c._strip(),L._strip(),d!=="div"&&z!==0&&L.iushrn(z),{div:c||null,mod:L}},i.prototype.divmod=function(s,d,z){if(n(!s.isZero()),this.isZero())return{div:new i(0),mod:new i(0)};var L,A,D;return this.negative!==0&&s.negative===0?(D=this.neg().divmod(s,d),d!=="mod"&&(L=D.div.neg()),d!=="div"&&(A=D.mod.neg(),z&&A.negative!==0&&A.iadd(s)),{div:L,mod:A}):this.negative===0&&s.negative!==0?(D=this.divmod(s.neg(),d),d!=="mod"&&(L=D.div.neg()),{div:L,mod:D.mod}):(this.negative&s.negative)!==0?(D=this.neg().divmod(s.neg(),d),d!=="div"&&(A=D.mod.neg(),z&&A.negative!==0&&A.isub(s)),{div:D.div,mod:A}):s.length>this.length||this.cmp(s)<0?{div:new i(0),mod:this}:s.length===1?d==="div"?{div:this.divn(s.words[0]),mod:null}:d==="mod"?{div:null,mod:new i(this.modrn(s.words[0]))}:{div:this.divn(s.words[0]),mod:new i(this.modrn(s.words[0]))}:this._wordDiv(s,d)},i.prototype.div=function(s){return this.divmod(s,"div",!1).div},i.prototype.mod=function(s){return this.divmod(s,"mod",!1).mod},i.prototype.umod=function(s){return this.divmod(s,"mod",!0).mod},i.prototype.divRound=function(s){var d=this.divmod(s);if(d.mod.isZero())return d.div;var z=d.div.negative!==0?d.mod.isub(s):d.mod,L=s.ushrn(1),A=s.andln(1),D=z.cmp(L);return D<0||A===1&&D===0?d.div:d.div.negative!==0?d.div.isubn(1):d.div.iaddn(1)},i.prototype.modrn=function(s){var d=s<0;d&&(s=-s),n(s<=67108863);for(var z=(1<<26)%s,L=0,A=this.length-1;A>=0;A--)L=(z*L+(this.words[A]|0))%s;return d?-L:L},i.prototype.modn=function(s){return this.modrn(s)},i.prototype.idivn=function(s){var d=s<0;d&&(s=-s),n(s<=67108863);for(var z=0,L=this.length-1;L>=0;L--){var A=(this.words[L]|0)+z*67108864;this.words[L]=A/s|0,z=A%s}return this._strip(),d?this.ineg():this},i.prototype.divn=function(s){return this.clone().idivn(s)},i.prototype.egcd=function(s){n(s.negative===0),n(!s.isZero());var d=this,z=s.clone();d.negative!==0?d=d.umod(s):d=d.clone();for(var L=new i(1),A=new i(0),D=new i(0),q=new i(1),g=0;d.isEven()&&z.isEven();)d.iushrn(1),z.iushrn(1),++g;for(var c=z.clone(),M=d.clone();!d.isZero();){for(var Q=0,ae=1;(d.words[0]&ae)===0&&Q<26;++Q,ae<<=1);if(Q>0)for(d.iushrn(Q);Q-- >0;)(L.isOdd()||A.isOdd())&&(L.iadd(c),A.isub(M)),L.iushrn(1),A.iushrn(1);for(var he=0,Je=1;(z.words[0]&Je)===0&&he<26;++he,Je<<=1);if(he>0)for(z.iushrn(he);he-- >0;)(D.isOdd()||q.isOdd())&&(D.iadd(c),q.isub(M)),D.iushrn(1),q.iushrn(1);d.cmp(z)>=0?(d.isub(z),L.isub(D),A.isub(q)):(z.isub(d),D.isub(L),q.isub(A))}return{a:D,b:q,gcd:z.iushln(g)}},i.prototype._invmp=function(s){n(s.negative===0),n(!s.isZero());var d=this,z=s.clone();d.negative!==0?d=d.umod(s):d=d.clone();for(var L=new i(1),A=new i(0),D=z.clone();d.cmpn(1)>0&&z.cmpn(1)>0;){for(var q=0,g=1;(d.words[0]&g)===0&&q<26;++q,g<<=1);if(q>0)for(d.iushrn(q);q-- >0;)L.isOdd()&&L.iadd(D),L.iushrn(1);for(var c=0,M=1;(z.words[0]&M)===0&&c<26;++c,M<<=1);if(c>0)for(z.iushrn(c);c-- >0;)A.isOdd()&&A.iadd(D),A.iushrn(1);d.cmp(z)>=0?(d.isub(z),L.isub(A)):(z.isub(d),A.isub(L))}var Q;return d.cmpn(1)===0?Q=L:Q=A,Q.cmpn(0)<0&&Q.iadd(s),Q},i.prototype.gcd=function(s){if(this.isZero())return s.abs();if(s.isZero())return this.abs();var d=this.clone(),z=s.clone();d.negative=0,z.negative=0;for(var L=0;d.isEven()&&z.isEven();L++)d.iushrn(1),z.iushrn(1);do{for(;d.isEven();)d.iushrn(1);for(;z.isEven();)z.iushrn(1);var A=d.cmp(z);if(A<0){var D=d;d=z,z=D}else if(A===0||z.cmpn(1)===0)break;d.isub(z)}while(!0);return z.iushln(L)},i.prototype.invm=function(s){return this.egcd(s).a.umod(s)},i.prototype.isEven=function(){return(this.words[0]&1)===0},i.prototype.isOdd=function(){return(this.words[0]&1)===1},i.prototype.andln=function(s){return this.words[0]&s},i.prototype.bincn=function(s){n(typeof s=="number");var d=s%26,z=(s-d)/26,L=1<<d;if(this.length<=z)return this._expand(z+1),this.words[z]|=L,this;for(var A=L,D=z;A!==0&&D<this.length;D++){var q=this.words[D]|0;q+=A,A=q>>>26,q&=67108863,this.words[D]=q}return A!==0&&(this.words[D]=A,this.length++),this},i.prototype.isZero=function(){return this.length===1&&this.words[0]===0},i.prototype.cmpn=function(s){var d=s<0;if(this.negative!==0&&!d)return-1;if(this.negative===0&&d)return 1;this._strip();var z;if(this.length>1)z=1;else{d&&(s=-s),n(s<=67108863,"Number is too big");var L=this.words[0]|0;z=L===s?0:L<s?-1:1}return this.negative!==0?-z|0:z},i.prototype.cmp=function(s){if(this.negative!==0&&s.negative===0)return-1;if(this.negative===0&&s.negative!==0)return 1;var d=this.ucmp(s);return this.negative!==0?-d|0:d},i.prototype.ucmp=function(s){if(this.length>s.length)return 1;if(this.length<s.length)return-1;for(var d=0,z=this.length-1;z>=0;z--){var L=this.words[z]|0,A=s.words[z]|0;if(L!==A){L<A?d=-1:L>A&&(d=1);break}}return d},i.prototype.gtn=function(s){return this.cmpn(s)===1},i.prototype.gt=function(s){return this.cmp(s)===1},i.prototype.gten=function(s){return this.cmpn(s)>=0},i.prototype.gte=function(s){return this.cmp(s)>=0},i.prototype.ltn=function(s){return this.cmpn(s)===-1},i.prototype.lt=function(s){return this.cmp(s)===-1},i.prototype.lten=function(s){return this.cmpn(s)<=0},i.prototype.lte=function(s){return this.cmp(s)<=0},i.prototype.eqn=function(s){return this.cmpn(s)===0},i.prototype.eq=function(s){return this.cmp(s)===0},i.red=function(s){return new U(s)},i.prototype.toRed=function(s){return n(!this.red,"Already a number in reduction context"),n(this.negative===0,"red works only with positives"),s.convertTo(this)._forceRed(s)},i.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(s){return this.red=s,this},i.prototype.forceRed=function(s){return n(!this.red,"Already a number in reduction context"),this._forceRed(s)},i.prototype.redAdd=function(s){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,s)},i.prototype.redIAdd=function(s){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,s)},i.prototype.redSub=function(s){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,s)},i.prototype.redISub=function(s){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,s)},i.prototype.redShl=function(s){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,s)},i.prototype.redMul=function(s){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,s),this.red.mul(this,s)},i.prototype.redIMul=function(s){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,s),this.red.imul(this,s)},i.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(s){return n(this.red&&!s.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,s)};var G={k256:null,p224:null,p192:null,p25519:null};function Y(b,s){this.name=b,this.p=new i(s,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}Y.prototype._tmp=function(){var s=new i(null);return s.words=new Array(Math.ceil(this.n/13)),s},Y.prototype.ireduce=function(s){var d=s,z;do this.split(d,this.tmp),d=this.imulK(d),d=d.iadd(this.tmp),z=d.bitLength();while(z>this.n);var L=z<this.n?-1:d.ucmp(this.p);return L===0?(d.words[0]=0,d.length=1):L>0?d.isub(this.p):d.strip!==void 0?d.strip():d._strip(),d},Y.prototype.split=function(s,d){s.iushrn(this.n,0,d)},Y.prototype.imulK=function(s){return s.imul(this.k)};function _(){Y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}o(_,Y),_.prototype.split=function(s,d){for(var z=4194303,L=Math.min(s.length,9),A=0;A<L;A++)d.words[A]=s.words[A];if(d.length=L,s.length<=9){s.words[0]=0,s.length=1;return}var D=s.words[9];for(d.words[d.length++]=D&z,A=10;A<s.length;A++){var q=s.words[A]|0;s.words[A-10]=(q&z)<<4|D>>>22,D=q}D>>>=22,s.words[A-10]=D,D===0&&s.length>10?s.length-=10:s.length-=9},_.prototype.imulK=function(s){s.words[s.length]=0,s.words[s.length+1]=0,s.length+=2;for(var d=0,z=0;z<s.length;z++){var L=s.words[z]|0;d+=L*977,s.words[z]=d&67108863,d=L*64+(d/67108864|0)}return s.words[s.length-1]===0&&(s.length--,s.words[s.length-1]===0&&s.length--),s};function $(){Y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}o($,Y);function ie(){Y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}o(ie,Y);function S(){Y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}o(S,Y),S.prototype.imulK=function(s){for(var d=0,z=0;z<s.length;z++){var L=(s.words[z]|0)*19+d,A=L&67108863;L>>>=26,s.words[z]=A,d=L}return d!==0&&(s.words[s.length++]=d),s},i._prime=function(s){if(G[s])return G[s];var d;if(s==="k256")d=new _;else if(s==="p224")d=new $;else if(s==="p192")d=new ie;else if(s==="p25519")d=new S;else throw new Error("Unknown prime "+s);return G[s]=d,d};function U(b){if(typeof b=="string"){var s=i._prime(b);this.m=s.p,this.prime=s}else n(b.gtn(1),"modulus must be greater than 1"),this.m=b,this.prime=null}U.prototype._verify1=function(s){n(s.negative===0,"red works only with positives"),n(s.red,"red works only with red numbers")},U.prototype._verify2=function(s,d){n((s.negative|d.negative)===0,"red works only with positives"),n(s.red&&s.red===d.red,"red works only with red numbers")},U.prototype.imod=function(s){return this.prime?this.prime.ireduce(s)._forceRed(this):(v(s,s.umod(this.m)._forceRed(this)),s)},U.prototype.neg=function(s){return s.isZero()?s.clone():this.m.sub(s)._forceRed(this)},U.prototype.add=function(s,d){this._verify2(s,d);var z=s.add(d);return z.cmp(this.m)>=0&&z.isub(this.m),z._forceRed(this)},U.prototype.iadd=function(s,d){this._verify2(s,d);var z=s.iadd(d);return z.cmp(this.m)>=0&&z.isub(this.m),z},U.prototype.sub=function(s,d){this._verify2(s,d);var z=s.sub(d);return z.cmpn(0)<0&&z.iadd(this.m),z._forceRed(this)},U.prototype.isub=function(s,d){this._verify2(s,d);var z=s.isub(d);return z.cmpn(0)<0&&z.iadd(this.m),z},U.prototype.shl=function(s,d){return this._verify1(s),this.imod(s.ushln(d))},U.prototype.imul=function(s,d){return this._verify2(s,d),this.imod(s.imul(d))},U.prototype.mul=function(s,d){return this._verify2(s,d),this.imod(s.mul(d))},U.prototype.isqr=function(s){return this.imul(s,s.clone())},U.prototype.sqr=function(s){return this.mul(s,s)},U.prototype.sqrt=function(s){if(s.isZero())return s.clone();var d=this.m.andln(3);if(n(d%2===1),d===3){var z=this.m.add(new i(1)).iushrn(2);return this.pow(s,z)}for(var L=this.m.subn(1),A=0;!L.isZero()&&L.andln(1)===0;)A++,L.iushrn(1);n(!L.isZero());var D=new i(1).toRed(this),q=D.redNeg(),g=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new i(2*c*c).toRed(this);this.pow(c,g).cmp(q)!==0;)c.redIAdd(q);for(var M=this.pow(c,L),Q=this.pow(s,L.addn(1).iushrn(1)),ae=this.pow(s,L),he=A;ae.cmp(D)!==0;){for(var Je=ae,ve=0;Je.cmp(D)!==0;ve++)Je=Je.redSqr();n(ve<he);var Ke=this.pow(M,new i(1).iushln(he-ve-1));Q=Q.redMul(Ke),M=Ke.redSqr(),ae=ae.redMul(M),he=ve}return Q},U.prototype.invm=function(s){var d=s._invmp(this.m);return d.negative!==0?(d.negative=0,this.imod(d).redNeg()):this.imod(d)},U.prototype.pow=function(s,d){if(d.isZero())return new i(1).toRed(this);if(d.cmpn(1)===0)return s.clone();var z=4,L=new Array(1<<z);L[0]=new i(1).toRed(this),L[1]=s;for(var A=2;A<L.length;A++)L[A]=this.mul(L[A-1],s);var D=L[0],q=0,g=0,c=d.bitLength()%26;for(c===0&&(c=26),A=d.length-1;A>=0;A--){for(var M=d.words[A],Q=c-1;Q>=0;Q--){var ae=M>>Q&1;if(D!==L[0]&&(D=this.sqr(D)),ae===0&&q===0){g=0;continue}q<<=1,q|=ae,g++,!(g!==z&&(A!==0||Q!==0))&&(D=this.mul(D,L[q]),g=0,q=0)}c=26}return D},U.prototype.convertTo=function(s){var d=s.umod(this.m);return d===s?d.clone():d},U.prototype.convertFrom=function(s){var d=s.clone();return d.red=null,d},i.mont=function(s){return new Z(s)};function Z(b){U.call(this,b),this.shift=this.m.bitLength(),this.shift%26!==0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}o(Z,U),Z.prototype.convertTo=function(s){return this.imod(s.ushln(this.shift))},Z.prototype.convertFrom=function(s){var d=this.imod(s.mul(this.rinv));return d.red=null,d},Z.prototype.imul=function(s,d){if(s.isZero()||d.isZero())return s.words[0]=0,s.length=1,s;var z=s.imul(d),L=z.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),A=z.isub(L).iushrn(this.shift),D=A;return A.cmp(this.m)>=0?D=A.isub(this.m):A.cmpn(0)<0&&(D=A.iadd(this.m)),D._forceRed(this)},Z.prototype.mul=function(s,d){if(s.isZero()||d.isZero())return new i(0)._forceRed(this);var z=s.mul(d),L=z.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),A=z.isub(L).iushrn(this.shift),D=A;return A.cmp(this.m)>=0?D=A.isub(this.m):A.cmpn(0)<0&&(D=A.iadd(this.m)),D._forceRed(this)},Z.prototype.invm=function(s){var d=this.imod(s._invmp(this.m).mul(this.r2));return d._forceRed(this)}})(e,Ge)})(cf);const Ze=cf.exports;function lf(e){return Ze.isBN(e)}function Gu(e){return!!e&&typeof e=="object"}function hf(...e){return t=>(Gu(t)||fn(t))&&e.every(r=>fn(t[r]))}const df=hf("toBigInt"),xf=hf("toBn");function Yu(e){return typeof e=="bigint"?e:e?Er(e)?Vu(e.toString()):lf(e)?Xt(e.toString()):df(e)?e.toBigInt():xf(e)?Xt(e.toBn().toString()):Xt(e):Xt(0)}const rr=typeof Xt=="function"&&typeof Xt.asIntN=="function",Ku=typeof Buffer<"u";function Ju(e){return Ku&&fn(e&&e.readDoubleLE)&&Buffer.isBuffer(e)}function qr(e){return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}const Qu=new Iu;function pr(e){return e?Qu.encode(e.toString()):new Uint8Array}function Le(e){return qr(e)?e:Er(e)?h0(e):Ju(e)||Array.isArray(e)?new Uint8Array(e):pr(e)}function Wt(...e){const t=new Array(e.length);let r=0;for(let n=0;n<e.length;n++)t[n]=Le(e[n]),r+=t[n].length;return zn(t,r)}function zn(e,t=0){let r=0;if(!t)for(let o=0;o<e.length;o++)t+=e[o].length;const n=new Uint8Array(t);for(let o=0;o<e.length;o++)n.set(e[o],r),r+=e[o].length;return n}function pf(e){const t=e.length;for(let r=0;r<t;r++)if(e[r])return!1;return!0}function Pr(e,t){const r=Le(e),n=Le(t);if(r.length===n.length){const o=new DataView(r.buffer,r.byteOffset),i=new DataView(n.buffer,n.byteOffset),l=r.length%4,f=r.length-l;for(let y=0;y<f;y+=4)if(o.getUint32(y)!==i.getUint32(y))return!1;for(let y=f;y<r.length;y++)if(r[y]!==n[y])return!1;return!0}return!1}function _u(e,t=-1,r=!1){const n=Math.ceil(t/8);if(t===-1||e.length===n)return e;if(e.length>n)return e.subarray(0,n);const o=new Uint8Array(n);return o.set(e,r?0:n-e.length),o}function vf(e){return typeof e=="boolean"}function _n(e,t={}){const{isLe:r=!0,isNegative:n=!1}=vf(t)?{isLe:t}:t,o=e.length;if(o<=6)if(n){let i=0;if(r)switch(o){case 0:return new Ze(0);case 1:i=e[0]^255;break;case 2:i=e[0]+(e[1]<<8)^65535;break;case 3:i=e[0]+(e[1]<<8)+(e[2]<<16)^16777215;break;case 4:i=e[0]+(e[1]<<8)+(e[2]<<16)+e[3]*16777216^4294967295;break;case 5:i=(e[0]+(e[1]<<8)+(e[2]<<16)+e[3]*16777216^4294967295)+(e[4]^255)*4294967296;break;default:i=(e[0]+(e[1]<<8)+(e[2]<<16)+e[3]*16777216^4294967295)+(e[4]+(e[5]<<8)^65535)*4294967296;break}else for(let l=0;l<o;l++)i=i*256+(e[l]^255);return o?new Ze(i*-1-1):new Ze(0)}else if(r)switch(o){case 0:return new Ze(0);case 1:return new Ze(e[0]);case 2:return new Ze(e[0]+(e[1]<<8));case 3:return new Ze(e[0]+(e[1]<<8)+(e[2]<<16));case 4:return new Ze(e[0]+(e[1]<<8)+(e[2]<<16)+e[3]*16777216);case 5:return new Ze(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8))*16777216);default:return new Ze(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8)+(e[5]<<16))*16777216)}else{let i=0;for(let l=0;l<o;l++)i=i*256+e[l];return new Ze(i)}return n?new Ze(e,r?"le":"be").fromTwos(e.length*8):new Ze(e,r?"le":"be")}const ln=new Array(256),yf=new Array(256*256);for(let e=0;e<256;e++)ln[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){const t=e<<8;for(let r=0;r<256;r++)yf[t|r]=ln[e]+ln[r]}function $n(e){const t=e.length%2,r=e.length-t,n=new DataView(e.buffer,e.byteOffset);let o="";for(let i=0;i<r;i+=2)o+=yf[n.getUint16(i)];return t&&(o+=ln[n.getUint8(r)]),o}function X0(e,t=-1,r=!0){const n=Math.ceil(t/8);return`${r?"0x":""}${!e||!e.length?"":t>0&&e.length>n?`${$n(e.subarray(0,n/2))}\u2026${$n(e.subarray(e.length-n/2))}`:$n(e)}`}const $u=new Cu("utf-8");function ps(e){return e?$u.decode(e):""}const ei=Le(`Ethereum Signed Message:
`),F0=Le("<Bytes>"),j0=Le("</Bytes>"),el=F0.length+j0.length;function hn(e,t){return e.length>=el&&Pr(e.subarray(0,F0.length),F0)&&Pr(e.slice(-j0.length),j0)||t&&e.length>=ei.length&&Pr(e.subarray(0,ei.length),ei)}function tl(e){const t=Le(e);return hn(t,!1)?t.subarray(F0.length,t.length-j0.length):t}function rl(e){const t=Le(e);return hn(t,!0)?t:zn([F0,t,j0])}const vs=Xt(256),nl=Xt(255);function il(e,{isLe:t,isNegative:r}){const n=[];for(r&&(e=(e+cn)*-cn);e!==mo;){const o=e%vs,i=Number(r?o^nl:o);t?n.push(i):n.unshift(i),e=(e-o)/vs}return Uint8Array.from(n)}function ol(e,t){const r=V0({bitLength:-1,isLe:!0,isNegative:!1},t),n=Yu(e);if(n===mo)return r.bitLength===-1?new Uint8Array:new Uint8Array(Math.ceil((r.bitLength||0)/8));const o=il(n,r);if(r.bitLength===-1)return o;const i=Math.ceil((r.bitLength||0)/8),l=new Uint8Array(i);return r.isNegative&&l.fill(255),l.set(o,r.isLe?0:i-o.length),l}new Ze(0);const Hn=new Ze(1),kn=new Ze(2);new Ze(3);new Ze(4);new Ze(5);new Ze(6);new Ze(7);new Ze(8);new Ze(9);new Ze(10);new Ze(100);new Ze(1e3);new Ze(1e6);const ys=new Ze(1e9);ys.mul(ys);new Ze(Number.MAX_SAFE_INTEGER);function sl(e){if(!e||e==="0x")return"";if(wo.test(e))return e.substring(2);if(ff.test(e))return e;throw new Error(`Expected hex value to convert, found '${e}'`)}function al(e,t={}){if(!e||e==="0x")return new Ze(0);const{isLe:r=!1,isNegative:n=!1}=vf(t)?{isLe:t}:t,o=sl(e),i=new Ze(o,16,r?"le":"be");return n?i.fromTwos(o.length*4):i}function bf(e){return typeof e=="bigint"}function mf(e){return e?Ze.isBN(e)?e:Er(e)?al(e.toString()):bf(e)?new Ze(e.toString()):xf(e)?e.toBn():df(e)?new Ze(e.toBigInt().toString()):new Ze(e):new Ze(0)}function wf(e){return typeof e=="number"}const fl={bitLength:-1,isLe:!0,isNegative:!1};function ar(e,t=fl,r=!0){const{bitLength:n=-1,isLe:o=!0,isNegative:i=!1}=wf(t)?{bitLength:t,isLe:r}:t,l=mf(e),f=Math.ceil(n===-1?l.bitLength()/8:(n||0)/8);if(!e)return n===-1?new Uint8Array:new Uint8Array(f);const y=new Uint8Array(f),x=i?l.toTwos(f*8):l;return y.set(x.toArray(o?"le":"be",f),0),y}const cl=kn.pow(new Ze(8-2)).isub(Hn),ul=kn.pow(new Ze(16-2)).isub(Hn),ll=kn.pow(new Ze(32-2)).isub(Hn),hl={bitLength:16},dl={bitLength:32};function xl(e){const t=mf(e);if(t.lte(cl))return new Uint8Array([t.toNumber()<<2]);if(t.lte(ul))return ar(t.shln(2).iadd(Hn),hl);if(t.lte(ll))return ar(t.shln(2).iadd(kn),dl);const r=ar(t);let n=r.length;for(;r[n-1]===0;)n--;if(n<4)throw new Error("Invalid length, previous checks match anything less than 2^30");return zn([new Uint8Array([(n-4<<2)+3]),r.subarray(0,n)])}function Po(e){return zn([xl(e.length),e])}function pl(e){return typeof e=="string"||e instanceof String}function gf(e){return l0.crypto.getRandomValues(e)}/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */const xt=BigInt(0),Nt=BigInt(1),Zt=BigInt(2),O0=BigInt(3),vl=BigInt(8),$i=Zt**BigInt(256),Ot={a:xt,b:BigInt(7),P:$i-Zt**BigInt(32)-BigInt(977),n:$i-BigInt("432420386565659656852420866394968145599"),h:Nt,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")};function bs(e){const{a:t,b:r}=Ot,n=ze(e*e),o=ze(n*e);return ze(o+t*e+r)}const J0=Ot.a===xt;class bt{constructor(t,r,n){this.x=t,this.y=r,this.z=n}static fromAffine(t){if(!(t instanceof kt))throw new TypeError("JacobianPoint#fromAffine: expected Point");return new bt(t.x,t.y,Nt)}static toAffineBatch(t){const r=wl(t.map(n=>n.z));return t.map((n,o)=>n.toAffine(r[o]))}static normalizeZ(t){return bt.toAffineBatch(t).map(bt.fromAffine)}equals(t){if(!(t instanceof bt))throw new TypeError("JacobianPoint expected");const{x:r,y:n,z:o}=this,{x:i,y:l,z:f}=t,y=ze(o**Zt),x=ze(f**Zt),v=ze(r*x),m=ze(i*y),w=ze(ze(n*f)*x),E=ze(ze(l*o)*y);return v===m&&w===E}negate(){return new bt(this.x,ze(-this.y),this.z)}double(){const{x:t,y:r,z:n}=this,o=ze(t**Zt),i=ze(r**Zt),l=ze(i**Zt),f=ze(Zt*(ze((t+i)**Zt)-o-l)),y=ze(O0*o),x=ze(y**Zt),v=ze(x-Zt*f),m=ze(y*(f-v)-vl*l),w=ze(Zt*r*n);return new bt(v,m,w)}add(t){if(!(t instanceof bt))throw new TypeError("JacobianPoint expected");const{x:r,y:n,z:o}=this,{x:i,y:l,z:f}=t;if(i===xt||l===xt)return this;if(r===xt||n===xt)return t;const y=ze(o**Zt),x=ze(f**Zt),v=ze(r*x),m=ze(i*y),w=ze(ze(n*f)*x),E=ze(ze(l*o)*y),N=ze(m-v),O=ze(E-w);if(N===xt)return O===xt?this.double():bt.ZERO;const C=ze(N**Zt),V=ze(N*C),j=ze(v*C),X=ze(O**Zt-V-Zt*j),F=ze(O*(j-X)-w*V),G=ze(o*f*N);return new bt(X,F,G)}subtract(t){return this.add(t.negate())}multiplyUnsafe(t){let r=gs(t);bt.BASE;const n=bt.ZERO;if(r===xt)return n;if(r===Nt)return this;if(!J0){let m=n,w=this;for(;r>xt;)r&Nt&&(m=m.add(w)),w=w.double(),r>>=Nt;return m}let{k1neg:o,k1:i,k2neg:l,k2:f}=zs(r),y=n,x=n,v=this;for(;i>xt||f>xt;)i&Nt&&(y=y.add(v)),f&Nt&&(x=x.add(v)),v=v.double(),i>>=Nt,f>>=Nt;return o&&(y=y.negate()),l&&(x=x.negate()),x=new bt(ze(x.x*Ot.beta),x.y,x.z),y.add(x)}precomputeWindow(t){const r=J0?128/t+1:256/t+1,n=[];let o=this,i=o;for(let l=0;l<r;l++){i=o,n.push(i);for(let f=1;f<2**(t-1);f++)i=i.add(o),n.push(i);o=i.double()}return n}wNAF(t,r){!r&&this.equals(bt.BASE)&&(r=kt.BASE);const n=r&&r._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let o=r&&eo.get(r);o||(o=this.precomputeWindow(n),r&&n!==1&&(o=bt.normalizeZ(o),eo.set(r,o)));let i=bt.ZERO,l=bt.ZERO;const f=1+(J0?128/n:256/n),y=2**(n-1),x=BigInt(2**n-1),v=2**n,m=BigInt(n);for(let w=0;w<f;w++){const E=w*y;let N=Number(t&x);if(t>>=m,N>y&&(N-=v,t+=Nt),N===0){let O=o[E];w%2&&(O=O.negate()),l=l.add(O)}else{let O=o[E+Math.abs(N)-1];N<0&&(O=O.negate()),i=i.add(O)}}return{p:i,f:l}}multiply(t,r){let n=gs(t),o,i;if(J0){const{k1neg:l,k1:f,k2neg:y,k2:x}=zs(n);let{p:v,f:m}=this.wNAF(f,r),{p:w,f:E}=this.wNAF(x,r);l&&(v=v.negate()),y&&(w=w.negate()),w=new bt(ze(w.x*Ot.beta),w.y,w.z),o=v.add(w),i=m.add(E)}else{const{p:l,f}=this.wNAF(n,r);o=l,i=f}return bt.normalizeZ([o,i])[0]}toAffine(t=W0(this.z)){const{x:r,y:n,z:o}=this,i=t,l=ze(i*i),f=ze(l*i),y=ze(r*l),x=ze(n*f);if(ze(o*i)!==Nt)throw new Error("invZ was invalid");return new kt(y,x)}}bt.BASE=new bt(Ot.Gx,Ot.Gy,Nt);bt.ZERO=new bt(xt,Nt,xt);const eo=new WeakMap;class kt{constructor(t,r){this.x=t,this.y=r}_setWindowSize(t){this._WINDOW_SIZE=t,eo.delete(this)}static fromCompressedHex(t){const r=t.length===32,n=xr(r?t:t.subarray(1));if(!ri(n))throw new Error("Point is not on curve");const o=bs(n);let i=ml(o);const l=(i&Nt)===Nt;r?l&&(i=ze(-i)):(t[0]&1)===1!==l&&(i=ze(-i));const f=new kt(n,i);return f.assertValidity(),f}static fromUncompressedHex(t){const r=xr(t.subarray(1,33)),n=xr(t.subarray(33,65)),o=new kt(r,n);return o.assertValidity(),o}static fromHex(t){const r=Zr(t),n=r.length,o=r[0];if(n===32||n===33&&(o===2||o===3))return this.fromCompressedHex(r);if(n===65&&o===4)return this.fromUncompressedHex(r);throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${n}`)}static fromPrivateKey(t){return kt.BASE.multiply(A0(t))}static fromSignature(t,r,n){t=Zr(t);const o=gl(t),{r:i,s:l}=Hl(r);if(n!==0&&n!==1)throw new Error("Cannot recover signature: invalid recovery bit");if(o===xt)throw new Error("Cannot recover signature: msgHash cannot be 0");const f=n&1?"03":"02",y=kt.fromHex(f+$r(i)),{n:x}=Ot,v=W0(i,x),m=ze(-o*v,x),w=ze(l*v,x),E=kt.BASE.multiplyAndAddUnsafe(y,m,w);if(!E)throw new Error("Cannot recover signature: point at infinify");return E.assertValidity(),E}toRawBytes(t=!1){return Dr(this.toHex(t))}toHex(t=!1){const r=$r(this.x);return t?`${this.y&Nt?"03":"02"}${r}`:`04${r}${$r(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const t="Point is not on elliptic curve",{x:r,y:n}=this;if(!ri(r)||!ri(n))throw new Error(t);const o=ze(n*n),i=bs(r);if(ze(o-i)!==xt)throw new Error(t)}equals(t){return this.x===t.x&&this.y===t.y}negate(){return new kt(this.x,ze(-this.y))}double(){return bt.fromAffine(this).double().toAffine()}add(t){return bt.fromAffine(this).add(bt.fromAffine(t)).toAffine()}subtract(t){return this.add(t.negate())}multiply(t){return bt.fromAffine(this).multiply(t,this).toAffine()}multiplyAndAddUnsafe(t,r,n){const o=bt.fromAffine(this),i=r===xt||r===Nt||this!==kt.BASE?o.multiplyUnsafe(r):o.multiply(r),l=bt.fromAffine(t).multiplyUnsafe(n),f=i.add(l);return f.equals(bt.ZERO)?void 0:f.toAffine()}}kt.BASE=new kt(Ot.Gx,Ot.Gy);kt.ZERO=new kt(xt,xt);function ms(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ws(e){if(e.length<2||e[0]!==2)throw new Error(`Invalid signature integer tag: ${b0(e)}`);const t=e[1],r=e.subarray(2,t+2);if(!t||r.length!==t)throw new Error("Invalid signature integer: wrong length");if(r[0]===0&&r[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:xr(r),left:e.subarray(t+2)}}function yl(e){if(e.length<2||e[0]!=48)throw new Error(`Invalid signature tag: ${b0(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:r}=ws(e.subarray(2)),{data:n,left:o}=ws(r);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${b0(o)}`);return{r:t,s:n}}class zr{constructor(t,r){this.r=t,this.s=r,this.assertValidity()}static fromCompact(t){const r=dn(t),n="Signature.fromCompact";if(typeof t!="string"&&!r)throw new TypeError(`${n}: Expected string or Uint8Array`);const o=r?b0(t):t;if(o.length!==128)throw new Error(`${n}: Expected 64-byte hex`);return new zr(xn(o.slice(0,64)),xn(o.slice(64,128)))}static fromDER(t){const r=dn(t);if(typeof t!="string"&&!r)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:o}=yl(r?t:Dr(t));return new zr(n,o)}static fromHex(t){return this.fromDER(t)}assertValidity(){const{r:t,s:r}=this;if(!U0(t))throw new Error("Invalid Signature: r must be 0 < r < n");if(!U0(r))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const t=Ot.n>>Nt;return this.s>t}normalizeS(){return this.hasHighS()?new zr(this.r,Ot.n-this.s):this}toDERRawBytes(t=!1){return Dr(this.toDERHex(t))}toDERHex(t=!1){const r=ms(M0(this.s));if(t)return r;const n=ms(M0(this.r)),o=M0(n.length/2),i=M0(r.length/2);return`30${M0(n.length/2+r.length/2+4)}02${o}${n}02${i}${r}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return Dr(this.toCompactHex())}toCompactHex(){return $r(this.r)+$r(this.s)}}function L0(...e){if(!e.every(dn))throw new Error("Uint8Array list expected");if(e.length===1)return e[0];const t=e.reduce((n,o)=>n+o.length,0),r=new Uint8Array(t);for(let n=0,o=0;n<e.length;n++){const i=e[n];r.set(i,o),o+=i.length}return r}function dn(e){return e instanceof Uint8Array}const bl=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));function b0(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let r=0;r<e.length;r++)t+=bl[e[r]];return t}function $r(e){if(e>$i)throw new Error("Expected number < 2^256");return e.toString(16).padStart(64,"0")}function ti(e){return Dr($r(e))}function M0(e){const t=e.toString(16);return t.length&1?`0${t}`:t}function xn(e){if(typeof e!="string")throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function Dr(e){if(typeof e!="string")throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let r=0;r<t.length;r++){const n=r*2,o=e.slice(n,n+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[r]=i}return t}function xr(e){return xn(b0(e))}function Zr(e){return e instanceof Uint8Array?Uint8Array.from(e):Dr(e)}function gs(e){if(typeof e=="number"&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if(typeof e=="bigint"&&U0(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function ze(e,t=Ot.P){const r=e%t;return r>=xt?r:t+r}function ur(e,t){const{P:r}=Ot;let n=e;for(;t-- >xt;)n*=n,n%=r;return n}function ml(e){const{P:t}=Ot,r=BigInt(6),n=BigInt(11),o=BigInt(22),i=BigInt(23),l=BigInt(44),f=BigInt(88),y=e*e*e%t,x=y*y*e%t,v=ur(x,O0)*x%t,m=ur(v,O0)*x%t,w=ur(m,Zt)*y%t,E=ur(w,n)*w%t,N=ur(E,o)*E%t,O=ur(N,l)*N%t,C=ur(O,f)*O%t,V=ur(C,l)*N%t,j=ur(V,O0)*x%t,X=ur(j,i)*E%t,F=ur(X,r)*y%t;return ur(F,Zt)}function W0(e,t=Ot.P){if(e===xt||t<=xt)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let r=ze(e,t),n=t,o=xt,i=Nt;for(;r!==xt;){const f=n/r,y=n%r,x=o-i*f;n=r,r=y,o=i,i=x}if(n!==Nt)throw new Error("invert: does not exist");return ze(o,t)}function wl(e,t=Ot.P){const r=new Array(e.length),n=e.reduce((i,l,f)=>l===xt?i:(r[f]=i,ze(i*l,t)),Nt),o=W0(n,t);return e.reduceRight((i,l,f)=>l===xt?i:(r[f]=ze(i*r[f],t),ze(i*l,t)),o),r}const Ps=(e,t)=>(e+t/Zt)/t,Q0=Zt**BigInt(128);function zs(e){const{n:t}=Ot,r=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),n=-Nt*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=r,l=Ps(i*e,t),f=Ps(-n*e,t);let y=ze(e-l*r-f*o,t),x=ze(-l*n-f*i,t);const v=y>Q0,m=x>Q0;if(v&&(y=t-y),m&&(x=t-x),y>Q0||x>Q0)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:v,k1:y,k2neg:m,k2:x}}function gl(e){const{n:t}=Ot,n=e.length*8-256;let o=xr(e);return n>0&&(o=o>>BigInt(n)),o>=t&&(o-=t),o}class Pl{constructor(){this.v=new Uint8Array(32).fill(1),this.k=new Uint8Array(32).fill(0),this.counter=0}hmac(...t){return c0.hmacSha256(this.k,...t)}hmacSync(...t){throw new Error("utils.hmacSha256Sync is undefined, you need to set it")}incr(){if(this.counter>=1e3)throw new Error("Tried 1,000 k values for sign(), all were invalid");this.counter+=1}async reseed(t=new Uint8Array){this.k=await this.hmac(this.v,Uint8Array.from([0]),t),this.v=await this.hmac(this.v),t.length!==0&&(this.k=await this.hmac(this.v,Uint8Array.from([1]),t),this.v=await this.hmac(this.v))}reseedSync(t=new Uint8Array){this.k=this.hmacSync(this.v,Uint8Array.from([0]),t),this.v=this.hmacSync(this.v),t.length!==0&&(this.k=this.hmacSync(this.v,Uint8Array.from([1]),t),this.v=this.hmacSync(this.v))}async generate(){return this.incr(),this.v=await this.hmac(this.v),this.v}generateSync(){return this.incr(),this.v=this.hmacSync(this.v),this.v}}function U0(e){return xt<e&&e<Ot.n}function ri(e){return xt<e&&e<Ot.P}function zl(e,t,r){const n=xr(e);if(!U0(n))return;const{n:o}=Ot,i=kt.BASE.multiply(n),l=ze(i.x,o);if(l===xt)return;const f=ze(W0(n,o)*ze(t+r*l,o),o);if(f===xt)return;const y=new zr(l,f),x=(i.x===y.r?0:2)|Number(i.y&Nt);return{sig:y,recovery:x}}function A0(e){let t;if(typeof e=="bigint")t=e;else if(typeof e=="number"&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if(typeof e=="string"){if(e.length!==64)throw new Error("Expected 32 bytes of private key");t=xn(e)}else if(dn(e)){if(e.length!==32)throw new Error("Expected 32 bytes of private key");t=xr(e)}else throw new TypeError("Expected valid private key");if(!U0(t))throw new Error("Expected private key: 0 < key < n");return t}function Hl(e){if(e instanceof zr)return e.assertValidity(),e;try{return zr.fromDER(e)}catch{return zr.fromCompact(e)}}function kl(e,t=!1){return kt.fromPrivateKey(e).toRawBytes(t)}function Ml(e,t,r,n=!1){return kt.fromSignature(e,t,r).toRawBytes(n)}function Pf(e){const t=e.length>32?e.slice(0,32):e;return xr(t)}function El(e){const t=Pf(e),r=ze(t,Ot.n);return zf(r<xt?t:r)}function zf(e){if(typeof e!="bigint")throw new Error("Expected bigint");const t=$r(e);return Dr(t)}function Bl(e,t,r){if(e==null)throw new Error(`sign: expected valid message hash, not "${e}"`);const n=Zr(e),o=A0(t),i=[zf(o),El(n)];if(r!=null){r===!0&&(r=c0.randomBytes(32));const y=Zr(r);if(y.length!==32)throw new Error("sign: Expected 32 bytes of extra data");i.push(y)}const l=L0(...i),f=Pf(n);return{seed:l,m:f,d:o}}function Nl(e,t){let{sig:r,recovery:n}=e;const{canonical:o,der:i,recovered:l}=Object.assign({canonical:!0,der:!0},t);o&&r.hasHighS()&&(r=r.normalizeS(),n^=1);const f=i?r.toDERRawBytes():r.toCompactRawBytes();return l?[f,n]:f}function Tl(e,t,r={}){const{seed:n,m:o,d:i}=Bl(e,t,r.extraEntropy);let l;const f=new Pl;for(f.reseedSync(n);!(l=zl(f.generateSync(),o,i));)f.reseedSync();return Nl(l,r)}kt.BASE._setWindowSize(8);const or={node:uf,web:typeof self=="object"&&"crypto"in self?self.crypto:void 0},Hs={},c0={isValidPrivateKey(e){try{return A0(e),!0}catch{return!1}},privateAdd:(e,t)=>{const r=A0(e),n=xr(Zr(t));return ti(ze(r+n,Ot.n))},privateNegate:e=>{const t=A0(e);return ti(Ot.n-t)},pointAddScalar:(e,t,r)=>{const n=kt.fromHex(e),o=xr(Zr(t)),i=kt.BASE.multiplyAndAddUnsafe(n,o,Nt);if(!i)throw new Error("Tweaked point at infinity");return i.toRawBytes(r)},pointMultiply:(e,t,r)=>{const n=kt.fromHex(e),o=xr(Zr(t));return n.multiply(o).toRawBytes(r)},hashToPrivateKey:e=>{if(e=Zr(e),e.length<40||e.length>1024)throw new Error("Expected 40-1024 bytes of private key as per FIPS 186");const t=ze(xr(e),Ot.n-Nt)+Nt;return ti(t)},randomBytes:(e=32)=>{if(or.web)return or.web.getRandomValues(new Uint8Array(e));if(or.node){const{randomBytes:t}=or.node;return Uint8Array.from(t(e))}else throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>c0.hashToPrivateKey(c0.randomBytes(40)),bytesToHex:b0,hexToBytes:Dr,concatBytes:L0,mod:ze,invert:W0,sha256:async(...e)=>{if(or.web){const t=await or.web.subtle.digest("SHA-256",L0(...e));return new Uint8Array(t)}else if(or.node){const{createHash:t}=or.node,r=t("sha256");return e.forEach(n=>r.update(n)),Uint8Array.from(r.digest())}else throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(or.web){const r=await or.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),n=L0(...t),o=await or.web.subtle.sign("HMAC",r,n);return new Uint8Array(o)}else if(or.node){const{createHmac:r}=or.node,n=r("sha256",e);return t.forEach(o=>n.update(o)),Uint8Array.from(n.digest())}else throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let r=Hs[e];if(r===void 0){const n=await c0.sha256(Uint8Array.from(e,o=>o.charCodeAt(0)));r=L0(n,n),Hs[e]=r}return c0.sha256(r,...t)},taggedHashSync:(e,...t)=>{throw new Error("utils.sha256Sync is undefined, you need to set it")},precompute(e=8,t=kt.BASE){const r=t===kt.BASE?t:new kt(t.x,t.y);return r._setWindowSize(e),r.multiply(O0),r}},nn={getRandomValues:gf},Ll={crypto:nn};var hr;class Ol{constructor(t){Vt(this,hr,void 0);nr(this,"abort",()=>{throw new Error("abort")});nr(this,"__wbindgen_is_undefined",t=>Ee(this,hr).getObject(t)===void 0);nr(this,"__wbindgen_throw",(t,r)=>{throw new Error(Ee(this,hr).getString(t,r))});nr(this,"__wbg_self_1b7a39e3a92c949c",()=>Ee(this,hr).addObject(Ll));nr(this,"__wbg_require_604837428532a733",(t,r)=>{throw new Error(`Unable to require ${Ee(this,hr).getString(t,r)}`)});nr(this,"__wbg_crypto_968f1772287e2df0",t=>Ee(this,hr).addObject(nn));nr(this,"__wbg_getRandomValues_a3d34b4fee3c2869",t=>Ee(this,hr).addObject(nn.getRandomValues));nr(this,"__wbg_getRandomValues_f5e14ab7ac8e995d",(t,r,n)=>{nn.getRandomValues(Ee(this,hr).getU8a(r,n))});nr(this,"__wbg_randomFillSync_d5bd2d655fdf256a",(t,r,n)=>{throw new Error("randomFillsync is not available")});nr(this,"__wbindgen_object_drop_ref",t=>{Ee(this,hr).takeObject(t)});Bt(this,hr,t)}}hr=new WeakMap;var Ur,Rr,C0,dr,Mr,sr,x0,Kr,D0,p0;class Al{constructor(t){Vt(this,Ur,void 0);Vt(this,Rr,void 0);Vt(this,C0,void 0);Vt(this,dr,void 0);Vt(this,Mr,void 0);Vt(this,sr,void 0);Vt(this,x0,void 0);Vt(this,Kr,void 0);Vt(this,D0,void 0);Vt(this,p0,void 0);Bt(this,C0,t),Bt(this,Ur,null),Bt(this,Rr,null),Bt(this,dr,new Array(32).fill(void 0).concat(void 0,null,!0,!1)),Bt(this,Mr,Ee(this,dr).length),Bt(this,p0,"none"),Bt(this,sr,null),Bt(this,x0,null),Bt(this,Kr,null),Bt(this,D0,{...new Ol(this)})}get error(){return Ee(this,x0)}get type(){return Ee(this,p0)}get wasm(){return Ee(this,sr)}async init(t){(!Ee(this,Kr)||t)&&Bt(this,Kr,(t||Ee(this,C0))(Ee(this,D0)));const{error:r,type:n,wasm:o}=await Ee(this,Kr);return Bt(this,p0,n),Bt(this,sr,o),Bt(this,x0,r),Ee(this,sr)}getObject(t){return Ee(this,dr)[t]}dropObject(t){t<36||(Ee(this,dr)[t]=Ee(this,Mr),Bt(this,Mr,t))}takeObject(t){const r=this.getObject(t);return this.dropObject(t),r}addObject(t){Ee(this,Mr)===Ee(this,dr).length&&Ee(this,dr).push(Ee(this,dr).length+1);const r=Ee(this,Mr);return Bt(this,Mr,Ee(this,dr)[r]),Ee(this,dr)[r]=t,r}getInt32(){return(Ee(this,Ur)===null||Ee(this,Ur).buffer!==Ee(this,sr).memory.buffer)&&Bt(this,Ur,new Int32Array(Ee(this,sr).memory.buffer)),Ee(this,Ur)}getUint8(){return(Ee(this,Rr)===null||Ee(this,Rr).buffer!==Ee(this,sr).memory.buffer)&&Bt(this,Rr,new Uint8Array(Ee(this,sr).memory.buffer)),Ee(this,Rr)}getU8a(t,r){return this.getUint8().subarray(t/1,t/1+r)}getString(t,r){return ps(this.getU8a(t,r))}allocU8a(t){const r=Ee(this,sr).__wbindgen_malloc(t.length*1);return this.getUint8().set(t,r/1),[r,t.length]}allocString(t){return this.allocU8a(pr(t))}resultU8a(){const t=this.getInt32()[2],r=this.getInt32()[8/4+1],n=this.getU8a(t,r).slice();return Ee(this,sr).__wbindgen_free(t,r*1),n}resultString(){return ps(this.resultU8a())}}Ur=new WeakMap,Rr=new WeakMap,C0=new WeakMap,dr=new WeakMap,Mr=new WeakMap,sr=new WeakMap,x0=new WeakMap,Kr=new WeakMap,D0=new WeakMap,p0=new WeakMap;function Sl(e,t,r){return async n=>{const o={error:null,type:"none",wasm:null};try{if(!t||!t.length)throw new Error("No WebAssembly provided for initialization");if(typeof WebAssembly!="object"||typeof WebAssembly.instantiate!="function")throw new Error("WebAssembly is not available in your environment");const i=await WebAssembly.instantiate(t,{wbg:n});o.wasm=i.instance.exports,o.type="wasm"}catch(i){typeof r=="function"?(o.wasm=r(n),o.type="asm"):(o.error=`FATAL: Unable to initialize @polkadot/wasm-${e}:: ${i.message}`,console.error(o.error))}return o}}const ks="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Hf=new Array(256);for(let e=0;e<ks.length;e++)Hf[ks.charCodeAt(e)]=e;function Xl(e,t){const r=t.length;let n=0,o=0,i=-1;for(let l=0;i<r;l++)n=n<<6|Hf[e.charCodeAt(l)],(o+=6)>=8&&(t[++i]=n>>>(o-=8)&255);return t}const gr=Uint8Array,Cr=Uint16Array,to=Uint32Array,Fl=new gr([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),kf=new gr([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Mf=new gr([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Ef=(e,t)=>{const r=new Cr(31);for(let o=0;o<31;++o)r[o]=t+=1<<e[o-1];const n=new to(r[30]);for(let o=1;o<30;++o)for(let i=r[o];i<r[o+1];++i)n[i]=i-r[o]<<5|o;return[r,n]},[Bf,jl]=Ef(kf,2);Bf[28]=258,jl[258]=28;const[Ul]=Ef(Mf,0),ro=new Cr(32768);for(let e=0;e<32768;++e){let t=(e&43690)>>>1|(e&21845)<<1;t=(t&52428)>>>2|(t&13107)<<2,t=(t&61680)>>>4|(t&3855)<<4,ro[e]=((t&65280)>>>8|(t&255)<<8)>>>1}const S0=(e,t,r)=>{const n=e.length;let o=0;const i=new Cr(t);for(;o<n;++o)++i[e[o]-1];const l=new Cr(t);for(o=0;o<t;++o)l[o]=l[o-1]+i[o-1]<<1;let f;if(r){f=new Cr(1<<t);const y=15-t;for(o=0;o<n;++o)if(e[o]){const x=o<<4|e[o],v=t-e[o];let m=l[e[o]-1]++<<v;for(const w=m|(1<<v)-1;m<=w;++m)f[ro[m]>>>y]=x}}else for(f=new Cr(n),o=0;o<n;++o)f[o]=ro[l[e[o]-1]++]>>>15-e[o];return f},G0=new gr(288);for(let e=0;e<144;++e)G0[e]=8;for(let e=144;e<256;++e)G0[e]=9;for(let e=256;e<280;++e)G0[e]=7;for(let e=280;e<288;++e)G0[e]=8;const Nf=new gr(32);for(let e=0;e<32;++e)Nf[e]=5;const Rl=S0(G0,9,1),Zl=S0(Nf,5,1),vr=(e,t,r)=>{const n=t>>>3;return(e[n]|e[n+1]<<8)>>>(t&7)&r},ni=(e,t)=>{const r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(t&7)},Cl=e=>(e>>>3)+(e&7&&1),Dl=(e,t,r)=>{(t==null||t<0)&&(t=0),(r==null||r>e.length)&&(r=e.length);const n=new(e instanceof Cr?Cr:e instanceof to?to:gr)(r-t);return n.set(e.subarray(t,r)),n},ii=e=>{let t=e[0];for(let r=1;r<e.length;++r)e[r]>t&&(t=e[r]);return t},Il=(e,t,r)=>{const n=!r||r.i;r||(r={});const o=e.length,i=!t||!n;t||(t=new gr(o*3));const l=O=>{let C=t.length;if(O>C){const V=new gr(Math.max(C<<1,O));V.set(t),t=V}};let f=r.f||0,y=r.p||0,x=r.b||0,v=r.l,m=r.d,w=r.m,E=r.n;if(f&&!v)return t;const N=o<<3;do{if(!v){r.f=f=vr(e,y,1);const j=vr(e,y+1,3);if(y+=3,j)if(j==1)v=Rl,m=Zl,w=9,E=5;else if(j==2){const X=vr(e,y,31)+257,F=vr(e,y+10,15)+4,G=X+vr(e,y+5,31)+1;y+=14;const Y=new gr(G),_=new gr(19);for(let b=0;b<F;++b)_[Fl[b]]=vr(e,y+b*3,7);y+=F*3;const $=ii(_),ie=(1<<$)-1;if(!n&&y+G*($+7)>N)break;const S=S0(_,$,1);for(let b=0;b<G;){const s=S[vr(e,y,ie)];y+=s&15;const d=s>>>4;if(d<16)Y[b++]=d;else{let z=0,L=0;for(d==16?(L=3+vr(e,y,3),y+=2,z=Y[b-1]):d==17?(L=3+vr(e,y,7),y+=3):d==18&&(L=11+vr(e,y,127),y+=7);L--;)Y[b++]=z}}const U=Y.subarray(0,X),Z=Y.subarray(X);w=ii(U),E=ii(Z),v=S0(U,w,1),m=S0(Z,E,1)}else throw"invalid block type";else{const X=Cl(y)+4,F=e[X-4]|e[X-3]<<8,G=X+F;if(G>o){if(n)throw"unexpected EOF";break}i&&l(x+F),t.set(e.subarray(X,G),x),r.b=x+=F,r.p=y=G<<3;continue}if(y>N)throw"unexpected EOF"}i&&l(x+131072);const O=(1<<w)-1,C=(1<<E)-1,V=w+E+18;for(;n||y+V<N;){const j=v[ni(e,y)&O],X=j>>>4;if(y+=j&15,y>N)throw"unexpected EOF";if(!j)throw"invalid length/literal";if(X<256)t[x++]=X;else if(X==256){v=void 0;break}else{let F=X-254;if(X>264){const ie=X-257,S=kf[ie];F=vr(e,y,(1<<S)-1)+Bf[ie],y+=S}const G=m[ni(e,y)&C],Y=G>>>4;if(!G)throw"invalid distance";y+=G&15;let _=Ul[Y];if(Y>3){const ie=Mf[Y];_+=ni(e,y)&(1<<ie)-1,y+=ie}if(y>N)throw"unexpected EOF";i&&l(x+131072);const $=x+F;for(;x<$;x+=4)t[x]=t[x-_],t[x+1]=t[x+1-_],t[x+2]=t[x+2-_],t[x+3]=t[x+3-_];x=$}}r.l=v,r.p=y,r.b=x,v&&(f=1,r.m=w,r.d=m,r.n=E)}while(!f);return x==t.length?t:Dl(t,0,x)},ql=e=>{if((e[0]&15)!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(e[1]&32)throw"invalid zlib data: preset dictionaries not supported"};function Vl(e,t){return Il((ql(e),e.subarray(2,-4)),t)}const Wl=171116,Gl=339508,Yl="";var oi={bytes:Yl,lenIn:Wl,lenOut:Gl};const Kl=Vl(Xl(oi.bytes,new Uint8Array(oi.lenIn)),new Uint8Array(oi.lenOut)),Jl=Sl("crypto",Kl,null),xe=new Al(Jl);async function Ql(e){return xe.init(e)}function Ht(e){return(...t)=>{if(!xe.wasm)throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(xe.wasm,...t)}}const _l=Ht((e,t)=>(e.ext_bip39_to_entropy(8,...xe.allocString(t)),xe.resultU8a())),$l=Ht((e,t,r)=>(e.ext_bip39_to_mini_secret(8,...xe.allocString(t),...xe.allocString(r)),xe.resultU8a())),eh=Ht((e,t,r)=>(e.ext_bip39_to_seed(8,...xe.allocString(t),...xe.allocString(r)),xe.resultU8a())),th=Ht((e,t)=>e.ext_bip39_validate(...xe.allocString(t))!==0),rh=Ht((e,t)=>(e.ext_ed_from_seed(8,...xe.allocU8a(t)),xe.resultU8a())),nh=Ht((e,t,r,n)=>(e.ext_ed_sign(8,...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n)),xe.resultU8a())),ih=Ht((e,t,r,n)=>e.ext_ed_verify(...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n))!==0),oh=Ht((e,t)=>(e.ext_secp_from_seed(8,...xe.allocU8a(t)),xe.resultU8a())),sh=Ht((e,t)=>(e.ext_secp_pub_compress(8,...xe.allocU8a(t)),xe.resultU8a())),ah=Ht((e,t)=>(e.ext_secp_pub_expand(8,...xe.allocU8a(t)),xe.resultU8a())),fh=Ht((e,t,r,n)=>(e.ext_secp_recover(8,...xe.allocU8a(t),...xe.allocU8a(r),n),xe.resultU8a())),ch=Ht((e,t,r)=>(e.ext_secp_sign(8,...xe.allocU8a(t),...xe.allocU8a(r)),xe.resultU8a())),uh=Ht((e,t,r)=>(e.ext_sr_derive_keypair_hard(8,...xe.allocU8a(t),...xe.allocU8a(r)),xe.resultU8a())),lh=Ht((e,t,r)=>(e.ext_sr_derive_keypair_soft(8,...xe.allocU8a(t),...xe.allocU8a(r)),xe.resultU8a())),hh=Ht((e,t)=>(e.ext_sr_from_seed(8,...xe.allocU8a(t)),xe.resultU8a())),dh=Ht((e,t,r,n)=>(e.ext_sr_sign(8,...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n)),xe.resultU8a())),xh=Ht((e,t,r,n)=>e.ext_sr_verify(...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n))!==0),ph=Ht((e,t,r,n,o)=>(e.ext_vrf_sign(8,...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n),...xe.allocU8a(o)),xe.resultU8a())),vh=Ht((e,t,r,n,o,i)=>e.ext_vrf_verify(...xe.allocU8a(t),...xe.allocU8a(r),...xe.allocU8a(n),...xe.allocU8a(o),...xe.allocU8a(i))!==0),yh=Ht((e,t,r,n)=>(e.ext_blake2b(8,...xe.allocU8a(t),...xe.allocU8a(r),n),xe.resultU8a())),bh=Ht((e,t,r)=>(e.ext_hmac_sha256(8,...xe.allocU8a(t),...xe.allocU8a(r)),xe.resultU8a())),mh=Ht((e,t,r)=>(e.ext_hmac_sha512(8,...xe.allocU8a(t),...xe.allocU8a(r)),xe.resultU8a())),wh=Ht((e,t)=>(e.ext_keccak256(8,...xe.allocU8a(t)),xe.resultU8a())),gh=Ht((e,t)=>(e.ext_keccak512(8,...xe.allocU8a(t)),xe.resultU8a())),Ph=Ht((e,t,r,n)=>(e.ext_pbkdf2(8,...xe.allocU8a(t),...xe.allocU8a(r),n),xe.resultU8a())),zh=Ht((e,t,r,n,o,i)=>(e.ext_scrypt(8,...xe.allocU8a(t),...xe.allocU8a(r),n,o,i),xe.resultU8a())),Hh=Ht((e,t)=>(e.ext_sha256(8,...xe.allocU8a(t)),xe.resultU8a())),kh=Ht((e,t)=>(e.ext_sha512(8,...xe.allocU8a(t)),xe.resultU8a()));function Kt(){return!!xe.wasm}async function Mh(){try{return!!await Ql()}catch{return!1}}function no(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function Eh(e){if(typeof e!="boolean")throw new Error(`Expected boolean, not ${e}`)}function Tf(e,...t){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function Bh(e){if(typeof e!="function"||typeof e.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");no(e.outputLen),no(e.blockLen)}function Nh(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function Th(e,t){Tf(e);const r=t.outputLen;if(e.length<r)throw new Error(`digestInto() expects output buffer of length at least ${r}`)}const Pt={number:no,bool:Eh,bytes:Tf,hash:Bh,exists:Nh,output:Th};/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const Ir=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),on=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),br=(e,t)=>e<<32-t|e>>>t,Lh=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;if(!Lh)throw new Error("Non little-endian hardware is not supported");Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));function Oh(e){if(typeof e!="string")throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);return new TextEncoder().encode(e)}function yr(e){if(typeof e=="string"&&(e=Oh(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}class R0{clone(){return this._cloneInto()}}const Ah=e=>Object.prototype.toString.call(e)==="[object Object]"&&e.constructor===Object;function Lf(e,t){if(t!==void 0&&(typeof t!="object"||!Ah(t)))throw new TypeError("Options should be object or undefined");return Object.assign(e,t)}function Y0(e){const t=n=>e().update(yr(n)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t}function Of(e){const t=(n,o)=>e(o).update(yr(n)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=n=>e(n),t}class Af extends R0{constructor(t,r){super(),this.finished=!1,this.destroyed=!1,Pt.hash(t);const n=yr(r);if(this.iHash=t.create(),!(this.iHash instanceof R0))throw new TypeError("Expected instance of class which extends utils.Hash");const o=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const i=new Uint8Array(o);i.set(n.length>this.iHash.blockLen?t.create().update(n).digest():n);for(let l=0;l<i.length;l++)i[l]^=54;this.iHash.update(i),this.oHash=t.create();for(let l=0;l<i.length;l++)i[l]^=106;this.oHash.update(i),i.fill(0)}update(t){return Pt.exists(this),this.iHash.update(t),this}digestInto(t){Pt.exists(this),Pt.bytes(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:r,iHash:n,finished:o,destroyed:i,blockLen:l,outputLen:f}=this;return t=t,t.finished=o,t.destroyed=i,t.blockLen=l,t.outputLen=f,t.oHash=r._cloneInto(t.oHash),t.iHash=n._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const zo=(e,t,r)=>new Af(e,t).update(r).digest();zo.create=(e,t)=>new Af(e,t);function Sh(e,t,r,n){if(typeof e.setBigUint64=="function")return e.setBigUint64(t,r,n);const o=BigInt(32),i=BigInt(4294967295),l=Number(r>>o&i),f=Number(r&i),y=n?4:0,x=n?0:4;e.setUint32(t+y,l,n),e.setUint32(t+x,f,n)}class Sf extends R0{constructor(t,r,n,o){super(),this.blockLen=t,this.outputLen=r,this.padOffset=n,this.isLE=o,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=on(this.buffer)}update(t){Pt.exists(this);const{view:r,buffer:n,blockLen:o}=this;t=yr(t);const i=t.length;for(let l=0;l<i;){const f=Math.min(o-this.pos,i-l);if(f===o){const y=on(t);for(;o<=i-l;l+=o)this.process(y,l);continue}n.set(t.subarray(l,l+f),this.pos),this.pos+=f,l+=f,this.pos===o&&(this.process(r,0),this.pos=0)}return this.length+=t.length,this.roundClean(),this}digestInto(t){Pt.exists(this),Pt.output(t,this),this.finished=!0;const{buffer:r,view:n,blockLen:o,isLE:i}=this;let{pos:l}=this;r[l++]=128,this.buffer.subarray(l).fill(0),this.padOffset>o-l&&(this.process(n,0),l=0);for(let y=l;y<o;y++)r[y]=0;Sh(n,o-8,BigInt(this.length*8),i),this.process(n,0);const f=on(t);this.get().forEach((y,x)=>f.setUint32(4*x,y,i))}digest(){const{buffer:t,outputLen:r}=this;this.digestInto(t);const n=t.slice(0,r);return this.destroy(),n}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:r,buffer:n,length:o,finished:i,destroyed:l,pos:f}=this;return t.length=o,t.pos=f,t.finished=i,t.destroyed=l,o%r&&t.buffer.set(n),t}}const Xh=(e,t,r)=>e&t^~e&r,Fh=(e,t,r)=>e&t^e&r^t&r,jh=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Or=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Ar=new Uint32Array(64);class Uh extends Sf{constructor(){super(64,32,8,!1),this.A=Or[0]|0,this.B=Or[1]|0,this.C=Or[2]|0,this.D=Or[3]|0,this.E=Or[4]|0,this.F=Or[5]|0,this.G=Or[6]|0,this.H=Or[7]|0}get(){const{A:t,B:r,C:n,D:o,E:i,F:l,G:f,H:y}=this;return[t,r,n,o,i,l,f,y]}set(t,r,n,o,i,l,f,y){this.A=t|0,this.B=r|0,this.C=n|0,this.D=o|0,this.E=i|0,this.F=l|0,this.G=f|0,this.H=y|0}process(t,r){for(let m=0;m<16;m++,r+=4)Ar[m]=t.getUint32(r,!1);for(let m=16;m<64;m++){const w=Ar[m-15],E=Ar[m-2],N=br(w,7)^br(w,18)^w>>>3,O=br(E,17)^br(E,19)^E>>>10;Ar[m]=O+Ar[m-7]+N+Ar[m-16]|0}let{A:n,B:o,C:i,D:l,E:f,F:y,G:x,H:v}=this;for(let m=0;m<64;m++){const w=br(f,6)^br(f,11)^br(f,25),E=v+w+Xh(f,y,x)+jh[m]+Ar[m]|0,O=(br(n,2)^br(n,13)^br(n,22))+Fh(n,o,i)|0;v=x,x=y,y=f,f=l+E|0,l=i,i=o,o=n,n=E+O|0}n=n+this.A|0,o=o+this.B|0,i=i+this.C|0,l=l+this.D|0,f=f+this.E|0,y=y+this.F|0,x=x+this.G|0,v=v+this.H|0,this.set(n,o,i,l,f,y,x,v)}roundClean(){Ar.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Mn=Y0(()=>new Uh),_0=BigInt(2**32-1),io=BigInt(32);function Xf(e,t=!1){return t?{h:Number(e&_0),l:Number(e>>io&_0)}:{h:Number(e>>io&_0)|0,l:Number(e&_0)|0}}function Rh(e,t=!1){let r=new Uint32Array(e.length),n=new Uint32Array(e.length);for(let o=0;o<e.length;o++){const{h:i,l}=Xf(e[o],t);[r[o],n[o]]=[i,l]}return[r,n]}const Zh=(e,t)=>BigInt(e>>>0)<<io|BigInt(t>>>0),Ch=(e,t,r)=>e>>>r,Dh=(e,t,r)=>e<<32-r|t>>>r,Ih=(e,t,r)=>e>>>r|t<<32-r,qh=(e,t,r)=>e<<32-r|t>>>r,Vh=(e,t,r)=>e<<64-r|t>>>r-32,Wh=(e,t,r)=>e>>>r-32|t<<64-r,Gh=(e,t)=>t,Yh=(e,t)=>e,Kh=(e,t,r)=>e<<r|t>>>32-r,Jh=(e,t,r)=>t<<r|e>>>32-r,Qh=(e,t,r)=>t<<r-32|e>>>64-r,_h=(e,t,r)=>e<<r-32|t>>>64-r;function $h(e,t,r,n){const o=(t>>>0)+(n>>>0);return{h:e+r+(o/2**32|0)|0,l:o|0}}const e1=(e,t,r)=>(e>>>0)+(t>>>0)+(r>>>0),t1=(e,t,r,n)=>t+r+n+(e/2**32|0)|0,r1=(e,t,r,n)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0),n1=(e,t,r,n,o)=>t+r+n+o+(e/2**32|0)|0,i1=(e,t,r,n,o)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0)+(o>>>0),o1=(e,t,r,n,o,i)=>t+r+n+o+i+(e/2**32|0)|0,ke={fromBig:Xf,split:Rh,toBig:Zh,shrSH:Ch,shrSL:Dh,rotrSH:Ih,rotrSL:qh,rotrBH:Vh,rotrBL:Wh,rotr32H:Gh,rotr32L:Yh,rotlSH:Kh,rotlSL:Jh,rotlBH:Qh,rotlBL:_h,add:$h,add3L:e1,add3H:t1,add4L:r1,add4H:n1,add5H:o1,add5L:i1},[s1,a1]=ke.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),Sr=new Uint32Array(80),Xr=new Uint32Array(80);class Ho extends Sf{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:r,Bh:n,Bl:o,Ch:i,Cl:l,Dh:f,Dl:y,Eh:x,El:v,Fh:m,Fl:w,Gh:E,Gl:N,Hh:O,Hl:C}=this;return[t,r,n,o,i,l,f,y,x,v,m,w,E,N,O,C]}set(t,r,n,o,i,l,f,y,x,v,m,w,E,N,O,C){this.Ah=t|0,this.Al=r|0,this.Bh=n|0,this.Bl=o|0,this.Ch=i|0,this.Cl=l|0,this.Dh=f|0,this.Dl=y|0,this.Eh=x|0,this.El=v|0,this.Fh=m|0,this.Fl=w|0,this.Gh=E|0,this.Gl=N|0,this.Hh=O|0,this.Hl=C|0}process(t,r){for(let X=0;X<16;X++,r+=4)Sr[X]=t.getUint32(r),Xr[X]=t.getUint32(r+=4);for(let X=16;X<80;X++){const F=Sr[X-15]|0,G=Xr[X-15]|0,Y=ke.rotrSH(F,G,1)^ke.rotrSH(F,G,8)^ke.shrSH(F,G,7),_=ke.rotrSL(F,G,1)^ke.rotrSL(F,G,8)^ke.shrSL(F,G,7),$=Sr[X-2]|0,ie=Xr[X-2]|0,S=ke.rotrSH($,ie,19)^ke.rotrBH($,ie,61)^ke.shrSH($,ie,6),U=ke.rotrSL($,ie,19)^ke.rotrBL($,ie,61)^ke.shrSL($,ie,6),Z=ke.add4L(_,U,Xr[X-7],Xr[X-16]),b=ke.add4H(Z,Y,S,Sr[X-7],Sr[X-16]);Sr[X]=b|0,Xr[X]=Z|0}let{Ah:n,Al:o,Bh:i,Bl:l,Ch:f,Cl:y,Dh:x,Dl:v,Eh:m,El:w,Fh:E,Fl:N,Gh:O,Gl:C,Hh:V,Hl:j}=this;for(let X=0;X<80;X++){const F=ke.rotrSH(m,w,14)^ke.rotrSH(m,w,18)^ke.rotrBH(m,w,41),G=ke.rotrSL(m,w,14)^ke.rotrSL(m,w,18)^ke.rotrBL(m,w,41),Y=m&E^~m&O,_=w&N^~w&C,$=ke.add5L(j,G,_,a1[X],Xr[X]),ie=ke.add5H($,V,F,Y,s1[X],Sr[X]),S=$|0,U=ke.rotrSH(n,o,28)^ke.rotrBH(n,o,34)^ke.rotrBH(n,o,39),Z=ke.rotrSL(n,o,28)^ke.rotrBL(n,o,34)^ke.rotrBL(n,o,39),b=n&i^n&f^i&f,s=o&l^o&y^l&y;V=O|0,j=C|0,O=E|0,C=N|0,E=m|0,N=w|0,{h:m,l:w}=ke.add(x|0,v|0,ie|0,S|0),x=f|0,v=y|0,f=i|0,y=l|0,i=n|0,l=o|0;const d=ke.add3L(S,Z,s);n=ke.add3H(d,ie,U,b),o=d|0}({h:n,l:o}=ke.add(this.Ah|0,this.Al|0,n|0,o|0)),{h:i,l}=ke.add(this.Bh|0,this.Bl|0,i|0,l|0),{h:f,l:y}=ke.add(this.Ch|0,this.Cl|0,f|0,y|0),{h:x,l:v}=ke.add(this.Dh|0,this.Dl|0,x|0,v|0),{h:m,l:w}=ke.add(this.Eh|0,this.El|0,m|0,w|0),{h:E,l:N}=ke.add(this.Fh|0,this.Fl|0,E|0,N|0),{h:O,l:C}=ke.add(this.Gh|0,this.Gl|0,O|0,C|0),{h:V,l:j}=ke.add(this.Hh|0,this.Hl|0,V|0,j|0),this.set(n,o,i,l,f,y,x,v,m,w,E,N,O,C,V,j)}roundClean(){Sr.fill(0),Xr.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}class f1 extends Ho{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class c1 extends Ho{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}const ko=Y0(()=>new Ho);Y0(()=>new f1);Y0(()=>new c1);const u1={256:Mn,512:ko},l1={256:bh,512:mh};function Ff(e,t,r=256,n){const o=Le(e);return!rr||!n&&Kt()?l1[r](o,t):zo(u1[r],o,t)}/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function z0(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function Br(...e){const t=(o,i)=>l=>o(i(l)),r=Array.from(e).reverse().reduce((o,i)=>o?t(o,i.encode):i.encode,void 0),n=e.reduce((o,i)=>o?t(o,i.decode):i.decode,void 0);return{encode:r,decode:n}}function Nr(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(r=>{if(z0(r),r<0||r>=e.length)throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);return e[r]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(r=>{if(typeof r!="string")throw new Error(`alphabet.decode: not string element=${r}`);const n=e.indexOf(r);if(n===-1)throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);return n})}}}function Tr(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let r of t)if(typeof r!="string")throw new Error(`join.encode: non-string input=${r}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function En(e,t="="){if(z0(e),typeof t!="string")throw new Error("padding chr should be string");return{encode(r){if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("padding.encode input should be array of strings");for(let n of r)if(typeof n!="string")throw new Error(`padding.encode: non-string input=${n}`);for(;r.length*e%8;)r.push(t);return r},decode(r){if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("padding.encode input should be array of strings");for(let o of r)if(typeof o!="string")throw new Error(`padding.decode: non-string input=${o}`);let n=r.length;if(n*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;n>0&&r[n-1]===t;n--)if(!((n-1)*e%8))throw new Error("Invalid padding: string has too much padding");return r.slice(0,n)}}}function jf(e){if(typeof e!="function")throw new Error("normalize fn should be function");return{encode:t=>t,decode:t=>e(t)}}function Ms(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let n=0;const o=[],i=Array.from(e);for(i.forEach(l=>{if(z0(l),l<0||l>=t)throw new Error(`Wrong integer: ${l}`)});;){let l=0,f=!0;for(let y=n;y<i.length;y++){const x=i[y],v=t*l+x;if(!Number.isSafeInteger(v)||t*l/t!==l||v-x!==t*l)throw new Error("convertRadix: carry overflow");if(l=v%r,i[y]=Math.floor(v/r),!Number.isSafeInteger(i[y])||i[y]*r+l!==v)throw new Error("convertRadix: carry overflow");if(f)i[y]?f=!1:n=y;else continue}if(o.push(l),f)break}for(let l=0;l<e.length-1&&e[l]===0;l++)o.push(0);return o.reverse()}const Uf=(e,t)=>t?Uf(t,e%t):e,pn=(e,t)=>e+(t-Uf(e,t));function oo(e,t,r,n){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(pn(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${pn(t,r)}`);let o=0,i=0;const l=2**r-1,f=[];for(const y of e){if(z0(y),y>=2**t)throw new Error(`convertRadix2: invalid data word=${y} from=${t}`);if(o=o<<t|y,i+t>32)throw new Error(`convertRadix2: carry overflow pos=${i} from=${t}`);for(i+=t;i>=r;i-=r)f.push((o>>i-r&l)>>>0);o&=2**i-1}if(o=o<<r-i&l,!n&&i>=t)throw new Error("Excess padding");if(!n&&o)throw new Error(`Non-zero padding: ${o}`);return n&&i>0&&f.push(o>>>0),f}function h1(e){return z0(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return Ms(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of strings");return Uint8Array.from(Ms(t,e,2**8))}}}function Wr(e,t=!1){if(z0(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(pn(8,e)>32||pn(e,8)>32)throw new Error("radix2: carry overflow");return{encode:r=>{if(!(r instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return oo(Array.from(r),8,e,!t)},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(oo(r,e,8,t))}}}function Es(e){if(typeof e!="function")throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch{}}}const d1=Br(Wr(4),Nr("0123456789ABCDEF"),Tr("")),x1=Br(Wr(5),Nr("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),En(5),Tr(""));Br(Wr(5),Nr("0123456789ABCDEFGHIJKLMNOPQRSTUV"),En(5),Tr(""));Br(Wr(5),Nr("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),Tr(""),jf(e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")));const Rf=Br(Wr(6),Nr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),En(6),Tr("")),p1=Br(Wr(6),Nr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),En(6),Tr("")),Mo=e=>Br(h1(58),Nr(e),Tr("")),vn=Mo("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");Mo("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");Mo("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const Bs=[0,2,3,5,6,7,9,10,11],v1={encode(e){let t="";for(let r=0;r<e.length;r+=8){const n=e.subarray(r,r+8);t+=vn.encode(n).padStart(Bs[n.length],"1")}return t},decode(e){let t=[];for(let r=0;r<e.length;r+=11){const n=e.slice(r,r+11),o=Bs.indexOf(n.length),i=vn.decode(n);for(let l=0;l<i.length-o;l++)if(i[l]!==0)throw new Error("base58xmr: wrong padding");t=t.concat(Array.from(i.slice(i.length-o)))}return Uint8Array.from(t)}},so=Br(Nr("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),Tr("")),Ns=[996825010,642813549,513874426,1027748829,705979059];function E0(e){const t=e>>25;let r=(e&33554431)<<5;for(let n=0;n<Ns.length;n++)(t>>n&1)===1&&(r^=Ns[n]);return r}function Ts(e,t,r=1){const n=e.length;let o=1;for(let i=0;i<n;i++){const l=e.charCodeAt(i);if(l<33||l>126)throw new Error(`Invalid prefix (${e})`);o=E0(o)^l>>5}o=E0(o);for(let i=0;i<n;i++)o=E0(o)^e.charCodeAt(i)&31;for(let i of t)o=E0(o)^i;for(let i=0;i<6;i++)o=E0(o);return o^=r,so.encode(oo([o%2**30],30,5,!1))}function Zf(e){const t=e==="bech32"?1:734539939,r=Wr(5),n=r.decode,o=r.encode,i=Es(n);function l(v,m,w=90){if(typeof v!="string")throw new Error(`bech32.encode prefix should be string, not ${typeof v}`);if(!Array.isArray(m)||m.length&&typeof m[0]!="number")throw new Error(`bech32.encode words should be array of numbers, not ${typeof m}`);const E=v.length+7+m.length;if(w!==!1&&E>w)throw new TypeError(`Length ${E} exceeds limit ${w}`);return v=v.toLowerCase(),`${v}1${so.encode(m)}${Ts(v,m,t)}`}function f(v,m=90){if(typeof v!="string")throw new Error(`bech32.decode input should be string, not ${typeof v}`);if(v.length<8||m!==!1&&v.length>m)throw new TypeError(`Wrong string length: ${v.length} (${v}). Expected (8..${m})`);const w=v.toLowerCase();if(v!==w&&v!==v.toUpperCase())throw new Error("String must be lowercase or uppercase");v=w;const E=v.lastIndexOf("1");if(E===0||E===-1)throw new Error('Letter "1" must be present between prefix and data only');const N=v.slice(0,E),O=v.slice(E+1);if(O.length<6)throw new Error("Data must be at least 6 characters long");const C=so.decode(O).slice(0,-6),V=Ts(N,C,t);if(!O.endsWith(V))throw new Error(`Invalid checksum in ${v}: expected "${V}"`);return{prefix:N,words:C}}const y=Es(f);function x(v){const{prefix:m,words:w}=f(v,!1);return{prefix:m,words:w,bytes:n(w)}}return{encode:l,decode:f,decodeToBytes:x,decodeUnsafe:y,fromWords:n,fromWordsUnsafe:i,toWords:o}}Zf("bech32");Zf("bech32m");const y1={encode:e=>new TextDecoder().decode(e),decode:e=>new TextEncoder().encode(e)},b1=Br(Wr(4),Nr("0123456789abcdef"),Tr(""),jf(e=>{if(typeof e!="string"||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})),m1={utf8:y1,hex:b1,base16:d1,base32:x1,base64:Rf,base64url:p1,base58:vn,base58xmr:v1};`${Object.keys(m1).join(", ")}`;function Cf({coder:e,ipfs:t},r){return(n,o)=>(r(n,o),e.decode(t&&o?n.substring(1):n))}function Df({coder:e,ipfs:t}){return(r,n)=>{const o=e.encode(Le(r));return t&&n?`${t}${o}`:o}}function If({chars:e,ipfs:t,type:r}){return(n,o)=>{et(n&&typeof n=="string",()=>`Expected non-null, non-empty ${r} string input`),t&&o&&et(n[0]===t,()=>`Expected ipfs-compatible ${r} to start with '${t}'`);for(let i=o?1:0;i<n.length;i++)et(e.includes(n[i])||n[i]==="="&&(i===n.length-1||!e.includes(n[i+1])),()=>`Invalid ${r} character "${n[i]}" (0x${n.charCodeAt(i).toString(16)}) at index ${i}`);return!0}}const Eo={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:vn,ipfs:"z",type:"base58"},w1=If(Eo),g1=Cf(Eo,w1),P1=Df(Eo),z1=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3]);class H1 extends R0{constructor(t,r,n={},o,i,l){if(super(),this.blockLen=t,this.outputLen=r,this.length=0,this.pos=0,this.finished=!1,this.destroyed=!1,Pt.number(t),Pt.number(r),Pt.number(o),r<0||r>o)throw new Error("Blake2: outputLen bigger than keyLen");if(n.key!==void 0&&(n.key.length<1||n.key.length>o))throw new Error(`Key should be up 1..${o} byte long or undefined`);if(n.salt!==void 0&&n.salt.length!==i)throw new Error(`Salt should be ${i} byte long or undefined`);if(n.personalization!==void 0&&n.personalization.length!==l)throw new Error(`Personalization should be ${l} byte long or undefined`);this.buffer32=Ir(this.buffer=new Uint8Array(t))}update(t){Pt.exists(this);const{blockLen:r,buffer:n,buffer32:o}=this;t=yr(t);const i=t.length;for(let l=0;l<i;){this.pos===r&&(this.compress(o,0,!1),this.pos=0);const f=Math.min(r-this.pos,i-l),y=t.byteOffset+l;if(f===r&&!(y%4)&&l+f<i){const x=new Uint32Array(t.buffer,y,Math.floor((i-l)/4));for(let v=0;l+r<i;v+=o.length,l+=r)this.length+=r,this.compress(x,v,!1);continue}n.set(t.subarray(l,l+f),this.pos),this.pos+=f,this.length+=f,l+=f}return this}digestInto(t){Pt.exists(this),Pt.output(t,this);const{pos:r,buffer32:n}=this;this.finished=!0,this.buffer.subarray(r).fill(0),this.compress(n,0,!0);const o=Ir(t);this.get().forEach((i,l)=>o[l]=i)}digest(){const{buffer:t,outputLen:r}=this;this.digestInto(t);const n=t.slice(0,r);return this.destroy(),n}_cloneInto(t){const{buffer:r,length:n,finished:o,destroyed:i,outputLen:l,pos:f}=this;return t||(t=new this.constructor({dkLen:l})),t.set(...this.get()),t.length=n,t.finished=o,t.destroyed=i,t.outputLen=l,t.buffer.set(r),t.pos=f,t}}const It=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),be=new Uint32Array(32);function Fr(e,t,r,n,o,i){const l=o[i],f=o[i+1];let y=be[2*e],x=be[2*e+1],v=be[2*t],m=be[2*t+1],w=be[2*r],E=be[2*r+1],N=be[2*n],O=be[2*n+1],C=ke.add3L(y,v,l);x=ke.add3H(C,x,m,f),y=C|0,{Dh:O,Dl:N}={Dh:O^x,Dl:N^y},{Dh:O,Dl:N}={Dh:ke.rotr32H(O,N),Dl:ke.rotr32L(O,N)},{h:E,l:w}=ke.add(E,w,O,N),{Bh:m,Bl:v}={Bh:m^E,Bl:v^w},{Bh:m,Bl:v}={Bh:ke.rotrSH(m,v,24),Bl:ke.rotrSL(m,v,24)},be[2*e]=y,be[2*e+1]=x,be[2*t]=v,be[2*t+1]=m,be[2*r]=w,be[2*r+1]=E,be[2*n]=N,be[2*n+1]=O}function jr(e,t,r,n,o,i){const l=o[i],f=o[i+1];let y=be[2*e],x=be[2*e+1],v=be[2*t],m=be[2*t+1],w=be[2*r],E=be[2*r+1],N=be[2*n],O=be[2*n+1],C=ke.add3L(y,v,l);x=ke.add3H(C,x,m,f),y=C|0,{Dh:O,Dl:N}={Dh:O^x,Dl:N^y},{Dh:O,Dl:N}={Dh:ke.rotrSH(O,N,16),Dl:ke.rotrSL(O,N,16)},{h:E,l:w}=ke.add(E,w,O,N),{Bh:m,Bl:v}={Bh:m^E,Bl:v^w},{Bh:m,Bl:v}={Bh:ke.rotrBH(m,v,63),Bl:ke.rotrBL(m,v,63)},be[2*e]=y,be[2*e+1]=x,be[2*t]=v,be[2*t+1]=m,be[2*r]=w,be[2*r+1]=E,be[2*n]=N,be[2*n+1]=O}class k1 extends H1{constructor(t={}){super(128,t.dkLen===void 0?64:t.dkLen,t,64,16,16),this.v0l=It[0]|0,this.v0h=It[1]|0,this.v1l=It[2]|0,this.v1h=It[3]|0,this.v2l=It[4]|0,this.v2h=It[5]|0,this.v3l=It[6]|0,this.v3h=It[7]|0,this.v4l=It[8]|0,this.v4h=It[9]|0,this.v5l=It[10]|0,this.v5h=It[11]|0,this.v6l=It[12]|0,this.v6h=It[13]|0,this.v7l=It[14]|0,this.v7h=It[15]|0;const r=t.key?t.key.length:0;if(this.v0l^=this.outputLen|r<<8|1<<16|1<<24,t.salt){const n=Ir(yr(t.salt));this.v4l^=n[0],this.v4h^=n[1],this.v5l^=n[2],this.v5h^=n[3]}if(t.personalization){const n=Ir(yr(t.personalization));this.v6l^=n[0],this.v6h^=n[1],this.v7l^=n[2],this.v7h^=n[3]}if(t.key){const n=new Uint8Array(this.blockLen);n.set(yr(t.key)),this.update(n)}}get(){let{v0l:t,v0h:r,v1l:n,v1h:o,v2l:i,v2h:l,v3l:f,v3h:y,v4l:x,v4h:v,v5l:m,v5h:w,v6l:E,v6h:N,v7l:O,v7h:C}=this;return[t,r,n,o,i,l,f,y,x,v,m,w,E,N,O,C]}set(t,r,n,o,i,l,f,y,x,v,m,w,E,N,O,C){this.v0l=t|0,this.v0h=r|0,this.v1l=n|0,this.v1h=o|0,this.v2l=i|0,this.v2h=l|0,this.v3l=f|0,this.v3h=y|0,this.v4l=x|0,this.v4h=v|0,this.v5l=m|0,this.v5h=w|0,this.v6l=E|0,this.v6h=N|0,this.v7l=O|0,this.v7h=C|0}compress(t,r,n){this.get().forEach((y,x)=>be[x]=y),be.set(It,16);let{h:o,l:i}=ke.fromBig(BigInt(this.length));be[24]=It[8]^i,be[25]=It[9]^o,n&&(be[28]=~be[28],be[29]=~be[29]);let l=0;const f=z1;for(let y=0;y<12;y++)Fr(0,4,8,12,t,r+2*f[l++]),jr(0,4,8,12,t,r+2*f[l++]),Fr(1,5,9,13,t,r+2*f[l++]),jr(1,5,9,13,t,r+2*f[l++]),Fr(2,6,10,14,t,r+2*f[l++]),jr(2,6,10,14,t,r+2*f[l++]),Fr(3,7,11,15,t,r+2*f[l++]),jr(3,7,11,15,t,r+2*f[l++]),Fr(0,5,10,15,t,r+2*f[l++]),jr(0,5,10,15,t,r+2*f[l++]),Fr(1,6,11,12,t,r+2*f[l++]),jr(1,6,11,12,t,r+2*f[l++]),Fr(2,7,8,13,t,r+2*f[l++]),jr(2,7,8,13,t,r+2*f[l++]),Fr(3,4,9,14,t,r+2*f[l++]),jr(3,4,9,14,t,r+2*f[l++]);this.v0l^=be[0]^be[16],this.v0h^=be[1]^be[17],this.v1l^=be[2]^be[18],this.v1h^=be[3]^be[19],this.v2l^=be[4]^be[20],this.v2h^=be[5]^be[21],this.v3l^=be[6]^be[22],this.v3h^=be[7]^be[23],this.v4l^=be[8]^be[24],this.v4h^=be[9]^be[25],this.v5l^=be[10]^be[26],this.v5h^=be[11]^be[27],this.v6l^=be[12]^be[28],this.v6h^=be[13]^be[29],this.v7l^=be[14]^be[30],this.v7h^=be[15]^be[31],be.fill(0)}destroy(){this.destroyed=!0,this.buffer32.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const M1=Of(e=>new k1(e));function E1(e,t){return(r,n)=>t(r,e,n)}function qf(e,t){return(r,n=256,o)=>{const i=Le(r);return!rr||!o&&Kt()?e[n](i):t[n](i)}}function e0(e,t=256,r,n){const o=Math.ceil(t/8),i=Le(e);return!rr||!n&&Kt()?yh(i,Le(r),o):M1(i,{dkLen:o,key:r||void 0})}const B1=pr("SS58PRE");function Vf(e){return e0(Wt(B1,e),512)}function N1(e){const t=e[0]&64?2:1,r=t===1?e[0]:(e[0]&63)<<2|e[1]>>6|(e[1]&63)<<8,n=[34+t,35+t].includes(e.length),o=e.length-(n?2:1),i=Vf(e.subarray(0,o));return[(e[0]&128)===0&&![46,47].includes(e[0])&&(n?e[e.length-2]===i[0]&&e[e.length-1]===i[1]:e[e.length-1]===i[0]),o,t,r]}const T1=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING","KTON"],decimals:[9,9],standardAccount:"*25519",website:"https://darwinia.network/"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"poli",displayName:"Polimec Chain",symbols:[],decimals:[],standardAccount:"*25519",website:"https://polimec.io/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:63,network:"hydradx",displayName:"HydraDX",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydradx.io"},{prefix:65,network:"aventus",displayName:"AvN Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara-network.io/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"apex",displayName:"Apex Network",symbols:["APEX"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2114,network:"Turing",displayName:"Turing Network",symbols:["TUR"],decimals:[10],standardAccount:"*25519",website:"https://oak.tech/turing/home/"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2208,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:3e3,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:4e3,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:4006,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.webb.tools/"},{prefix:4450,network:"g1",displayName:"\u011E1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"}],L1={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"],"nodle-para":["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],picasso:["0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"]},O1={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},A1={acala:787,astar:810,bifrost:788,centrifuge:747,composable:354,"dock-mainnet":594,edgeware:523,equilibrium:99999997,genshiro:99999996,karura:686,kusama:434,"nodle-para":1003,parallel:354,polkadex:799,polkadot:354,polymesh:595,sora:617,statemine:434,statemint:354,xxnetwork:1955},S1={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,subspace_testnet:!0,"zero-alphaville":!0},Ls=[0,2,42],X1=["testnet"];function F1(e){const t=e.network||"",r=t.replace(/_/g,"-").split("-"),n=e;return n.slip44=A1[t],n.hasLedgerSupport=!!n.slip44,n.genesisHash=L1[t]||[],n.icon=O1[t]||"substrate",n.isTestnet=!!S1[t]||X1.includes(r[r.length-1]),n.isIgnored=n.isTestnet||!(e.standardAccount&&e.decimals&&e.decimals.length&&e.symbols&&e.symbols.length)&&e.prefix!==42,n}function j1({genesisHash:e,prefix:t}){return!!e.length||t===42}function U1(e){return!e.isIgnored&&!!e.network}function R1(e,t){const r=Ls.includes(e.prefix),n=Ls.includes(t.prefix);return r===n?r?0:e.displayName.localeCompare(t.displayName):r?-1:1}const Z1=T1.map(F1),Wf=Z1.filter(U1).sort(R1);Wf.filter(j1);const sn={allowedDecodedLengths:[1,2,4,8,32,33],allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:Wf.map(({prefix:e})=>e),prefix:42};function d0(e,t,r=-1){if(et(e,"Invalid empty address passed"),qr(e)||Er(e))return Le(e);try{const n=g1(e);et(sn.allowedEncodedLengths.includes(n.length),"Invalid decoded address length");const[o,i,l,f]=N1(n);return et(t||o,"Invalid decoded address checksum"),et([-1,f].includes(r),()=>`Expected ss58Format ${r}, received ${f}`),n.slice(l,i)}catch(n){throw new Error(`Decoding ${e}: ${n.message}`)}}const Os={isLe:!1},si={isLe:!0},C1={bitLength:32,isLe:!1},ai={bitLength:32,isLe:!0},m0={bitLength:256,isLe:!1},D1={bitLength:256,isLe:!0},I1=/^\d+$/,q1=32;var v0,Jr;const jo=class{constructor(){Vt(this,v0,new Uint8Array(32));Vt(this,Jr,!1)}static from(t){const r=new jo,[n,o]=t.startsWith("/")?[t.substring(1),!0]:[t,!1];return r.soft(I1.test(n)?new Ze(n,10):n),o?r.harden():r}get chainCode(){return Ee(this,v0)}get isHard(){return Ee(this,Jr)}get isSoft(){return!Ee(this,Jr)}hard(t){return this.soft(t).harden()}harden(){return Bt(this,Jr,!0),this}soft(t){return wf(t)||lf(t)||bf(t)?this.soft(ar(t,D1)):Er(t)?this.soft(h0(t)):pl(t)?this.soft(Po(pr(t))):t.length>q1?this.soft(e0(t)):(Ee(this,v0).fill(0),Ee(this,v0).set(t,0),this)}soften(){return Bt(this,Jr,!1),this}};let ao=jo;v0=new WeakMap,Jr=new WeakMap;const V1=/\/(\/?)([^/]+)/g;function Gf(e){const t=e.match(V1),r=[];let n="";if(t){n=t.join("");for(const o of t)r.push(ao.from(o.substring(1)))}return et(n===e,()=>`Re-constructed path "${n}" does not match input`),{parts:t,path:r}}const W1=/^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;function G1(e){const t=e.match(W1);if(t===null)throw new Error("Unable to match provided value to a secret URI");const[,r,,n,,,o]=t,{path:i}=Gf(n);return{derivePath:n,password:o,path:i,phrase:r}}const Y1=Po(pr("Secp256k1HDKD"));function K1(e,t){if(!qr(t)||t.length!==32)throw new Error("Invalid chainCode passed to derive");return e0(Wt(Y1,e,t),256)}function w0(e,t){if(e.length!==32)throw new Error("Expected valid 32-byte private key as a seed");if(!rr||!t&&Kt()){const r=oh(e),n=r.slice(32);if(pf(n))throw new Error("Invalid publicKey generated from WASM interface");return{publicKey:n,secretKey:r.slice(0,32)}}return{publicKey:kl(e,!0),secretKey:e}}function Yf(e,t){return(r,{chainCode:n,isHard:o})=>(et(o,"A soft key was found in the path and is not supported"),e(t(r.secretKey.subarray(0,32),n)))}const As=Yf(w0,K1);var Kf={exports:{}};function Jf(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Bo={exports:{}};(function(e){(function(t){var r=function(p){var H,k=new Float64Array(16);if(p)for(H=0;H<p.length;H++)k[H]=p[H];return k},n=function(){throw new Error("no PRNG")},o=new Uint8Array(16),i=new Uint8Array(32);i[0]=9;var l=r(),f=r([1]),y=r([56129,1]),x=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),v=r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),m=r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),w=r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),E=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function N(p,H,k,a){p[H]=k>>24&255,p[H+1]=k>>16&255,p[H+2]=k>>8&255,p[H+3]=k&255,p[H+4]=a>>24&255,p[H+5]=a>>16&255,p[H+6]=a>>8&255,p[H+7]=a&255}function O(p,H,k,a,B){var K,W=0;for(K=0;K<B;K++)W|=p[H+K]^k[a+K];return(1&W-1>>>8)-1}function C(p,H,k,a){return O(p,H,k,a,16)}function V(p,H,k,a){return O(p,H,k,a,32)}function j(p,H,k,a){for(var B=a[0]&255|(a[1]&255)<<8|(a[2]&255)<<16|(a[3]&255)<<24,K=k[0]&255|(k[1]&255)<<8|(k[2]&255)<<16|(k[3]&255)<<24,W=k[4]&255|(k[5]&255)<<8|(k[6]&255)<<16|(k[7]&255)<<24,ne=k[8]&255|(k[9]&255)<<8|(k[10]&255)<<16|(k[11]&255)<<24,ue=k[12]&255|(k[13]&255)<<8|(k[14]&255)<<16|(k[15]&255)<<24,de=a[4]&255|(a[5]&255)<<8|(a[6]&255)<<16|(a[7]&255)<<24,le=H[0]&255|(H[1]&255)<<8|(H[2]&255)<<16|(H[3]&255)<<24,$e=H[4]&255|(H[5]&255)<<8|(H[6]&255)<<16|(H[7]&255)<<24,me=H[8]&255|(H[9]&255)<<8|(H[10]&255)<<16|(H[11]&255)<<24,Oe=H[12]&255|(H[13]&255)<<8|(H[14]&255)<<16|(H[15]&255)<<24,Se=a[8]&255|(a[9]&255)<<8|(a[10]&255)<<16|(a[11]&255)<<24,Re=k[16]&255|(k[17]&255)<<8|(k[18]&255)<<16|(k[19]&255)<<24,Ue=k[20]&255|(k[21]&255)<<8|(k[22]&255)<<16|(k[23]&255)<<24,Xe=k[24]&255|(k[25]&255)<<8|(k[26]&255)<<16|(k[27]&255)<<24,je=k[28]&255|(k[29]&255)<<8|(k[30]&255)<<16|(k[31]&255)<<24,Fe=a[12]&255|(a[13]&255)<<8|(a[14]&255)<<16|(a[15]&255)<<24,we=B,He=K,ye=W,ge=ne,Pe=ue,pe=de,ee=le,re=$e,fe=me,oe=Oe,se=Se,ce=Re,Te=Ue,De=Xe,qe=je,Ie=Fe,R,Ye=0;Ye<20;Ye+=2)R=we+Te|0,Pe^=R<<7|R>>>32-7,R=Pe+we|0,fe^=R<<9|R>>>32-9,R=fe+Pe|0,Te^=R<<13|R>>>32-13,R=Te+fe|0,we^=R<<18|R>>>32-18,R=pe+He|0,oe^=R<<7|R>>>32-7,R=oe+pe|0,De^=R<<9|R>>>32-9,R=De+oe|0,He^=R<<13|R>>>32-13,R=He+De|0,pe^=R<<18|R>>>32-18,R=se+ee|0,qe^=R<<7|R>>>32-7,R=qe+se|0,ye^=R<<9|R>>>32-9,R=ye+qe|0,ee^=R<<13|R>>>32-13,R=ee+ye|0,se^=R<<18|R>>>32-18,R=Ie+ce|0,ge^=R<<7|R>>>32-7,R=ge+Ie|0,re^=R<<9|R>>>32-9,R=re+ge|0,ce^=R<<13|R>>>32-13,R=ce+re|0,Ie^=R<<18|R>>>32-18,R=we+ge|0,He^=R<<7|R>>>32-7,R=He+we|0,ye^=R<<9|R>>>32-9,R=ye+He|0,ge^=R<<13|R>>>32-13,R=ge+ye|0,we^=R<<18|R>>>32-18,R=pe+Pe|0,ee^=R<<7|R>>>32-7,R=ee+pe|0,re^=R<<9|R>>>32-9,R=re+ee|0,Pe^=R<<13|R>>>32-13,R=Pe+re|0,pe^=R<<18|R>>>32-18,R=se+oe|0,ce^=R<<7|R>>>32-7,R=ce+se|0,fe^=R<<9|R>>>32-9,R=fe+ce|0,oe^=R<<13|R>>>32-13,R=oe+fe|0,se^=R<<18|R>>>32-18,R=Ie+qe|0,Te^=R<<7|R>>>32-7,R=Te+Ie|0,De^=R<<9|R>>>32-9,R=De+Te|0,qe^=R<<13|R>>>32-13,R=qe+De|0,Ie^=R<<18|R>>>32-18;we=we+B|0,He=He+K|0,ye=ye+W|0,ge=ge+ne|0,Pe=Pe+ue|0,pe=pe+de|0,ee=ee+le|0,re=re+$e|0,fe=fe+me|0,oe=oe+Oe|0,se=se+Se|0,ce=ce+Re|0,Te=Te+Ue|0,De=De+Xe|0,qe=qe+je|0,Ie=Ie+Fe|0,p[0]=we>>>0&255,p[1]=we>>>8&255,p[2]=we>>>16&255,p[3]=we>>>24&255,p[4]=He>>>0&255,p[5]=He>>>8&255,p[6]=He>>>16&255,p[7]=He>>>24&255,p[8]=ye>>>0&255,p[9]=ye>>>8&255,p[10]=ye>>>16&255,p[11]=ye>>>24&255,p[12]=ge>>>0&255,p[13]=ge>>>8&255,p[14]=ge>>>16&255,p[15]=ge>>>24&255,p[16]=Pe>>>0&255,p[17]=Pe>>>8&255,p[18]=Pe>>>16&255,p[19]=Pe>>>24&255,p[20]=pe>>>0&255,p[21]=pe>>>8&255,p[22]=pe>>>16&255,p[23]=pe>>>24&255,p[24]=ee>>>0&255,p[25]=ee>>>8&255,p[26]=ee>>>16&255,p[27]=ee>>>24&255,p[28]=re>>>0&255,p[29]=re>>>8&255,p[30]=re>>>16&255,p[31]=re>>>24&255,p[32]=fe>>>0&255,p[33]=fe>>>8&255,p[34]=fe>>>16&255,p[35]=fe>>>24&255,p[36]=oe>>>0&255,p[37]=oe>>>8&255,p[38]=oe>>>16&255,p[39]=oe>>>24&255,p[40]=se>>>0&255,p[41]=se>>>8&255,p[42]=se>>>16&255,p[43]=se>>>24&255,p[44]=ce>>>0&255,p[45]=ce>>>8&255,p[46]=ce>>>16&255,p[47]=ce>>>24&255,p[48]=Te>>>0&255,p[49]=Te>>>8&255,p[50]=Te>>>16&255,p[51]=Te>>>24&255,p[52]=De>>>0&255,p[53]=De>>>8&255,p[54]=De>>>16&255,p[55]=De>>>24&255,p[56]=qe>>>0&255,p[57]=qe>>>8&255,p[58]=qe>>>16&255,p[59]=qe>>>24&255,p[60]=Ie>>>0&255,p[61]=Ie>>>8&255,p[62]=Ie>>>16&255,p[63]=Ie>>>24&255}function X(p,H,k,a){for(var B=a[0]&255|(a[1]&255)<<8|(a[2]&255)<<16|(a[3]&255)<<24,K=k[0]&255|(k[1]&255)<<8|(k[2]&255)<<16|(k[3]&255)<<24,W=k[4]&255|(k[5]&255)<<8|(k[6]&255)<<16|(k[7]&255)<<24,ne=k[8]&255|(k[9]&255)<<8|(k[10]&255)<<16|(k[11]&255)<<24,ue=k[12]&255|(k[13]&255)<<8|(k[14]&255)<<16|(k[15]&255)<<24,de=a[4]&255|(a[5]&255)<<8|(a[6]&255)<<16|(a[7]&255)<<24,le=H[0]&255|(H[1]&255)<<8|(H[2]&255)<<16|(H[3]&255)<<24,$e=H[4]&255|(H[5]&255)<<8|(H[6]&255)<<16|(H[7]&255)<<24,me=H[8]&255|(H[9]&255)<<8|(H[10]&255)<<16|(H[11]&255)<<24,Oe=H[12]&255|(H[13]&255)<<8|(H[14]&255)<<16|(H[15]&255)<<24,Se=a[8]&255|(a[9]&255)<<8|(a[10]&255)<<16|(a[11]&255)<<24,Re=k[16]&255|(k[17]&255)<<8|(k[18]&255)<<16|(k[19]&255)<<24,Ue=k[20]&255|(k[21]&255)<<8|(k[22]&255)<<16|(k[23]&255)<<24,Xe=k[24]&255|(k[25]&255)<<8|(k[26]&255)<<16|(k[27]&255)<<24,je=k[28]&255|(k[29]&255)<<8|(k[30]&255)<<16|(k[31]&255)<<24,Fe=a[12]&255|(a[13]&255)<<8|(a[14]&255)<<16|(a[15]&255)<<24,we=B,He=K,ye=W,ge=ne,Pe=ue,pe=de,ee=le,re=$e,fe=me,oe=Oe,se=Se,ce=Re,Te=Ue,De=Xe,qe=je,Ie=Fe,R,Ye=0;Ye<20;Ye+=2)R=we+Te|0,Pe^=R<<7|R>>>32-7,R=Pe+we|0,fe^=R<<9|R>>>32-9,R=fe+Pe|0,Te^=R<<13|R>>>32-13,R=Te+fe|0,we^=R<<18|R>>>32-18,R=pe+He|0,oe^=R<<7|R>>>32-7,R=oe+pe|0,De^=R<<9|R>>>32-9,R=De+oe|0,He^=R<<13|R>>>32-13,R=He+De|0,pe^=R<<18|R>>>32-18,R=se+ee|0,qe^=R<<7|R>>>32-7,R=qe+se|0,ye^=R<<9|R>>>32-9,R=ye+qe|0,ee^=R<<13|R>>>32-13,R=ee+ye|0,se^=R<<18|R>>>32-18,R=Ie+ce|0,ge^=R<<7|R>>>32-7,R=ge+Ie|0,re^=R<<9|R>>>32-9,R=re+ge|0,ce^=R<<13|R>>>32-13,R=ce+re|0,Ie^=R<<18|R>>>32-18,R=we+ge|0,He^=R<<7|R>>>32-7,R=He+we|0,ye^=R<<9|R>>>32-9,R=ye+He|0,ge^=R<<13|R>>>32-13,R=ge+ye|0,we^=R<<18|R>>>32-18,R=pe+Pe|0,ee^=R<<7|R>>>32-7,R=ee+pe|0,re^=R<<9|R>>>32-9,R=re+ee|0,Pe^=R<<13|R>>>32-13,R=Pe+re|0,pe^=R<<18|R>>>32-18,R=se+oe|0,ce^=R<<7|R>>>32-7,R=ce+se|0,fe^=R<<9|R>>>32-9,R=fe+ce|0,oe^=R<<13|R>>>32-13,R=oe+fe|0,se^=R<<18|R>>>32-18,R=Ie+qe|0,Te^=R<<7|R>>>32-7,R=Te+Ie|0,De^=R<<9|R>>>32-9,R=De+Te|0,qe^=R<<13|R>>>32-13,R=qe+De|0,Ie^=R<<18|R>>>32-18;p[0]=we>>>0&255,p[1]=we>>>8&255,p[2]=we>>>16&255,p[3]=we>>>24&255,p[4]=pe>>>0&255,p[5]=pe>>>8&255,p[6]=pe>>>16&255,p[7]=pe>>>24&255,p[8]=se>>>0&255,p[9]=se>>>8&255,p[10]=se>>>16&255,p[11]=se>>>24&255,p[12]=Ie>>>0&255,p[13]=Ie>>>8&255,p[14]=Ie>>>16&255,p[15]=Ie>>>24&255,p[16]=ee>>>0&255,p[17]=ee>>>8&255,p[18]=ee>>>16&255,p[19]=ee>>>24&255,p[20]=re>>>0&255,p[21]=re>>>8&255,p[22]=re>>>16&255,p[23]=re>>>24&255,p[24]=fe>>>0&255,p[25]=fe>>>8&255,p[26]=fe>>>16&255,p[27]=fe>>>24&255,p[28]=oe>>>0&255,p[29]=oe>>>8&255,p[30]=oe>>>16&255,p[31]=oe>>>24&255}function F(p,H,k,a){j(p,H,k,a)}function G(p,H,k,a){X(p,H,k,a)}var Y=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function _(p,H,k,a,B,K,W){var ne=new Uint8Array(16),ue=new Uint8Array(64),de,le;for(le=0;le<16;le++)ne[le]=0;for(le=0;le<8;le++)ne[le]=K[le];for(;B>=64;){for(F(ue,ne,W,Y),le=0;le<64;le++)p[H+le]=k[a+le]^ue[le];for(de=1,le=8;le<16;le++)de=de+(ne[le]&255)|0,ne[le]=de&255,de>>>=8;B-=64,H+=64,a+=64}if(B>0)for(F(ue,ne,W,Y),le=0;le<B;le++)p[H+le]=k[a+le]^ue[le];return 0}function $(p,H,k,a,B){var K=new Uint8Array(16),W=new Uint8Array(64),ne,ue;for(ue=0;ue<16;ue++)K[ue]=0;for(ue=0;ue<8;ue++)K[ue]=a[ue];for(;k>=64;){for(F(W,K,B,Y),ue=0;ue<64;ue++)p[H+ue]=W[ue];for(ne=1,ue=8;ue<16;ue++)ne=ne+(K[ue]&255)|0,K[ue]=ne&255,ne>>>=8;k-=64,H+=64}if(k>0)for(F(W,K,B,Y),ue=0;ue<k;ue++)p[H+ue]=W[ue];return 0}function ie(p,H,k,a,B){var K=new Uint8Array(32);G(K,a,B,Y);for(var W=new Uint8Array(8),ne=0;ne<8;ne++)W[ne]=a[ne+16];return $(p,H,k,W,K)}function S(p,H,k,a,B,K,W){var ne=new Uint8Array(32);G(ne,K,W,Y);for(var ue=new Uint8Array(8),de=0;de<8;de++)ue[de]=K[de+16];return _(p,H,k,a,B,ue,ne)}var U=function(p){this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0;var H,k,a,B,K,W,ne,ue;H=p[0]&255|(p[1]&255)<<8,this.r[0]=H&8191,k=p[2]&255|(p[3]&255)<<8,this.r[1]=(H>>>13|k<<3)&8191,a=p[4]&255|(p[5]&255)<<8,this.r[2]=(k>>>10|a<<6)&7939,B=p[6]&255|(p[7]&255)<<8,this.r[3]=(a>>>7|B<<9)&8191,K=p[8]&255|(p[9]&255)<<8,this.r[4]=(B>>>4|K<<12)&255,this.r[5]=K>>>1&8190,W=p[10]&255|(p[11]&255)<<8,this.r[6]=(K>>>14|W<<2)&8191,ne=p[12]&255|(p[13]&255)<<8,this.r[7]=(W>>>11|ne<<5)&8065,ue=p[14]&255|(p[15]&255)<<8,this.r[8]=(ne>>>8|ue<<8)&8191,this.r[9]=ue>>>5&127,this.pad[0]=p[16]&255|(p[17]&255)<<8,this.pad[1]=p[18]&255|(p[19]&255)<<8,this.pad[2]=p[20]&255|(p[21]&255)<<8,this.pad[3]=p[22]&255|(p[23]&255)<<8,this.pad[4]=p[24]&255|(p[25]&255)<<8,this.pad[5]=p[26]&255|(p[27]&255)<<8,this.pad[6]=p[28]&255|(p[29]&255)<<8,this.pad[7]=p[30]&255|(p[31]&255)<<8};U.prototype.blocks=function(p,H,k){for(var a=this.fin?0:2048,B,K,W,ne,ue,de,le,$e,me,Oe,Se,Re,Ue,Xe,je,Fe,we,He,ye,ge=this.h[0],Pe=this.h[1],pe=this.h[2],ee=this.h[3],re=this.h[4],fe=this.h[5],oe=this.h[6],se=this.h[7],ce=this.h[8],Te=this.h[9],De=this.r[0],qe=this.r[1],Ie=this.r[2],R=this.r[3],Ye=this.r[4],at=this.r[5],ft=this.r[6],We=this.r[7],it=this.r[8],ot=this.r[9];k>=16;)B=p[H+0]&255|(p[H+1]&255)<<8,ge+=B&8191,K=p[H+2]&255|(p[H+3]&255)<<8,Pe+=(B>>>13|K<<3)&8191,W=p[H+4]&255|(p[H+5]&255)<<8,pe+=(K>>>10|W<<6)&8191,ne=p[H+6]&255|(p[H+7]&255)<<8,ee+=(W>>>7|ne<<9)&8191,ue=p[H+8]&255|(p[H+9]&255)<<8,re+=(ne>>>4|ue<<12)&8191,fe+=ue>>>1&8191,de=p[H+10]&255|(p[H+11]&255)<<8,oe+=(ue>>>14|de<<2)&8191,le=p[H+12]&255|(p[H+13]&255)<<8,se+=(de>>>11|le<<5)&8191,$e=p[H+14]&255|(p[H+15]&255)<<8,ce+=(le>>>8|$e<<8)&8191,Te+=$e>>>5|a,me=0,Oe=me,Oe+=ge*De,Oe+=Pe*(5*ot),Oe+=pe*(5*it),Oe+=ee*(5*We),Oe+=re*(5*ft),me=Oe>>>13,Oe&=8191,Oe+=fe*(5*at),Oe+=oe*(5*Ye),Oe+=se*(5*R),Oe+=ce*(5*Ie),Oe+=Te*(5*qe),me+=Oe>>>13,Oe&=8191,Se=me,Se+=ge*qe,Se+=Pe*De,Se+=pe*(5*ot),Se+=ee*(5*it),Se+=re*(5*We),me=Se>>>13,Se&=8191,Se+=fe*(5*ft),Se+=oe*(5*at),Se+=se*(5*Ye),Se+=ce*(5*R),Se+=Te*(5*Ie),me+=Se>>>13,Se&=8191,Re=me,Re+=ge*Ie,Re+=Pe*qe,Re+=pe*De,Re+=ee*(5*ot),Re+=re*(5*it),me=Re>>>13,Re&=8191,Re+=fe*(5*We),Re+=oe*(5*ft),Re+=se*(5*at),Re+=ce*(5*Ye),Re+=Te*(5*R),me+=Re>>>13,Re&=8191,Ue=me,Ue+=ge*R,Ue+=Pe*Ie,Ue+=pe*qe,Ue+=ee*De,Ue+=re*(5*ot),me=Ue>>>13,Ue&=8191,Ue+=fe*(5*it),Ue+=oe*(5*We),Ue+=se*(5*ft),Ue+=ce*(5*at),Ue+=Te*(5*Ye),me+=Ue>>>13,Ue&=8191,Xe=me,Xe+=ge*Ye,Xe+=Pe*R,Xe+=pe*Ie,Xe+=ee*qe,Xe+=re*De,me=Xe>>>13,Xe&=8191,Xe+=fe*(5*ot),Xe+=oe*(5*it),Xe+=se*(5*We),Xe+=ce*(5*ft),Xe+=Te*(5*at),me+=Xe>>>13,Xe&=8191,je=me,je+=ge*at,je+=Pe*Ye,je+=pe*R,je+=ee*Ie,je+=re*qe,me=je>>>13,je&=8191,je+=fe*De,je+=oe*(5*ot),je+=se*(5*it),je+=ce*(5*We),je+=Te*(5*ft),me+=je>>>13,je&=8191,Fe=me,Fe+=ge*ft,Fe+=Pe*at,Fe+=pe*Ye,Fe+=ee*R,Fe+=re*Ie,me=Fe>>>13,Fe&=8191,Fe+=fe*qe,Fe+=oe*De,Fe+=se*(5*ot),Fe+=ce*(5*it),Fe+=Te*(5*We),me+=Fe>>>13,Fe&=8191,we=me,we+=ge*We,we+=Pe*ft,we+=pe*at,we+=ee*Ye,we+=re*R,me=we>>>13,we&=8191,we+=fe*Ie,we+=oe*qe,we+=se*De,we+=ce*(5*ot),we+=Te*(5*it),me+=we>>>13,we&=8191,He=me,He+=ge*it,He+=Pe*We,He+=pe*ft,He+=ee*at,He+=re*Ye,me=He>>>13,He&=8191,He+=fe*R,He+=oe*Ie,He+=se*qe,He+=ce*De,He+=Te*(5*ot),me+=He>>>13,He&=8191,ye=me,ye+=ge*ot,ye+=Pe*it,ye+=pe*We,ye+=ee*ft,ye+=re*at,me=ye>>>13,ye&=8191,ye+=fe*Ye,ye+=oe*R,ye+=se*Ie,ye+=ce*qe,ye+=Te*De,me+=ye>>>13,ye&=8191,me=(me<<2)+me|0,me=me+Oe|0,Oe=me&8191,me=me>>>13,Se+=me,ge=Oe,Pe=Se,pe=Re,ee=Ue,re=Xe,fe=je,oe=Fe,se=we,ce=He,Te=ye,H+=16,k-=16;this.h[0]=ge,this.h[1]=Pe,this.h[2]=pe,this.h[3]=ee,this.h[4]=re,this.h[5]=fe,this.h[6]=oe,this.h[7]=se,this.h[8]=ce,this.h[9]=Te},U.prototype.finish=function(p,H){var k=new Uint16Array(10),a,B,K,W;if(this.leftover){for(W=this.leftover,this.buffer[W++]=1;W<16;W++)this.buffer[W]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(a=this.h[1]>>>13,this.h[1]&=8191,W=2;W<10;W++)this.h[W]+=a,a=this.h[W]>>>13,this.h[W]&=8191;for(this.h[0]+=a*5,a=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=a,a=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=a,k[0]=this.h[0]+5,a=k[0]>>>13,k[0]&=8191,W=1;W<10;W++)k[W]=this.h[W]+a,a=k[W]>>>13,k[W]&=8191;for(k[9]-=1<<13,B=(a^1)-1,W=0;W<10;W++)k[W]&=B;for(B=~B,W=0;W<10;W++)this.h[W]=this.h[W]&B|k[W];for(this.h[0]=(this.h[0]|this.h[1]<<13)&65535,this.h[1]=(this.h[1]>>>3|this.h[2]<<10)&65535,this.h[2]=(this.h[2]>>>6|this.h[3]<<7)&65535,this.h[3]=(this.h[3]>>>9|this.h[4]<<4)&65535,this.h[4]=(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14)&65535,this.h[5]=(this.h[6]>>>2|this.h[7]<<11)&65535,this.h[6]=(this.h[7]>>>5|this.h[8]<<8)&65535,this.h[7]=(this.h[8]>>>8|this.h[9]<<5)&65535,K=this.h[0]+this.pad[0],this.h[0]=K&65535,W=1;W<8;W++)K=(this.h[W]+this.pad[W]|0)+(K>>>16)|0,this.h[W]=K&65535;p[H+0]=this.h[0]>>>0&255,p[H+1]=this.h[0]>>>8&255,p[H+2]=this.h[1]>>>0&255,p[H+3]=this.h[1]>>>8&255,p[H+4]=this.h[2]>>>0&255,p[H+5]=this.h[2]>>>8&255,p[H+6]=this.h[3]>>>0&255,p[H+7]=this.h[3]>>>8&255,p[H+8]=this.h[4]>>>0&255,p[H+9]=this.h[4]>>>8&255,p[H+10]=this.h[5]>>>0&255,p[H+11]=this.h[5]>>>8&255,p[H+12]=this.h[6]>>>0&255,p[H+13]=this.h[6]>>>8&255,p[H+14]=this.h[7]>>>0&255,p[H+15]=this.h[7]>>>8&255},U.prototype.update=function(p,H,k){var a,B;if(this.leftover){for(B=16-this.leftover,B>k&&(B=k),a=0;a<B;a++)this.buffer[this.leftover+a]=p[H+a];if(k-=B,H+=B,this.leftover+=B,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(k>=16&&(B=k-k%16,this.blocks(p,H,B),H+=B,k-=B),k){for(a=0;a<k;a++)this.buffer[this.leftover+a]=p[H+a];this.leftover+=k}};function Z(p,H,k,a,B,K){var W=new U(K);return W.update(k,a,B),W.finish(p,H),0}function b(p,H,k,a,B,K){var W=new Uint8Array(16);return Z(W,0,k,a,B,K),C(p,H,W,0)}function s(p,H,k,a,B){var K;if(k<32)return-1;for(S(p,0,H,0,k,a,B),Z(p,16,p,32,k-32,p),K=0;K<16;K++)p[K]=0;return 0}function d(p,H,k,a,B){var K,W=new Uint8Array(32);if(k<32||(ie(W,0,32,a,B),b(H,16,H,32,k-32,W)!==0))return-1;for(S(p,0,H,0,k,a,B),K=0;K<32;K++)p[K]=0;return 0}function z(p,H){var k;for(k=0;k<16;k++)p[k]=H[k]|0}function L(p){var H,k,a=1;for(H=0;H<16;H++)k=p[H]+a+65535,a=Math.floor(k/65536),p[H]=k-a*65536;p[0]+=a-1+37*(a-1)}function A(p,H,k){for(var a,B=~(k-1),K=0;K<16;K++)a=B&(p[K]^H[K]),p[K]^=a,H[K]^=a}function D(p,H){var k,a,B,K=r(),W=r();for(k=0;k<16;k++)W[k]=H[k];for(L(W),L(W),L(W),a=0;a<2;a++){for(K[0]=W[0]-65517,k=1;k<15;k++)K[k]=W[k]-65535-(K[k-1]>>16&1),K[k-1]&=65535;K[15]=W[15]-32767-(K[14]>>16&1),B=K[15]>>16&1,K[14]&=65535,A(W,K,1-B)}for(k=0;k<16;k++)p[2*k]=W[k]&255,p[2*k+1]=W[k]>>8}function q(p,H){var k=new Uint8Array(32),a=new Uint8Array(32);return D(k,p),D(a,H),V(k,0,a,0)}function g(p){var H=new Uint8Array(32);return D(H,p),H[0]&1}function c(p,H){var k;for(k=0;k<16;k++)p[k]=H[2*k]+(H[2*k+1]<<8);p[15]&=32767}function M(p,H,k){for(var a=0;a<16;a++)p[a]=H[a]+k[a]}function Q(p,H,k){for(var a=0;a<16;a++)p[a]=H[a]-k[a]}function ae(p,H,k){var a,B,K=0,W=0,ne=0,ue=0,de=0,le=0,$e=0,me=0,Oe=0,Se=0,Re=0,Ue=0,Xe=0,je=0,Fe=0,we=0,He=0,ye=0,ge=0,Pe=0,pe=0,ee=0,re=0,fe=0,oe=0,se=0,ce=0,Te=0,De=0,qe=0,Ie=0,R=k[0],Ye=k[1],at=k[2],ft=k[3],We=k[4],it=k[5],ot=k[6],Rt=k[7],gt=k[8],Ft=k[9],jt=k[10],Ut=k[11],Dt=k[12],_t=k[13],$t=k[14],er=k[15];a=H[0],K+=a*R,W+=a*Ye,ne+=a*at,ue+=a*ft,de+=a*We,le+=a*it,$e+=a*ot,me+=a*Rt,Oe+=a*gt,Se+=a*Ft,Re+=a*jt,Ue+=a*Ut,Xe+=a*Dt,je+=a*_t,Fe+=a*$t,we+=a*er,a=H[1],W+=a*R,ne+=a*Ye,ue+=a*at,de+=a*ft,le+=a*We,$e+=a*it,me+=a*ot,Oe+=a*Rt,Se+=a*gt,Re+=a*Ft,Ue+=a*jt,Xe+=a*Ut,je+=a*Dt,Fe+=a*_t,we+=a*$t,He+=a*er,a=H[2],ne+=a*R,ue+=a*Ye,de+=a*at,le+=a*ft,$e+=a*We,me+=a*it,Oe+=a*ot,Se+=a*Rt,Re+=a*gt,Ue+=a*Ft,Xe+=a*jt,je+=a*Ut,Fe+=a*Dt,we+=a*_t,He+=a*$t,ye+=a*er,a=H[3],ue+=a*R,de+=a*Ye,le+=a*at,$e+=a*ft,me+=a*We,Oe+=a*it,Se+=a*ot,Re+=a*Rt,Ue+=a*gt,Xe+=a*Ft,je+=a*jt,Fe+=a*Ut,we+=a*Dt,He+=a*_t,ye+=a*$t,ge+=a*er,a=H[4],de+=a*R,le+=a*Ye,$e+=a*at,me+=a*ft,Oe+=a*We,Se+=a*it,Re+=a*ot,Ue+=a*Rt,Xe+=a*gt,je+=a*Ft,Fe+=a*jt,we+=a*Ut,He+=a*Dt,ye+=a*_t,ge+=a*$t,Pe+=a*er,a=H[5],le+=a*R,$e+=a*Ye,me+=a*at,Oe+=a*ft,Se+=a*We,Re+=a*it,Ue+=a*ot,Xe+=a*Rt,je+=a*gt,Fe+=a*Ft,we+=a*jt,He+=a*Ut,ye+=a*Dt,ge+=a*_t,Pe+=a*$t,pe+=a*er,a=H[6],$e+=a*R,me+=a*Ye,Oe+=a*at,Se+=a*ft,Re+=a*We,Ue+=a*it,Xe+=a*ot,je+=a*Rt,Fe+=a*gt,we+=a*Ft,He+=a*jt,ye+=a*Ut,ge+=a*Dt,Pe+=a*_t,pe+=a*$t,ee+=a*er,a=H[7],me+=a*R,Oe+=a*Ye,Se+=a*at,Re+=a*ft,Ue+=a*We,Xe+=a*it,je+=a*ot,Fe+=a*Rt,we+=a*gt,He+=a*Ft,ye+=a*jt,ge+=a*Ut,Pe+=a*Dt,pe+=a*_t,ee+=a*$t,re+=a*er,a=H[8],Oe+=a*R,Se+=a*Ye,Re+=a*at,Ue+=a*ft,Xe+=a*We,je+=a*it,Fe+=a*ot,we+=a*Rt,He+=a*gt,ye+=a*Ft,ge+=a*jt,Pe+=a*Ut,pe+=a*Dt,ee+=a*_t,re+=a*$t,fe+=a*er,a=H[9],Se+=a*R,Re+=a*Ye,Ue+=a*at,Xe+=a*ft,je+=a*We,Fe+=a*it,we+=a*ot,He+=a*Rt,ye+=a*gt,ge+=a*Ft,Pe+=a*jt,pe+=a*Ut,ee+=a*Dt,re+=a*_t,fe+=a*$t,oe+=a*er,a=H[10],Re+=a*R,Ue+=a*Ye,Xe+=a*at,je+=a*ft,Fe+=a*We,we+=a*it,He+=a*ot,ye+=a*Rt,ge+=a*gt,Pe+=a*Ft,pe+=a*jt,ee+=a*Ut,re+=a*Dt,fe+=a*_t,oe+=a*$t,se+=a*er,a=H[11],Ue+=a*R,Xe+=a*Ye,je+=a*at,Fe+=a*ft,we+=a*We,He+=a*it,ye+=a*ot,ge+=a*Rt,Pe+=a*gt,pe+=a*Ft,ee+=a*jt,re+=a*Ut,fe+=a*Dt,oe+=a*_t,se+=a*$t,ce+=a*er,a=H[12],Xe+=a*R,je+=a*Ye,Fe+=a*at,we+=a*ft,He+=a*We,ye+=a*it,ge+=a*ot,Pe+=a*Rt,pe+=a*gt,ee+=a*Ft,re+=a*jt,fe+=a*Ut,oe+=a*Dt,se+=a*_t,ce+=a*$t,Te+=a*er,a=H[13],je+=a*R,Fe+=a*Ye,we+=a*at,He+=a*ft,ye+=a*We,ge+=a*it,Pe+=a*ot,pe+=a*Rt,ee+=a*gt,re+=a*Ft,fe+=a*jt,oe+=a*Ut,se+=a*Dt,ce+=a*_t,Te+=a*$t,De+=a*er,a=H[14],Fe+=a*R,we+=a*Ye,He+=a*at,ye+=a*ft,ge+=a*We,Pe+=a*it,pe+=a*ot,ee+=a*Rt,re+=a*gt,fe+=a*Ft,oe+=a*jt,se+=a*Ut,ce+=a*Dt,Te+=a*_t,De+=a*$t,qe+=a*er,a=H[15],we+=a*R,He+=a*Ye,ye+=a*at,ge+=a*ft,Pe+=a*We,pe+=a*it,ee+=a*ot,re+=a*Rt,fe+=a*gt,oe+=a*Ft,se+=a*jt,ce+=a*Ut,Te+=a*Dt,De+=a*_t,qe+=a*$t,Ie+=a*er,K+=38*He,W+=38*ye,ne+=38*ge,ue+=38*Pe,de+=38*pe,le+=38*ee,$e+=38*re,me+=38*fe,Oe+=38*oe,Se+=38*se,Re+=38*ce,Ue+=38*Te,Xe+=38*De,je+=38*qe,Fe+=38*Ie,B=1,a=K+B+65535,B=Math.floor(a/65536),K=a-B*65536,a=W+B+65535,B=Math.floor(a/65536),W=a-B*65536,a=ne+B+65535,B=Math.floor(a/65536),ne=a-B*65536,a=ue+B+65535,B=Math.floor(a/65536),ue=a-B*65536,a=de+B+65535,B=Math.floor(a/65536),de=a-B*65536,a=le+B+65535,B=Math.floor(a/65536),le=a-B*65536,a=$e+B+65535,B=Math.floor(a/65536),$e=a-B*65536,a=me+B+65535,B=Math.floor(a/65536),me=a-B*65536,a=Oe+B+65535,B=Math.floor(a/65536),Oe=a-B*65536,a=Se+B+65535,B=Math.floor(a/65536),Se=a-B*65536,a=Re+B+65535,B=Math.floor(a/65536),Re=a-B*65536,a=Ue+B+65535,B=Math.floor(a/65536),Ue=a-B*65536,a=Xe+B+65535,B=Math.floor(a/65536),Xe=a-B*65536,a=je+B+65535,B=Math.floor(a/65536),je=a-B*65536,a=Fe+B+65535,B=Math.floor(a/65536),Fe=a-B*65536,a=we+B+65535,B=Math.floor(a/65536),we=a-B*65536,K+=B-1+37*(B-1),B=1,a=K+B+65535,B=Math.floor(a/65536),K=a-B*65536,a=W+B+65535,B=Math.floor(a/65536),W=a-B*65536,a=ne+B+65535,B=Math.floor(a/65536),ne=a-B*65536,a=ue+B+65535,B=Math.floor(a/65536),ue=a-B*65536,a=de+B+65535,B=Math.floor(a/65536),de=a-B*65536,a=le+B+65535,B=Math.floor(a/65536),le=a-B*65536,a=$e+B+65535,B=Math.floor(a/65536),$e=a-B*65536,a=me+B+65535,B=Math.floor(a/65536),me=a-B*65536,a=Oe+B+65535,B=Math.floor(a/65536),Oe=a-B*65536,a=Se+B+65535,B=Math.floor(a/65536),Se=a-B*65536,a=Re+B+65535,B=Math.floor(a/65536),Re=a-B*65536,a=Ue+B+65535,B=Math.floor(a/65536),Ue=a-B*65536,a=Xe+B+65535,B=Math.floor(a/65536),Xe=a-B*65536,a=je+B+65535,B=Math.floor(a/65536),je=a-B*65536,a=Fe+B+65535,B=Math.floor(a/65536),Fe=a-B*65536,a=we+B+65535,B=Math.floor(a/65536),we=a-B*65536,K+=B-1+37*(B-1),p[0]=K,p[1]=W,p[2]=ne,p[3]=ue,p[4]=de,p[5]=le,p[6]=$e,p[7]=me,p[8]=Oe,p[9]=Se,p[10]=Re,p[11]=Ue,p[12]=Xe,p[13]=je,p[14]=Fe,p[15]=we}function he(p,H){ae(p,H,H)}function Je(p,H){var k=r(),a;for(a=0;a<16;a++)k[a]=H[a];for(a=253;a>=0;a--)he(k,k),a!==2&&a!==4&&ae(k,k,H);for(a=0;a<16;a++)p[a]=k[a]}function ve(p,H){var k=r(),a;for(a=0;a<16;a++)k[a]=H[a];for(a=250;a>=0;a--)he(k,k),a!==1&&ae(k,k,H);for(a=0;a<16;a++)p[a]=k[a]}function Ke(p,H,k){var a=new Uint8Array(32),B=new Float64Array(80),K,W,ne=r(),ue=r(),de=r(),le=r(),$e=r(),me=r();for(W=0;W<31;W++)a[W]=H[W];for(a[31]=H[31]&127|64,a[0]&=248,c(B,k),W=0;W<16;W++)ue[W]=B[W],le[W]=ne[W]=de[W]=0;for(ne[0]=le[0]=1,W=254;W>=0;--W)K=a[W>>>3]>>>(W&7)&1,A(ne,ue,K),A(de,le,K),M($e,ne,de),Q(ne,ne,de),M(de,ue,le),Q(ue,ue,le),he(le,$e),he(me,ne),ae(ne,de,ne),ae(de,ue,$e),M($e,ne,de),Q(ne,ne,de),he(ue,ne),Q(de,le,me),ae(ne,de,y),M(ne,ne,le),ae(de,de,ne),ae(ne,le,me),ae(le,ue,B),he(ue,$e),A(ne,ue,K),A(de,le,K);for(W=0;W<16;W++)B[W+16]=ne[W],B[W+32]=de[W],B[W+48]=ue[W],B[W+64]=le[W];var Oe=B.subarray(32),Se=B.subarray(16);return Je(Oe,Oe),ae(Se,Se,Oe),D(p,Se),0}function Gt(p,H){return Ke(p,H,i)}function mt(p,H){return n(H,32),Gt(p,H)}function tt(p,H,k){var a=new Uint8Array(32);return Ke(a,k,H),G(p,o,a,Y)}var At=s,Ce=d;function wt(p,H,k,a,B,K){var W=new Uint8Array(32);return tt(W,B,K),At(p,H,k,a,W)}function fr(p,H,k,a,B,K){var W=new Uint8Array(32);return tt(W,B,K),Ce(p,H,k,a,W)}var ct=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function pt(p,H,k,a){for(var B=new Int32Array(16),K=new Int32Array(16),W,ne,ue,de,le,$e,me,Oe,Se,Re,Ue,Xe,je,Fe,we,He,ye,ge,Pe,pe,ee,re,fe,oe,se,ce,Te=p[0],De=p[1],qe=p[2],Ie=p[3],R=p[4],Ye=p[5],at=p[6],ft=p[7],We=H[0],it=H[1],ot=H[2],Rt=H[3],gt=H[4],Ft=H[5],jt=H[6],Ut=H[7],Dt=0;a>=128;){for(Pe=0;Pe<16;Pe++)pe=8*Pe+Dt,B[Pe]=k[pe+0]<<24|k[pe+1]<<16|k[pe+2]<<8|k[pe+3],K[Pe]=k[pe+4]<<24|k[pe+5]<<16|k[pe+6]<<8|k[pe+7];for(Pe=0;Pe<80;Pe++)if(W=Te,ne=De,ue=qe,de=Ie,le=R,$e=Ye,me=at,Oe=ft,Se=We,Re=it,Ue=ot,Xe=Rt,je=gt,Fe=Ft,we=jt,He=Ut,ee=ft,re=Ut,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=(R>>>14|gt<<32-14)^(R>>>18|gt<<32-18)^(gt>>>41-32|R<<32-(41-32)),re=(gt>>>14|R<<32-14)^(gt>>>18|R<<32-18)^(R>>>41-32|gt<<32-(41-32)),fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ee=R&Ye^~R&at,re=gt&Ft^~gt&jt,fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ee=ct[Pe*2],re=ct[Pe*2+1],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ee=B[Pe%16],re=K[Pe%16],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,ye=se&65535|ce<<16,ge=fe&65535|oe<<16,ee=ye,re=ge,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=(Te>>>28|We<<32-28)^(We>>>34-32|Te<<32-(34-32))^(We>>>39-32|Te<<32-(39-32)),re=(We>>>28|Te<<32-28)^(Te>>>34-32|We<<32-(34-32))^(Te>>>39-32|We<<32-(39-32)),fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ee=Te&De^Te&qe^De&qe,re=We&it^We&ot^it&ot,fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,Oe=se&65535|ce<<16,He=fe&65535|oe<<16,ee=de,re=Xe,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=ye,re=ge,fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,de=se&65535|ce<<16,Xe=fe&65535|oe<<16,De=W,qe=ne,Ie=ue,R=de,Ye=le,at=$e,ft=me,Te=Oe,it=Se,ot=Re,Rt=Ue,gt=Xe,Ft=je,jt=Fe,Ut=we,We=He,Pe%16===15)for(pe=0;pe<16;pe++)ee=B[pe],re=K[pe],fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=B[(pe+9)%16],re=K[(pe+9)%16],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ye=B[(pe+1)%16],ge=K[(pe+1)%16],ee=(ye>>>1|ge<<32-1)^(ye>>>8|ge<<32-8)^ye>>>7,re=(ge>>>1|ye<<32-1)^(ge>>>8|ye<<32-8)^(ge>>>7|ye<<32-7),fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,ye=B[(pe+14)%16],ge=K[(pe+14)%16],ee=(ye>>>19|ge<<32-19)^(ge>>>61-32|ye<<32-(61-32))^ye>>>6,re=(ge>>>19|ye<<32-19)^(ye>>>61-32|ge<<32-(61-32))^(ge>>>6|ye<<32-6),fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,B[pe]=se&65535|ce<<16,K[pe]=fe&65535|oe<<16;ee=Te,re=We,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[0],re=H[0],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[0]=Te=se&65535|ce<<16,H[0]=We=fe&65535|oe<<16,ee=De,re=it,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[1],re=H[1],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[1]=De=se&65535|ce<<16,H[1]=it=fe&65535|oe<<16,ee=qe,re=ot,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[2],re=H[2],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[2]=qe=se&65535|ce<<16,H[2]=ot=fe&65535|oe<<16,ee=Ie,re=Rt,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[3],re=H[3],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[3]=Ie=se&65535|ce<<16,H[3]=Rt=fe&65535|oe<<16,ee=R,re=gt,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[4],re=H[4],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[4]=R=se&65535|ce<<16,H[4]=gt=fe&65535|oe<<16,ee=Ye,re=Ft,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[5],re=H[5],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[5]=Ye=se&65535|ce<<16,H[5]=Ft=fe&65535|oe<<16,ee=at,re=jt,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[6],re=H[6],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[6]=at=se&65535|ce<<16,H[6]=jt=fe&65535|oe<<16,ee=ft,re=Ut,fe=re&65535,oe=re>>>16,se=ee&65535,ce=ee>>>16,ee=p[7],re=H[7],fe+=re&65535,oe+=re>>>16,se+=ee&65535,ce+=ee>>>16,oe+=fe>>>16,se+=oe>>>16,ce+=se>>>16,p[7]=ft=se&65535|ce<<16,H[7]=Ut=fe&65535|oe<<16,Dt+=128,a-=128}return a}function Qt(p,H,k){var a=new Int32Array(8),B=new Int32Array(8),K=new Uint8Array(256),W,ne=k;for(a[0]=1779033703,a[1]=3144134277,a[2]=1013904242,a[3]=2773480762,a[4]=1359893119,a[5]=2600822924,a[6]=528734635,a[7]=1541459225,B[0]=4089235720,B[1]=2227873595,B[2]=4271175723,B[3]=1595750129,B[4]=2917565137,B[5]=725511199,B[6]=4215389547,B[7]=327033209,pt(a,B,H,k),k%=128,W=0;W<k;W++)K[W]=H[ne-k+W];for(K[k]=128,k=256-128*(k<112?1:0),K[k-9]=0,N(K,k-8,ne/536870912|0,ne<<3),pt(a,B,K,k),W=0;W<8;W++)N(p,8*W,a[W],B[W]);return 0}function rt(p,H){var k=r(),a=r(),B=r(),K=r(),W=r(),ne=r(),ue=r(),de=r(),le=r();Q(k,p[1],p[0]),Q(le,H[1],H[0]),ae(k,k,le),M(a,p[0],p[1]),M(le,H[0],H[1]),ae(a,a,le),ae(B,p[3],H[3]),ae(B,B,v),ae(K,p[2],H[2]),M(K,K,K),Q(W,a,k),Q(ne,K,B),M(ue,K,B),M(de,a,k),ae(p[0],W,ne),ae(p[1],de,ue),ae(p[2],ue,ne),ae(p[3],W,de)}function Ve(p,H,k){var a;for(a=0;a<4;a++)A(p[a],H[a],k)}function vt(p,H){var k=r(),a=r(),B=r();Je(B,H[2]),ae(k,H[0],B),ae(a,H[1],B),D(p,a),p[31]^=g(k)<<7}function Qe(p,H,k){var a,B;for(z(p[0],l),z(p[1],f),z(p[2],f),z(p[3],l),B=255;B>=0;--B)a=k[B/8|0]>>(B&7)&1,Ve(p,H,a),rt(H,p),rt(p,p),Ve(p,H,a)}function ut(p,H){var k=[r(),r(),r(),r()];z(k[0],m),z(k[1],w),z(k[2],f),ae(k[3],m,w),Qe(p,k,H)}function qt(p,H,k){var a=new Uint8Array(64),B=[r(),r(),r(),r()],K;for(k||n(H,32),Qt(a,H,32),a[0]&=248,a[31]&=127,a[31]|=64,ut(B,a),vt(p,B),K=0;K<32;K++)H[K+32]=p[K];return 0}var nt=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function P(p,H){var k,a,B,K;for(a=63;a>=32;--a){for(k=0,B=a-32,K=a-12;B<K;++B)H[B]+=k-16*H[a]*nt[B-(a-32)],k=Math.floor((H[B]+128)/256),H[B]-=k*256;H[B]+=k,H[a]=0}for(k=0,B=0;B<32;B++)H[B]+=k-(H[31]>>4)*nt[B],k=H[B]>>8,H[B]&=255;for(B=0;B<32;B++)H[B]-=k*nt[B];for(a=0;a<32;a++)H[a+1]+=H[a]>>8,p[a]=H[a]&255}function u(p){var H=new Float64Array(64),k;for(k=0;k<64;k++)H[k]=p[k];for(k=0;k<64;k++)p[k]=0;P(p,H)}function h(p,H,k,a){var B=new Uint8Array(64),K=new Uint8Array(64),W=new Uint8Array(64),ne,ue,de=new Float64Array(64),le=[r(),r(),r(),r()];Qt(B,a,32),B[0]&=248,B[31]&=127,B[31]|=64;var $e=k+64;for(ne=0;ne<k;ne++)p[64+ne]=H[ne];for(ne=0;ne<32;ne++)p[32+ne]=B[32+ne];for(Qt(W,p.subarray(32),k+32),u(W),ut(le,W),vt(p,le),ne=32;ne<64;ne++)p[ne]=a[ne];for(Qt(K,p,k+64),u(K),ne=0;ne<64;ne++)de[ne]=0;for(ne=0;ne<32;ne++)de[ne]=W[ne];for(ne=0;ne<32;ne++)for(ue=0;ue<32;ue++)de[ne+ue]+=K[ne]*B[ue];return P(p.subarray(32),de),$e}function T(p,H){var k=r(),a=r(),B=r(),K=r(),W=r(),ne=r(),ue=r();return z(p[2],f),c(p[1],H),he(B,p[1]),ae(K,B,x),Q(B,B,p[2]),M(K,p[2],K),he(W,K),he(ne,W),ae(ue,ne,W),ae(k,ue,B),ae(k,k,K),ve(k,k),ae(k,k,B),ae(k,k,K),ae(k,k,K),ae(p[0],k,K),he(a,p[0]),ae(a,a,K),q(a,B)&&ae(p[0],p[0],E),he(a,p[0]),ae(a,a,K),q(a,B)?-1:(g(p[0])===H[31]>>7&&Q(p[0],l,p[0]),ae(p[3],p[0],p[1]),0)}function I(p,H,k,a){var B,K=new Uint8Array(32),W=new Uint8Array(64),ne=[r(),r(),r(),r()],ue=[r(),r(),r(),r()];if(k<64||T(ue,a))return-1;for(B=0;B<k;B++)p[B]=H[B];for(B=0;B<32;B++)p[B+32]=a[B];if(Qt(W,p,k),u(W),Qe(ne,ue,W),ut(ue,H.subarray(32)),rt(ne,ue),vt(K,ne),k-=64,V(H,0,K,0)){for(B=0;B<k;B++)p[B]=0;return-1}for(B=0;B<k;B++)p[B]=H[B+64];return k}var J=32,te=24,Ae=32,Be=16,Ne=32,lt=32,Me=32,zt=32,kr=32,Tt=te,Lt=Ae,n0=Be,ht=64,yt=32,cr=64,Mt=32,Et=64;t.lowlevel={crypto_core_hsalsa20:G,crypto_stream_xor:S,crypto_stream:ie,crypto_stream_salsa20_xor:_,crypto_stream_salsa20:$,crypto_onetimeauth:Z,crypto_onetimeauth_verify:b,crypto_verify_16:C,crypto_verify_32:V,crypto_secretbox:s,crypto_secretbox_open:d,crypto_scalarmult:Ke,crypto_scalarmult_base:Gt,crypto_box_beforenm:tt,crypto_box_afternm:At,crypto_box:wt,crypto_box_open:fr,crypto_box_keypair:mt,crypto_hash:Qt,crypto_sign:h,crypto_sign_keypair:qt,crypto_sign_open:I,crypto_secretbox_KEYBYTES:J,crypto_secretbox_NONCEBYTES:te,crypto_secretbox_ZEROBYTES:Ae,crypto_secretbox_BOXZEROBYTES:Be,crypto_scalarmult_BYTES:Ne,crypto_scalarmult_SCALARBYTES:lt,crypto_box_PUBLICKEYBYTES:Me,crypto_box_SECRETKEYBYTES:zt,crypto_box_BEFORENMBYTES:kr,crypto_box_NONCEBYTES:Tt,crypto_box_ZEROBYTES:Lt,crypto_box_BOXZEROBYTES:n0,crypto_sign_BYTES:ht,crypto_sign_PUBLICKEYBYTES:yt,crypto_sign_SECRETKEYBYTES:cr,crypto_sign_SEEDBYTES:Mt,crypto_hash_BYTES:Et,gf:r,D:x,L:nt,pack25519:D,unpack25519:c,M:ae,A:M,S:he,Z:Q,pow2523:ve,add:rt,set25519:z,modL:P,scalarmult:Qe,scalarbase:ut};function Lr(p,H){if(p.length!==J)throw new Error("bad key size");if(H.length!==te)throw new Error("bad nonce size")}function St(p,H){if(p.length!==Me)throw new Error("bad public key size");if(H.length!==zt)throw new Error("bad secret key size")}function _e(){for(var p=0;p<arguments.length;p++)if(!(arguments[p]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function Ct(p){for(var H=0;H<p.length;H++)p[H]=0}t.randomBytes=function(p){var H=new Uint8Array(p);return n(H,p),H},t.secretbox=function(p,H,k){_e(p,H,k),Lr(k,H);for(var a=new Uint8Array(Ae+p.length),B=new Uint8Array(a.length),K=0;K<p.length;K++)a[K+Ae]=p[K];return s(B,a,a.length,H,k),B.subarray(Be)},t.secretbox.open=function(p,H,k){_e(p,H,k),Lr(k,H);for(var a=new Uint8Array(Be+p.length),B=new Uint8Array(a.length),K=0;K<p.length;K++)a[K+Be]=p[K];return a.length<32||d(B,a,a.length,H,k)!==0?null:B.subarray(Ae)},t.secretbox.keyLength=J,t.secretbox.nonceLength=te,t.secretbox.overheadLength=Be,t.scalarMult=function(p,H){if(_e(p,H),p.length!==lt)throw new Error("bad n size");if(H.length!==Ne)throw new Error("bad p size");var k=new Uint8Array(Ne);return Ke(k,p,H),k},t.scalarMult.base=function(p){if(_e(p),p.length!==lt)throw new Error("bad n size");var H=new Uint8Array(Ne);return Gt(H,p),H},t.scalarMult.scalarLength=lt,t.scalarMult.groupElementLength=Ne,t.box=function(p,H,k,a){var B=t.box.before(k,a);return t.secretbox(p,H,B)},t.box.before=function(p,H){_e(p,H),St(p,H);var k=new Uint8Array(kr);return tt(k,p,H),k},t.box.after=t.secretbox,t.box.open=function(p,H,k,a){var B=t.box.before(k,a);return t.secretbox.open(p,H,B)},t.box.open.after=t.secretbox.open,t.box.keyPair=function(){var p=new Uint8Array(Me),H=new Uint8Array(zt);return mt(p,H),{publicKey:p,secretKey:H}},t.box.keyPair.fromSecretKey=function(p){if(_e(p),p.length!==zt)throw new Error("bad secret key size");var H=new Uint8Array(Me);return Gt(H,p),{publicKey:H,secretKey:new Uint8Array(p)}},t.box.publicKeyLength=Me,t.box.secretKeyLength=zt,t.box.sharedKeyLength=kr,t.box.nonceLength=Tt,t.box.overheadLength=t.secretbox.overheadLength,t.sign=function(p,H){if(_e(p,H),H.length!==cr)throw new Error("bad secret key size");var k=new Uint8Array(ht+p.length);return h(k,p,p.length,H),k},t.sign.open=function(p,H){if(_e(p,H),H.length!==yt)throw new Error("bad public key size");var k=new Uint8Array(p.length),a=I(k,p,p.length,H);if(a<0)return null;for(var B=new Uint8Array(a),K=0;K<B.length;K++)B[K]=k[K];return B},t.sign.detached=function(p,H){for(var k=t.sign(p,H),a=new Uint8Array(ht),B=0;B<a.length;B++)a[B]=k[B];return a},t.sign.detached.verify=function(p,H,k){if(_e(p,H,k),H.length!==ht)throw new Error("bad signature size");if(k.length!==yt)throw new Error("bad public key size");var a=new Uint8Array(ht+p.length),B=new Uint8Array(ht+p.length),K;for(K=0;K<ht;K++)a[K]=H[K];for(K=0;K<p.length;K++)a[K+ht]=p[K];return I(B,a,a.length,k)>=0},t.sign.keyPair=function(){var p=new Uint8Array(yt),H=new Uint8Array(cr);return qt(p,H),{publicKey:p,secretKey:H}},t.sign.keyPair.fromSecretKey=function(p){if(_e(p),p.length!==cr)throw new Error("bad secret key size");for(var H=new Uint8Array(yt),k=0;k<H.length;k++)H[k]=p[32+k];return{publicKey:H,secretKey:new Uint8Array(p)}},t.sign.keyPair.fromSeed=function(p){if(_e(p),p.length!==Mt)throw new Error("bad seed size");for(var H=new Uint8Array(yt),k=new Uint8Array(cr),a=0;a<32;a++)k[a]=p[a];return qt(H,k,!0),{publicKey:H,secretKey:k}},t.sign.publicKeyLength=yt,t.sign.secretKeyLength=cr,t.sign.seedLength=Mt,t.sign.signatureLength=ht,t.hash=function(p){_e(p);var H=new Uint8Array(Et);return Qt(H,p,p.length),H},t.hash.hashLength=Et,t.verify=function(p,H){return _e(p,H),p.length===0||H.length===0||p.length!==H.length?!1:O(p,0,H,0,p.length)===0},t.setPRNG=function(p){n=p},function(){var p=typeof self<"u"?self.crypto||self.msCrypto:null;if(p&&p.getRandomValues){var H=65536;t.setPRNG(function(k,a){var B,K=new Uint8Array(a);for(B=0;B<a;B+=H)p.getRandomValues(K.subarray(B,B+Math.min(a-B,H)));for(B=0;B<a;B++)k[B]=K[B];Ct(K)})}else typeof Jf<"u"&&(p=go,p&&p.randomBytes&&t.setPRNG(function(k,a){var B,K=p.randomBytes(a);for(B=0;B<a;B++)k[B]=K[B];Ct(K)}))}()})(e.exports?e.exports:self.nacl=self.nacl||{})})(Bo);const t0=Bo.exports;(function(e){(function(t,r){e.exports?e.exports=r(Bo.exports):t.ed2curve=r(t.nacl)})(Ge,function(t){if(!t)throw new Error("tweetnacl not loaded");var r=function(S){var U,Z=new Float64Array(16);if(S)for(U=0;U<S.length;U++)Z[U]=S[U];return Z},n=r(),o=r([1]),i=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),l=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function f(S){var U,Z;for(Z=0;Z<16;Z++)S[Z]+=65536,U=Math.floor(S[Z]/65536),S[(Z+1)*(Z<15?1:0)]+=U-1+37*(U-1)*(Z===15?1:0),S[Z]-=U*65536}function y(S,U,Z){for(var b,s=~(Z-1),d=0;d<16;d++)b=s&(S[d]^U[d]),S[d]^=b,U[d]^=b}function x(S,U){var Z;for(Z=0;Z<16;Z++)S[Z]=U[2*Z]+(U[2*Z+1]<<8);S[15]&=32767}function v(S,U,Z){var b;for(b=0;b<16;b++)S[b]=U[b]+Z[b]|0}function m(S,U,Z){var b;for(b=0;b<16;b++)S[b]=U[b]-Z[b]|0}function w(S,U,Z){var b,s,d=new Float64Array(31);for(b=0;b<31;b++)d[b]=0;for(b=0;b<16;b++)for(s=0;s<16;s++)d[b+s]+=U[b]*Z[s];for(b=0;b<15;b++)d[b]+=38*d[b+16];for(b=0;b<16;b++)S[b]=d[b];f(S),f(S)}function E(S,U){w(S,U,U)}function N(S,U){var Z=r(),b;for(b=0;b<16;b++)Z[b]=U[b];for(b=253;b>=0;b--)E(Z,Z),b!==2&&b!==4&&w(Z,Z,U);for(b=0;b<16;b++)S[b]=Z[b]}function O(S,U){var Z,b,s,d=r(),z=r();for(Z=0;Z<16;Z++)z[Z]=U[Z];for(f(z),f(z),f(z),b=0;b<2;b++){for(d[0]=z[0]-65517,Z=1;Z<15;Z++)d[Z]=z[Z]-65535-(d[Z-1]>>16&1),d[Z-1]&=65535;d[15]=z[15]-32767-(d[14]>>16&1),s=d[15]>>16&1,d[14]&=65535,y(z,d,1-s)}for(Z=0;Z<16;Z++)S[2*Z]=z[Z]&255,S[2*Z+1]=z[Z]>>8}function C(S){var U=new Uint8Array(32);return O(U,S),U[0]&1}function V(S,U,Z,b,s){var d,z=0;for(d=0;d<s;d++)z|=S[U+d]^Z[b+d];return(1&z-1>>>8)-1}function j(S,U,Z,b){return V(S,U,Z,b,32)}function X(S,U){var Z=new Uint8Array(32),b=new Uint8Array(32);return O(Z,S),O(b,U),j(Z,0,b,0)}function F(S,U){var Z=r(),b;for(b=0;b<16;b++)Z[b]=U[b];for(b=250;b>=0;b--)E(Z,Z),b!==1&&w(Z,Z,U);for(b=0;b<16;b++)S[b]=Z[b]}function G(S,U){var Z;for(Z=0;Z<16;Z++)S[Z]=U[Z]|0}function Y(S,U){var Z=r(),b=r(),s=r(),d=r(),z=r(),L=r(),A=r();return G(S[2],o),x(S[1],U),E(s,S[1]),w(d,s,i),m(s,s,S[2]),v(d,S[2],d),E(z,d),E(L,z),w(A,L,z),w(Z,A,s),w(Z,Z,d),F(Z,Z),w(Z,Z,s),w(Z,Z,d),w(Z,Z,d),w(S[0],Z,d),E(b,S[0]),w(b,b,d),X(b,s)&&w(S[0],S[0],l),E(b,S[0]),w(b,b,d),X(b,s)?-1:(C(S[0])===U[31]>>7&&m(S[0],n,S[0]),w(S[3],S[0],S[1]),0)}function _(S){var U=new Uint8Array(32),Z=[r(),r(),r(),r()],b=r(),s=r();if(Y(Z,S))return null;var d=Z[1];return v(b,o,d),m(s,o,d),N(s,s),w(b,b,s),O(U,b),U}function $(S){var U=new Uint8Array(64),Z=new Uint8Array(32),b;for(t.lowlevel.crypto_hash(U,S,32),U[0]&=248,U[31]&=127,U[31]|=64,b=0;b<32;b++)Z[b]=U[b];for(b=0;b<64;b++)U[b]=0;return Z}function ie(S){var U=_(S.publicKey);return U?{publicKey:U,secretKey:$(S.secretKey)}:null}return{convertPublicKey:_,convertSecretKey:$,convertKeyPair:ie}})})(Kf);const Qf=Kf.exports;function Ss(e){return Qf.convertSecretKey(e)}function Xs(e){return qu(Qf.convertPublicKey(e),"Unable to convert publicKey to ed25519")}const J1=Po(pr("Ed25519HDKD"));function Q1(e,t){return et(qr(t)&&t.length===32,"Invalid chainCode passed to derive"),e0(Wt(J1,e,t))}function Bn(e=32){return gf(new Uint8Array(e))}function No(e,t){if(!t&&Kt()){const r=rh(e);return{publicKey:r.slice(32),secretKey:r.slice(0,64)}}return t0.sign.keyPair.fromSeed(e)}function _1(e,{publicKey:t,secretKey:r},n){et(r,"Expected a valid secretKey");const o=Le(e);return!n&&Kt()?nh(t,r.subarray(0,32),o):t0.sign.detached(o,r)}function _f(e,t,r,n){const o=Le(e),i=Le(r),l=Le(t);return et(i.length===32,()=>`Invalid publicKey, received ${i.length}, expected 32`),et(l.length===64,()=>`Invalid signature, received ${l.length} bytes, expected 64`),!n&&Kt()?ih(l,o,i):t0.sign.detached.verify(o,l,i)}const $1=Yf(No,Q1),fo=64,ed=32,fi=fo+ed;function $f(e){const t=Le(e);if(t.length!==fi)throw new Error(`Expected keypair with ${fi} bytes, found ${t.length}`);return{publicKey:t.slice(fo,fi),secretKey:t.slice(0,fo)}}function td({publicKey:e,secretKey:t}){return Wt(t,e).slice()}function ec(e){return(t,r)=>{if(!qr(r)||r.length!==32)throw new Error("Invalid chainCode passed to derive");return $f(e(td(t),r))}}const rd=ec(uh),nd=ec(lh);function id(e,{chainCode:t,isSoft:r}){return r?nd(e,t):rd(e,t)}const od={ecdsa:As,ed25519:$1,ethereum:As,sr25519:id};function tc(e,t,r){const n=od[r];let o=e;for(const i of t)o=n(o,i);return o}function rc(e){const t=Le(e);if(t.length!==32)throw new Error(`Expected a seed matching 32 bytes, found ${t.length}`);return $f(hh(t))}function sd(e,{publicKey:t,secretKey:r}){if((t==null?void 0:t.length)!==32)throw new Error("Expected a valid publicKey, 32-bytes");if((r==null?void 0:r.length)!==64)throw new Error("Expected a valid secretKey, 64-bytes");return dh(t,r,Le(e))}function nc(e,t,r){const n=Le(r),o=Le(t);if(n.length!==32)throw new Error(`Invalid publicKey, received ${n.length} bytes, expected 32`);if(o.length!==64)throw new Error(`Invalid signature, received ${o.length} bytes, expected 64`);return xh(o,Le(e),n)}const Fs=new Uint8Array;function ad(e,{secretKey:t},r=Fs,n=Fs){if((t==null?void 0:t.length)!==64)throw new Error("Invalid secretKey, expected 64-bytes");return ph(t,Le(r),Le(e),Le(n))}const js=new Uint8Array;function fd(e,t,r,n=js,o=js){const i=Le(r),l=Le(t);if(i.length!==32)throw new Error("Invalid publicKey, expected 32-bytes");if(l.length!==96)throw new Error("Invalid vrfSign output, expected 96 bytes");return vh(i,Le(n),Le(e),Le(o),l)}function cd(e,t=sn.prefix){const r=d0(e);et(t>=0&&t<=16383&&![46,47].includes(t),"Out of range ss58Format specified"),et(sn.allowedDecodedLengths.includes(r.length),()=>`Expected a valid key to convert, with length ${sn.allowedDecodedLengths.join(", ")}`);const n=Wt(t<64?[t]:[(t&252)>>2|64,t>>8|(t&3)<<6],r);return P1(Wt(n,Vf(n).subarray(0,[32,33].includes(r.length)?2:1)))}const[ic,oc,sc]=[[],[],[]],ud=BigInt(0),B0=BigInt(1),ld=BigInt(2),hd=BigInt(7),dd=BigInt(256),xd=BigInt(113);for(let e=0,t=B0,r=1,n=0;e<24;e++){[r,n]=[n,(2*r+3*n)%5],ic.push(2*(5*n+r)),oc.push((e+1)*(e+2)/2%64);let o=ud;for(let i=0;i<7;i++)t=(t<<B0^(t>>hd)*xd)%dd,t&ld&&(o^=B0<<(B0<<BigInt(i))-B0);sc.push(o)}const[pd,vd]=ke.split(sc,!0),Us=(e,t,r)=>r>32?ke.rotlBH(e,t,r):ke.rotlSH(e,t,r),Rs=(e,t,r)=>r>32?ke.rotlBL(e,t,r):ke.rotlSL(e,t,r);function yd(e,t=24){const r=new Uint32Array(10);for(let n=24-t;n<24;n++){for(let l=0;l<10;l++)r[l]=e[l]^e[l+10]^e[l+20]^e[l+30]^e[l+40];for(let l=0;l<10;l+=2){const f=(l+8)%10,y=(l+2)%10,x=r[y],v=r[y+1],m=Us(x,v,1)^r[f],w=Rs(x,v,1)^r[f+1];for(let E=0;E<50;E+=10)e[l+E]^=m,e[l+E+1]^=w}let o=e[2],i=e[3];for(let l=0;l<24;l++){const f=oc[l],y=Us(o,i,f),x=Rs(o,i,f),v=ic[l];o=e[v],i=e[v+1],e[v]=y,e[v+1]=x}for(let l=0;l<50;l+=10){for(let f=0;f<10;f++)r[f]=e[l+f];for(let f=0;f<10;f++)e[l+f]^=~r[(f+2)%10]&r[(f+4)%10]}e[0]^=pd[n],e[1]^=vd[n]}r.fill(0)}class Nn extends R0{constructor(t,r,n,o=!1,i=24){if(super(),this.blockLen=t,this.suffix=r,this.outputLen=n,this.enableXOF=o,this.rounds=i,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,Pt.number(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=Ir(this.state)}keccak(){yd(this.state32,this.rounds),this.posOut=0,this.pos=0}update(t){Pt.exists(this);const{blockLen:r,state:n}=this;t=yr(t);const o=t.length;for(let i=0;i<o;){const l=Math.min(r-this.pos,o-i);for(let f=0;f<l;f++)n[this.pos++]^=t[i++];this.pos===r&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:r,pos:n,blockLen:o}=this;t[n]^=r,(r&128)!==0&&n===o-1&&this.keccak(),t[o-1]^=128,this.keccak()}writeInto(t){Pt.exists(this,!1),Pt.bytes(t),this.finish();const r=this.state,{blockLen:n}=this;for(let o=0,i=t.length;o<i;){this.posOut>=n&&this.keccak();const l=Math.min(n-this.posOut,i-o);t.set(r.subarray(this.posOut,this.posOut+l),o),this.posOut+=l,o+=l}return t}xofInto(t){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(t)}xof(t){return Pt.number(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(Pt.output(t,this),this.finished)throw new Error("digest() was already called");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:r,suffix:n,outputLen:o,rounds:i,enableXOF:l}=this;return t||(t=new Nn(r,n,o,l,i)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=i,t.suffix=n,t.outputLen=o,t.enableXOF=l,t.destroyed=this.destroyed,t}}const Gr=(e,t,r)=>Y0(()=>new Nn(t,e,r));Gr(6,144,224/8);Gr(6,136,256/8);Gr(6,104,384/8);Gr(6,72,512/8);Gr(1,144,224/8);const bd=Gr(1,136,256/8);Gr(1,104,384/8);const md=Gr(1,72,512/8),ac=(e,t,r)=>Of((n={})=>new Nn(t,e,n.dkLen===void 0?r:n.dkLen,!0));ac(31,168,128/8);ac(31,136,256/8);const Tn=qf({256:wh,512:gh},{256:bd,512:md});function co(e,t,r){return e==="keccak"?Tn(t,void 0,r):e0(t,void 0,void 0,r)}const To={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",coder:Rf,type:"base64"},wd=If(To),gd=Cf(To,wd),Pd=Df(To);function fc(e,t){if(e.length===33)return e;if(e.length!==65)throw new Error("Invalid publicKey provided");return!rr||!t&&Kt()?sh(e):kt.fromHex(e).toRawBytes(!0)}function Lo(e,t){if(e.length===65)return e.subarray(1);if(e.length!==33)throw new Error("Invalid publicKey provided");if(!rr||!t&&Kt())return ah(e).subarray(1);const{x:r,y:n}=kt.fromHex(e);return Wt(ar(r,m0),ar(n,m0))}function zd(e,t,r,n="blake2",o){const i=Le(t).subarray(0,64),l=Le(e),f=!rr||!o&&Kt()?fh(l,i,r):Ml(l,zr.fromCompact(i).toRawBytes(),r);if(!f)throw new Error("Unable to recover publicKey from signature");return n==="keccak"?Lo(f,o):fc(f,o)}function Zs(e,{secretKey:t},r="blake2",n){if((t==null?void 0:t.length)!==32)throw new Error("Expected valid secp256k1 secretKey, 32-bytes");const o=co(r,e,n);if(!rr||!n&&Kt())return ch(o,t);const[i,l]=Tl(o,t,{canonical:!0,recovered:!0}),{r:f,s:y}=zr.fromHex(i);return Wt(ar(f,m0),ar(y,m0),new Uint8Array([l||0]))}const cc="ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g,""),ci=Xt(`0x${cc}`),ui=new Ze(cc,"hex");function Hd(e,t){let r=_i(t,Os);if(r>=ci)throw new Error("Tweak parameter is out of range");if(r+=_i(e,Os),r>=ci&&(r-=ci),r===mo)throw new Error("Invalid resulting private key");return ol(r,m0)}function kd(e,t){const r=new Ze(t);if(r.cmp(ui)>=0)throw new Error("Tweak parameter is out of range");if(r.iadd(new Ze(e)),r.cmp(ui)>=0&&r.isub(ui),r.isZero())throw new Error("Invalid resulting private key");return ar(r,m0)}function Md(e,t,r){if(!qr(e)||e.length!==32)throw new Error("Expected seckey to be an Uint8Array with length 32");if(!qr(t)||t.length!==32)throw new Error("Expected tweak to be an Uint8Array with length 32");return!rr||r?kd(e,t):Hd(e,t)}function Ed(e,t,r,n="blake2",o){const i=Le(t);if(i.length!==65)throw new Error(`Expected signature with 65 bytes, ${i.length} found instead`);const l=zd(co(n,e),i,i[64],n,o),f=co(n,l,o),y=Le(r);return Pr(l,y)||(n==="keccak"?Pr(f.slice(-20),y.slice(-20)):Pr(f,y))}function Bd(e){return[33,65].includes(e.length)&&(e=Tn(Lo(e))),e.slice(-20)}function uc(e){if(!e)return"0x";const t=Le(e);et([20,32,33,65].includes(t.length),"Invalid address or publicKey passed");const r=X0(Bd(t),-1,!1),n=X0(Tn(r),-1,!1);let o="";for(let i=0;i<40;i++)o=`${o}${parseInt(n[i],16)>7?r[i].toUpperCase():r[i]}`;return`0x${o}`}const Oo=2147483648;function Nd(e){if(!e.startsWith("m/"))return!1;const t=e.split("/").slice(1);for(const r of t){const n=/^\d+'?$/.test(r)?parseInt(r.replace(/'$/,""),10):Number.NaN;if(isNaN(n)||n>=Oo||n<0)return!1}return!0}const Td=pr("Bitcoin seed");function lc(e,t){return{chainCode:t,publicKey:w0(e).publicKey,secretKey:e}}function hc(e,t){const r=ar(t,C1),n=t>=Oo?Wt(new Uint8Array(1),e.secretKey,r):Wt(e.publicKey,r);try{const o=Ff(e.chainCode,n,512);return lc(Md(e.secretKey,o.slice(0,32)),o.slice(32))}catch{return hc(e,t+1)}}function Ld(e,t=""){const r=Ff(Td,e,512);let n=lc(r.slice(0,32),r.slice(32));if(!t||t==="m"||t==="M"||t==="m'"||t==="M'")return n;et(Nd(t),"Invalid derivation path");const o=t.split("/").slice(1);for(const i of o)n=hc(n,parseInt(i,10)+(i.length>1&&i.endsWith("'")?Oo:0));return n}function Od(e,t,r,n){Pt.hash(e);const o=Lf({dkLen:32,asyncTick:10},n),{c:i,dkLen:l,asyncTick:f}=o;if(Pt.number(i),Pt.number(l),Pt.number(f),i<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const y=yr(t),x=yr(r),v=new Uint8Array(l),m=zo.create(e,y),w=m._cloneInto().update(x);return{c:i,dkLen:l,asyncTick:f,DK:v,PRF:m,PRFSalt:w}}function Ad(e,t,r,n,o){return e.destroy(),t.destroy(),n&&n.destroy(),o.fill(0),r}function Ao(e,t,r,n){const{c:o,dkLen:i,DK:l,PRF:f,PRFSalt:y}=Od(e,t,r,n);let x;const v=new Uint8Array(4),m=on(v),w=new Uint8Array(f.outputLen);for(let E=1,N=0;N<i;E++,N+=f.outputLen){const O=l.subarray(N,N+f.outputLen);m.setInt32(0,E,!1),(x=y._cloneInto(x)).update(v).digestInto(w),O.set(w.subarray(0,O.length));for(let C=1;C<o;C++){f._cloneInto(x).update(w).digestInto(w);for(let V=0;V<O.length;V++)O[V]^=w[V]}}return Ad(f,y,l,x,w)}function dc(e,t=Bn(),r=2048,n){const o=Le(e),i=Le(t);return{password:!rr||!n&&Kt()?Ph(o,i,r):Ao(ko,o,i,{c:r,dkLen:64}),rounds:r,salt:t}}const Sd=qf({256:Hh,512:kh},{256:Mn,512:ko}),Xd=E1(256,Sd),Fd="abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|"),Cs="Invalid mnemonic",jd="Invalid entropy",Ud="Invalid mnemonic checksum";function uo(e){return(e||"").normalize("NFKD")}function Rd(e){return parseInt(e,2)}function Zd(e){return e.map(t=>t.toString(2).padStart(8,"0")).join("")}function Cd(e){return Zd(Array.from(Xd(e))).slice(0,e.length*8/32)}function Ds(e,t){return dc(pr(uo(e)),pr(`mnemonic${uo(t)}`)).password}function xc(e){var t;const r=uo(e).split(" ");et(r.length%3===0,Cs);const n=r.map(v=>{const m=Fd.indexOf(v);return et(m!==-1,Cs),m.toString(2).padStart(11,"0")}).join(""),o=Math.floor(n.length/33)*32,i=n.slice(0,o),l=n.slice(o),f=(t=i.match(/(.{1,8})/g))===null||t===void 0?void 0:t.map(Rd);et(f&&f.length%4===0&&f.length>=16&&f.length<=32,jd);const y=Le(f),x=Cd(y);return et(x===l,Ud),y}function Dd(e){try{xc(e)}catch{return!1}return!0}function Id(e,t){return!rr||!t&&Kt()?_l(e):xc(e)}function pc(e,t){return!rr||!t&&Kt()?th(e):Dd(e)}function qd(e,t="",r,n=32){if(pc(e)){if(![32,64].includes(n))throw new Error(`Invalid seed length ${n}, expected 32 or 64`)}else throw new Error("Invalid bip39 mnemonic specified");return n===32?!rr||!r&&Kt()?eh(e,t):Ds(e,t).subarray(0,32):Ds(e,t)}function Vd(e,t="",r){if(!pc(e))throw new Error("Invalid bip39 mnemonic specified");if(!r&&Kt())return $l(e,t);const n=Id(e),o=pr(`mnemonic${t}`);return dc(n,o).password.slice(0,32)}function Wd(e,t,r){return t0.secretbox.open(e,t,r)||null}function Gd(e,t,r=Bn(24)){return{encrypted:t0.secretbox(e,r,t),nonce:r}}function Yd(e,t,r,n){return t0.box.open(e,t,r,n)||null}function Kd(e,t,r,n=Bn(24)){return{nonce:n,sealed:t0.box(e,n,r,t)}}const dt=(e,t)=>e<<t|e>>>32-t;function Is(e,t,r,n,o,i){let l=e[t++]^r[n++],f=e[t++]^r[n++],y=e[t++]^r[n++],x=e[t++]^r[n++],v=e[t++]^r[n++],m=e[t++]^r[n++],w=e[t++]^r[n++],E=e[t++]^r[n++],N=e[t++]^r[n++],O=e[t++]^r[n++],C=e[t++]^r[n++],V=e[t++]^r[n++],j=e[t++]^r[n++],X=e[t++]^r[n++],F=e[t++]^r[n++],G=e[t++]^r[n++],Y=l,_=f,$=y,ie=x,S=v,U=m,Z=w,b=E,s=N,d=O,z=C,L=V,A=j,D=X,q=F,g=G;for(let c=0;c<8;c+=2)S^=dt(Y+A|0,7),s^=dt(S+Y|0,9),A^=dt(s+S|0,13),Y^=dt(A+s|0,18),d^=dt(U+_|0,7),D^=dt(d+U|0,9),_^=dt(D+d|0,13),U^=dt(_+D|0,18),q^=dt(z+Z|0,7),$^=dt(q+z|0,9),Z^=dt($+q|0,13),z^=dt(Z+$|0,18),ie^=dt(g+L|0,7),b^=dt(ie+g|0,9),L^=dt(b+ie|0,13),g^=dt(L+b|0,18),_^=dt(Y+ie|0,7),$^=dt(_+Y|0,9),ie^=dt($+_|0,13),Y^=dt(ie+$|0,18),Z^=dt(U+S|0,7),b^=dt(Z+U|0,9),S^=dt(b+Z|0,13),U^=dt(S+b|0,18),L^=dt(z+d|0,7),s^=dt(L+z|0,9),d^=dt(s+L|0,13),z^=dt(d+s|0,18),A^=dt(g+q|0,7),D^=dt(A+g|0,9),q^=dt(D+A|0,13),g^=dt(q+D|0,18);o[i++]=l+Y|0,o[i++]=f+_|0,o[i++]=y+$|0,o[i++]=x+ie|0,o[i++]=v+S|0,o[i++]=m+U|0,o[i++]=w+Z|0,o[i++]=E+b|0,o[i++]=N+s|0,o[i++]=O+d|0,o[i++]=C+z|0,o[i++]=V+L|0,o[i++]=j+A|0,o[i++]=X+D|0,o[i++]=F+q|0,o[i++]=G+g|0}function li(e,t,r,n,o){let i=n+0,l=n+16*o;for(let f=0;f<16;f++)r[l+f]=e[t+(2*o-1)*16+f];for(let f=0;f<o;f++,i+=16,t+=16)Is(r,l,e,t,r,i),f>0&&(l+=16),Is(r,i,e,t+=16,r,l)}function Jd(e,t,r){const n=Lf({dkLen:32,asyncTick:10,maxmem:1073742848},r),{N:o,r:i,p:l,dkLen:f,asyncTick:y,maxmem:x,onProgress:v}=n;if(Pt.number(o),Pt.number(i),Pt.number(l),Pt.number(f),Pt.number(y),Pt.number(x),v!==void 0&&typeof v!="function")throw new Error("progressCb should be function");const m=128*i,w=m/4;if(o<=1||(o&o-1)!==0||o>=2**(m/8)||o>2**32)throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");if(l<0||l>(2**32-1)*32/m)throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");if(f<0||f>(2**32-1)*32)throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");const E=m*(o+l);if(E>x)throw new Error(`Scrypt: parameters too large, ${E} (128 * r * (N + p)) > ${x} (maxmem)`);const N=Ao(Mn,e,t,{c:1,dkLen:m*l}),O=Ir(N),C=Ir(new Uint8Array(m*o)),V=Ir(new Uint8Array(m));let j=()=>{};if(v){const X=2*o*l,F=Math.max(Math.floor(X/1e4),1);let G=0;j=()=>{G++,v&&(!(G%F)||G===X)&&v(G/X)}}return{N:o,r:i,p:l,dkLen:f,blockSize32:w,V:C,B32:O,B:N,tmp:V,blockMixCb:j,asyncTick:y}}function Qd(e,t,r,n,o){const i=Ao(Mn,e,r,{c:1,dkLen:t});return r.fill(0),n.fill(0),o.fill(0),i}function _d(e,t,r){const{N:n,r:o,p:i,dkLen:l,blockSize32:f,V:y,B32:x,B:v,tmp:m,blockMixCb:w}=Jd(e,t,r);for(let E=0;E<i;E++){const N=f*E;for(let O=0;O<f;O++)y[O]=x[N+O];for(let O=0,C=0;O<n-1;O++)li(y,C,y,C+=f,o),w();li(y,(n-1)*f,x,N,o),w();for(let O=0;O<n;O++){const C=x[N+f-16]%n;for(let V=0;V<f;V++)m[V]=x[N+V]^y[C*f+V];li(m,0,x,N,o),w()}}return Qd(e,l,v,y,m)}const an={N:1<<15,p:1,r:8};function vc(e,t=Bn(),r=an,n){const o=Le(e);return{params:r,password:!rr||!n&&Kt()?zh(o,t,Math.log2(r.N),r.r,r.p):_d(o,t,V0({dkLen:64},r)),salt:t}}function $d(e){const t=e.subarray(0,32),r=_n(e.subarray(32+0,32+4),si).toNumber(),n=_n(e.subarray(32+4,32+8),si).toNumber(),o=_n(e.subarray(32+8,32+12),si).toNumber();if(r!==an.N||n!==an.p||o!==an.r)throw new Error("Invalid injected scrypt params found");return{params:{N:r,p:n,r:o},salt:t}}function ex(e,{N:t,p:r,r:n}){return Wt(e,ar(t,ai),ar(r,ai),ar(n,ai))}const yc=["scrypt","xsalsa20-poly1305"],tx=["none"],rx="3",qs=24,nx=32+3*4;function ix(e,t,r=yc){et(e,"No encrypted data available to decode"),et(t||!r.includes("xsalsa20-poly1305"),"Password required to decode encrypted data");let n=e;if(t){let o;if(r.includes("scrypt")){const{params:i,salt:l}=$d(e);o=vc(t,l,i).password,e=e.subarray(nx)}else o=pr(t);n=Wd(e.subarray(qs),e.subarray(0,qs),_u(o,256,!0))}return et(n,"Unable to decode using the supplied passphrase"),n}function ox(e,t,r){return{encoded:Pd(e),encoding:{content:t,type:r?yc:tx,version:rx}}}const Vs=e=>(t,r,n)=>Ed(t,r,n,e),bc=[["ecdsa",Vs("blake2")],["ethereum",Vs("keccak")]],sx=[["ed25519",_f],["sr25519",nc],...bc],ax=["ed25519","sr25519","ecdsa"];function mc(e,{message:t,publicKey:r,signature:n},o=sx){return e.isValid=o.some(([i,l])=>{try{if(l(t,n,r))return e.crypto=i,!0}catch{}return!1}),e}function fx(e,{message:t,publicKey:r,signature:n}){if(![0,1,2].includes(n[0]))throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${n[0]}`);const o=ax[n[0]]||"none";e.crypto=o;try{e.isValid={ecdsa:()=>mc(e,{message:t,publicKey:r,signature:n.subarray(1)},bc).isValid,ed25519:()=>_f(t,n.subarray(1),r),none:()=>{throw Error("no verify for `none` crypto type")},sr25519:()=>nc(t,n.subarray(1),r)}[o]()}catch{}return e}function cx(e){return[0,1,2].includes(e[0])&&[65,66].includes(e.length)?fx:mc}function Ws(e,t,r){const n=Le(t);if(![64,65,66].includes(n.length))throw new Error(`Invalid signature length, expected [64..66] bytes, found ${n.length}`);const o=d0(r),i={message:Le(e),publicKey:o,signature:n},l={crypto:"none",isValid:!1,isWrapped:hn(i.message,!0),publicKey:o},f=hn(i.message,!1),y=cx(n);return y(l,i),l.crypto!=="none"||l.isWrapped&&!f?l:(i.message=f?tl(i.message):rl(i.message),y(l,i))}const ux="bottom drive obey lake curtain smoke basket hold race lonely fit walk",a0=new Uint8Array([161,35,3,33,0]),yn=new Uint8Array([48,83,2,1,1,48,5,6,3,43,101,112,4,34,4,32]),lx=32,Gs=64,hx=32,N0=yn.length;function dx(e,t,r){const n=Array.isArray(r)||r===void 0?r:[r],o=ix(t,e,n),i=o.subarray(0,yn.length);et(Pr(i,yn),"Invalid Pkcs8 header found in body");let l=o.subarray(N0,N0+Gs),f=N0+Gs,y=o.subarray(f,f+a0.length);Pr(y,a0)||(f=N0+hx,l=o.subarray(N0,f),y=o.subarray(f,f+a0.length),et(Pr(y,a0),"Invalid Pkcs8 divider found in body"));const x=f+a0.length;return{publicKey:o.subarray(x,x+lx),secretKey:l}}function xx({publicKey:e,secretKey:t},r){et(t,"Expected a valid secretKey to be passed to encode");const n=Wt(yn,t,a0,e);if(!r)return n;const{params:o,password:i,salt:l}=vc(r),{encrypted:f,nonce:y}=Gd(n,i.subarray(0,32));return Wt(ex(l,o),y,f)}function px(e,{address:t,meta:r},n,o){return V0(ox(n,["pkcs8",e],o),{address:t,meta:r})}const vx=new Uint8Array,yx={ecdsa:w0,ed25519:No,ethereum:w0,sr25519:rc},Ys={ecdsa:new Uint8Array([2]),ed25519:new Uint8Array([0]),ethereum:new Uint8Array([2]),sr25519:new Uint8Array([1])},Ks={ecdsa:(e,t)=>Zs(e,t,"blake2"),ed25519:_1,ethereum:(e,t)=>Zs(e,t,"keccak"),sr25519:sd},$0={ecdsa:e=>e.length>32?e0(e):e,ed25519:e=>e,ethereum:e=>e.length===20?e:Tn(Lo(e)),sr25519:e=>e};function Yr(e){return!e||pf(e)}function Js(e,t,r){return e0(Wt(t||"",r||"",e))}function f0({toSS58:e,type:t},{publicKey:r,secretKey:n},o={},i=null,l){const f=(v,m)=>{const w=dx(v,m||i,l);if(w.secretKey.length===64)r=w.publicKey,n=w.secretKey;else{const E=yx[t](w.secretKey);r=E.publicKey,n=E.secretKey}},y=v=>(Yr(n)&&i&&f(v,i),i=xx({publicKey:r,secretKey:n},v),l=void 0,i),x=()=>{const v=$0[t](r);return t==="ethereum"?uc(v):e(v)};return{get address(){return x()},get addressRaw(){const v=$0[t](r);return t==="ethereum"?v.slice(-20):v},get isLocked(){return Yr(n)},get meta(){return o},get publicKey(){return r},get type(){return t},decodePkcs8:f,decryptMessage:(v,m)=>{et(!Yr(n),"Cannot encrypt with a locked key pair"),et(!["ecdsa","ethereum"].includes(t),"Secp256k1 not supported yet");const w=Le(v);return Yd(w.slice(24,w.length),w.slice(0,24),Xs(Le(m)),Ss(n))},derive:(v,m)=>{et(t!=="ethereum","Unable to derive on this keypair"),et(!Yr(n),"Cannot derive on a locked keypair");const{path:w}=Gf(v),E=tc({publicKey:r,secretKey:n},w,t);return f0({toSS58:e,type:t},E,m,null)},encodePkcs8:v=>y(v),encryptMessage:(v,m,w)=>{et(!Yr(n),"Cannot encrypt with a locked key pair"),et(!["ecdsa","ethereum"].includes(t),"Secp256k1 not supported yet");const{nonce:E,sealed:N}=Kd(Le(v),Ss(n),Xs(Le(m)),w);return Wt(E,N)},lock:()=>{n=new Uint8Array},setMeta:v=>{o=V0({},o,v)},sign:(v,m={})=>(et(!Yr(n),"Cannot sign with a locked key pair"),Wt(m.withType?Ys[t]:vx,Ks[t](Le(v),{publicKey:r,secretKey:n}))),toJson:v=>{const m=["ecdsa","ethereum"].includes(t)?r.length===20?X0(r):X0(fc(r)):x();return px(t,{address:m,meta:o},y(v),!!v)},unlock:v=>f(v),verify:(v,m,w)=>Ws(v,m,$0[t](Le(w))).isValid,vrfSign:(v,m,w)=>{if(et(!Yr(n),"Cannot sign with a locked key pair"),t==="sr25519")return ad(v,{secretKey:n},m,w);const E=Ks[t](Le(v),{publicKey:r,secretKey:n});return Wt(Js(E,m,w),E)},vrfVerify:(v,m,w,E,N)=>t==="sr25519"?fd(v,m,r,E,N):Ws(v,Wt(Ys[t],m.subarray(32)),$0[t](Le(w))).isValid&&Pr(m.subarray(0,32),Js(m.subarray(32),E,N))}}var Qr;class bx{constructor(){Vt(this,Qr,{})}add(t){return Ee(this,Qr)[d0(t.address).toString()]=t,t}all(){return Object.values(Ee(this,Qr))}get(t){const r=Ee(this,Qr)[d0(t).toString()];if(!r)throw new Error(`Unable to retrieve keypair '${qr(t)||Er(t)?X0(Le(t)):t}'`);return r}remove(t){delete Ee(this,Qr)[d0(t).toString()]}}Qr=new WeakMap;const hi={ecdsa:e=>w0(e),ed25519:e=>No(e),ethereum:e=>w0(e),sr25519:e=>rc(e)};function mx({publicKey:e}){return e}var mr,I0,y0;class wc{constructor(t={}){Vt(this,mr,void 0);Vt(this,I0,void 0);Vt(this,y0,void 0);nr(this,"decodeAddress",d0);nr(this,"encodeAddress",(t,r)=>this.type==="ethereum"?uc(t):cd(t,r===void 0?Ee(this,y0):r));if(t.type=t.type||"ed25519",!["ecdsa","ethereum","ed25519","sr25519"].includes(t.type||"undefined"))throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${t.type||"unknown"}`);Bt(this,mr,new bx),Bt(this,y0,t.ss58Format),Bt(this,I0,t.type)}get pairs(){return this.getPairs()}get publicKeys(){return this.getPublicKeys()}get type(){return Ee(this,I0)}addPair(t){return Ee(this,mr).add(t)}addFromAddress(t,r={},n=null,o=this.type,i,l){const f=this.decodeAddress(t,i);return this.addPair(f0({toSS58:this.encodeAddress,type:o},{publicKey:f,secretKey:new Uint8Array},r,n,l))}addFromJson(t,r){return this.addPair(this.createFromJson(t,r))}addFromMnemonic(t,r={},n=this.type){return this.addFromUri(t,r,n)}addFromPair(t,r={},n=this.type){return this.addPair(this.createFromPair(t,r,n))}addFromSeed(t,r={},n=this.type){return this.addPair(f0({toSS58:this.encodeAddress,type:n},hi[n](t),r,null))}addFromUri(t,r={},n=this.type){return this.addPair(this.createFromUri(t,r,n))}createFromJson({address:t,encoded:r,encoding:{content:n,type:o,version:i},meta:l},f){if(i==="3"&&n[0]!=="pkcs8")throw new Error(`Unable to decode non-pkcs8 type, [${n.join(",")}] found}`);const y=i==="0"||!Array.isArray(n)?this.type:n[1],x=Array.isArray(o)?o:[o];if(!["ed25519","sr25519","ecdsa","ethereum"].includes(y))throw new Error(`Unknown crypto type ${y}`);const v=Er(t)?h0(t):this.decodeAddress(t,f),m=Er(r)?h0(r):gd(r);return f0({toSS58:this.encodeAddress,type:y},{publicKey:v,secretKey:new Uint8Array},l,m,x)}createFromPair(t,r={},n=this.type){return f0({toSS58:this.encodeAddress,type:n},t,r,null)}createFromUri(t,r={},n=this.type){const o=t.startsWith("//")?`${ux}${t}`:t,{derivePath:i,password:l,path:f,phrase:y}=G1(o);let x;const v=Er(y,256);if(v)x=h0(y);else{const w=y.split(" ");if([12,15,18,21,24].includes(w.length))x=n==="ethereum"?qd(y,"",!1,64):Vd(y,l);else{if(y.length>32)throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");x=pr(y.padEnd(32))}}const m=n==="ethereum"?v?hi[n](x):Ld(x,i.substring(1)):tc(hi[n](x),f,n);return f0({toSS58:this.encodeAddress,type:n},m,r,null)}getPair(t){return Ee(this,mr).get(t)}getPairs(){return Ee(this,mr).all()}getPublicKeys(){return Ee(this,mr).all().map(mx)}removePair(t){Ee(this,mr).remove(t)}setSS58Format(t){Bt(this,y0,t)}toJson(t,r){return Ee(this,mr).get(t).toJson(r)}}mr=new WeakMap,I0=new WeakMap,y0=new WeakMap;var So={exports:{}},di={exports:{}},Qs;function st(){return Qs||(Qs=1,function(e,t){(function(r,n){e.exports=n()})(Ge,function(){var r=r||function(n,o){var i;if(typeof window<"u"&&window.crypto&&(i=window.crypto),typeof self<"u"&&self.crypto&&(i=self.crypto),typeof globalThis<"u"&&globalThis.crypto&&(i=globalThis.crypto),!i&&typeof window<"u"&&window.msCrypto&&(i=window.msCrypto),!i&&typeof Ge<"u"&&Ge.crypto&&(i=Ge.crypto),!i&&typeof Jf=="function")try{i=go}catch{}var l=function(){if(i){if(typeof i.getRandomValues=="function")try{return i.getRandomValues(new Uint32Array(1))[0]}catch{}if(typeof i.randomBytes=="function")try{return i.randomBytes(4).readInt32LE()}catch{}}throw new Error("Native crypto module could not be used to get secure random number.")},f=Object.create||function(){function j(){}return function(X){var F;return j.prototype=X,F=new j,j.prototype=null,F}}(),y={},x=y.lib={},v=x.Base=function(){return{extend:function(j){var X=f(this);return j&&X.mixIn(j),(!X.hasOwnProperty("init")||this.init===X.init)&&(X.init=function(){X.$super.init.apply(this,arguments)}),X.init.prototype=X,X.$super=this,X},create:function(){var j=this.extend();return j.init.apply(j,arguments),j},init:function(){},mixIn:function(j){for(var X in j)j.hasOwnProperty(X)&&(this[X]=j[X]);j.hasOwnProperty("toString")&&(this.toString=j.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),m=x.WordArray=v.extend({init:function(j,X){j=this.words=j||[],X!=o?this.sigBytes=X:this.sigBytes=j.length*4},toString:function(j){return(j||E).stringify(this)},concat:function(j){var X=this.words,F=j.words,G=this.sigBytes,Y=j.sigBytes;if(this.clamp(),G%4)for(var _=0;_<Y;_++){var $=F[_>>>2]>>>24-_%4*8&255;X[G+_>>>2]|=$<<24-(G+_)%4*8}else for(var ie=0;ie<Y;ie+=4)X[G+ie>>>2]=F[ie>>>2];return this.sigBytes+=Y,this},clamp:function(){var j=this.words,X=this.sigBytes;j[X>>>2]&=4294967295<<32-X%4*8,j.length=n.ceil(X/4)},clone:function(){var j=v.clone.call(this);return j.words=this.words.slice(0),j},random:function(j){for(var X=[],F=0;F<j;F+=4)X.push(l());return new m.init(X,j)}}),w=y.enc={},E=w.Hex={stringify:function(j){for(var X=j.words,F=j.sigBytes,G=[],Y=0;Y<F;Y++){var _=X[Y>>>2]>>>24-Y%4*8&255;G.push((_>>>4).toString(16)),G.push((_&15).toString(16))}return G.join("")},parse:function(j){for(var X=j.length,F=[],G=0;G<X;G+=2)F[G>>>3]|=parseInt(j.substr(G,2),16)<<24-G%8*4;return new m.init(F,X/2)}},N=w.Latin1={stringify:function(j){for(var X=j.words,F=j.sigBytes,G=[],Y=0;Y<F;Y++){var _=X[Y>>>2]>>>24-Y%4*8&255;G.push(String.fromCharCode(_))}return G.join("")},parse:function(j){for(var X=j.length,F=[],G=0;G<X;G++)F[G>>>2]|=(j.charCodeAt(G)&255)<<24-G%4*8;return new m.init(F,X)}},O=w.Utf8={stringify:function(j){try{return decodeURIComponent(escape(N.stringify(j)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(j){return N.parse(unescape(encodeURIComponent(j)))}},C=x.BufferedBlockAlgorithm=v.extend({reset:function(){this._data=new m.init,this._nDataBytes=0},_append:function(j){typeof j=="string"&&(j=O.parse(j)),this._data.concat(j),this._nDataBytes+=j.sigBytes},_process:function(j){var X,F=this._data,G=F.words,Y=F.sigBytes,_=this.blockSize,$=_*4,ie=Y/$;j?ie=n.ceil(ie):ie=n.max((ie|0)-this._minBufferSize,0);var S=ie*_,U=n.min(S*4,Y);if(S){for(var Z=0;Z<S;Z+=_)this._doProcessBlock(G,Z);X=G.splice(0,S),F.sigBytes-=U}return new m.init(X,U)},clone:function(){var j=v.clone.call(this);return j._data=this._data.clone(),j},_minBufferSize:0});x.Hasher=C.extend({cfg:v.extend(),init:function(j){this.cfg=this.cfg.extend(j),this.reset()},reset:function(){C.reset.call(this),this._doReset()},update:function(j){return this._append(j),this._process(),this},finalize:function(j){j&&this._append(j);var X=this._doFinalize();return X},blockSize:16,_createHelper:function(j){return function(X,F){return new j.init(F).finalize(X)}},_createHmacHelper:function(j){return function(X,F){return new V.HMAC.init(j,F).finalize(X)}}});var V=y.algo={};return y}(Math);return r})}(di)),di.exports}var xi={exports:{}},_s;function Ln(){return _s||(_s=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(n){var o=r,i=o.lib,l=i.Base,f=i.WordArray,y=o.x64={};y.Word=l.extend({init:function(x,v){this.high=x,this.low=v}}),y.WordArray=l.extend({init:function(x,v){x=this.words=x||[],v!=n?this.sigBytes=v:this.sigBytes=x.length*8},toX32:function(){for(var x=this.words,v=x.length,m=[],w=0;w<v;w++){var E=x[w];m.push(E.high),m.push(E.low)}return f.create(m,this.sigBytes)},clone:function(){for(var x=l.clone.call(this),v=x.words=this.words.slice(0),m=v.length,w=0;w<m;w++)v[w]=v[w].clone();return x}})}(),r})}(xi)),xi.exports}var pi={exports:{}},$s;function wx(){return $s||($s=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(){if(typeof ArrayBuffer=="function"){var n=r,o=n.lib,i=o.WordArray,l=i.init,f=i.init=function(y){if(y instanceof ArrayBuffer&&(y=new Uint8Array(y)),(y instanceof Int8Array||typeof Uint8ClampedArray<"u"&&y instanceof Uint8ClampedArray||y instanceof Int16Array||y instanceof Uint16Array||y instanceof Int32Array||y instanceof Uint32Array||y instanceof Float32Array||y instanceof Float64Array)&&(y=new Uint8Array(y.buffer,y.byteOffset,y.byteLength)),y instanceof Uint8Array){for(var x=y.byteLength,v=[],m=0;m<x;m++)v[m>>>2]|=y[m]<<24-m%4*8;l.call(this,v,x)}else l.apply(this,arguments)};f.prototype=i}}(),r.lib.WordArray})}(pi)),pi.exports}var vi={exports:{}},ea;function gx(){return ea||(ea=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=n.enc;l.Utf16=l.Utf16BE={stringify:function(y){for(var x=y.words,v=y.sigBytes,m=[],w=0;w<v;w+=2){var E=x[w>>>2]>>>16-w%4*8&65535;m.push(String.fromCharCode(E))}return m.join("")},parse:function(y){for(var x=y.length,v=[],m=0;m<x;m++)v[m>>>1]|=y.charCodeAt(m)<<16-m%2*16;return i.create(v,x*2)}},l.Utf16LE={stringify:function(y){for(var x=y.words,v=y.sigBytes,m=[],w=0;w<v;w+=2){var E=f(x[w>>>2]>>>16-w%4*8&65535);m.push(String.fromCharCode(E))}return m.join("")},parse:function(y){for(var x=y.length,v=[],m=0;m<x;m++)v[m>>>1]|=f(y.charCodeAt(m)<<16-m%2*16);return i.create(v,x*2)}};function f(y){return y<<8&4278255360|y>>>8&16711935}}(),r.enc.Utf16})}(vi)),vi.exports}var yi={exports:{}},ta;function H0(){return ta||(ta=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=n.enc;l.Base64={stringify:function(y){var x=y.words,v=y.sigBytes,m=this._map;y.clamp();for(var w=[],E=0;E<v;E+=3)for(var N=x[E>>>2]>>>24-E%4*8&255,O=x[E+1>>>2]>>>24-(E+1)%4*8&255,C=x[E+2>>>2]>>>24-(E+2)%4*8&255,V=N<<16|O<<8|C,j=0;j<4&&E+j*.75<v;j++)w.push(m.charAt(V>>>6*(3-j)&63));var X=m.charAt(64);if(X)for(;w.length%4;)w.push(X);return w.join("")},parse:function(y){var x=y.length,v=this._map,m=this._reverseMap;if(!m){m=this._reverseMap=[];for(var w=0;w<v.length;w++)m[v.charCodeAt(w)]=w}var E=v.charAt(64);if(E){var N=y.indexOf(E);N!==-1&&(x=N)}return f(y,x,m)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="};function f(y,x,v){for(var m=[],w=0,E=0;E<x;E++)if(E%4){var N=v[y.charCodeAt(E-1)]<<E%4*2,O=v[y.charCodeAt(E)]>>>6-E%4*2,C=N|O;m[w>>>2]|=C<<24-w%4*8,w++}return i.create(m,w)}}(),r.enc.Base64})}(yi)),yi.exports}var bi={exports:{}},ra;function Px(){return ra||(ra=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=n.enc;l.Base64url={stringify:function(y,x=!0){var v=y.words,m=y.sigBytes,w=x?this._safe_map:this._map;y.clamp();for(var E=[],N=0;N<m;N+=3)for(var O=v[N>>>2]>>>24-N%4*8&255,C=v[N+1>>>2]>>>24-(N+1)%4*8&255,V=v[N+2>>>2]>>>24-(N+2)%4*8&255,j=O<<16|C<<8|V,X=0;X<4&&N+X*.75<m;X++)E.push(w.charAt(j>>>6*(3-X)&63));var F=w.charAt(64);if(F)for(;E.length%4;)E.push(F);return E.join("")},parse:function(y,x=!0){var v=y.length,m=x?this._safe_map:this._map,w=this._reverseMap;if(!w){w=this._reverseMap=[];for(var E=0;E<m.length;E++)w[m.charCodeAt(E)]=E}var N=m.charAt(64);if(N){var O=y.indexOf(N);O!==-1&&(v=O)}return f(y,v,w)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"};function f(y,x,v){for(var m=[],w=0,E=0;E<x;E++)if(E%4){var N=v[y.charCodeAt(E-1)]<<E%4*2,O=v[y.charCodeAt(E)]>>>6-E%4*2,C=N|O;m[w>>>2]|=C<<24-w%4*8,w++}return i.create(m,w)}}(),r.enc.Base64url})}(bi)),bi.exports}var mi={exports:{}},na;function k0(){return na||(na=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(n){var o=r,i=o.lib,l=i.WordArray,f=i.Hasher,y=o.algo,x=[];(function(){for(var O=0;O<64;O++)x[O]=n.abs(n.sin(O+1))*4294967296|0})();var v=y.MD5=f.extend({_doReset:function(){this._hash=new l.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(O,C){for(var V=0;V<16;V++){var j=C+V,X=O[j];O[j]=(X<<8|X>>>24)&16711935|(X<<24|X>>>8)&4278255360}var F=this._hash.words,G=O[C+0],Y=O[C+1],_=O[C+2],$=O[C+3],ie=O[C+4],S=O[C+5],U=O[C+6],Z=O[C+7],b=O[C+8],s=O[C+9],d=O[C+10],z=O[C+11],L=O[C+12],A=O[C+13],D=O[C+14],q=O[C+15],g=F[0],c=F[1],M=F[2],Q=F[3];g=m(g,c,M,Q,G,7,x[0]),Q=m(Q,g,c,M,Y,12,x[1]),M=m(M,Q,g,c,_,17,x[2]),c=m(c,M,Q,g,$,22,x[3]),g=m(g,c,M,Q,ie,7,x[4]),Q=m(Q,g,c,M,S,12,x[5]),M=m(M,Q,g,c,U,17,x[6]),c=m(c,M,Q,g,Z,22,x[7]),g=m(g,c,M,Q,b,7,x[8]),Q=m(Q,g,c,M,s,12,x[9]),M=m(M,Q,g,c,d,17,x[10]),c=m(c,M,Q,g,z,22,x[11]),g=m(g,c,M,Q,L,7,x[12]),Q=m(Q,g,c,M,A,12,x[13]),M=m(M,Q,g,c,D,17,x[14]),c=m(c,M,Q,g,q,22,x[15]),g=w(g,c,M,Q,Y,5,x[16]),Q=w(Q,g,c,M,U,9,x[17]),M=w(M,Q,g,c,z,14,x[18]),c=w(c,M,Q,g,G,20,x[19]),g=w(g,c,M,Q,S,5,x[20]),Q=w(Q,g,c,M,d,9,x[21]),M=w(M,Q,g,c,q,14,x[22]),c=w(c,M,Q,g,ie,20,x[23]),g=w(g,c,M,Q,s,5,x[24]),Q=w(Q,g,c,M,D,9,x[25]),M=w(M,Q,g,c,$,14,x[26]),c=w(c,M,Q,g,b,20,x[27]),g=w(g,c,M,Q,A,5,x[28]),Q=w(Q,g,c,M,_,9,x[29]),M=w(M,Q,g,c,Z,14,x[30]),c=w(c,M,Q,g,L,20,x[31]),g=E(g,c,M,Q,S,4,x[32]),Q=E(Q,g,c,M,b,11,x[33]),M=E(M,Q,g,c,z,16,x[34]),c=E(c,M,Q,g,D,23,x[35]),g=E(g,c,M,Q,Y,4,x[36]),Q=E(Q,g,c,M,ie,11,x[37]),M=E(M,Q,g,c,Z,16,x[38]),c=E(c,M,Q,g,d,23,x[39]),g=E(g,c,M,Q,A,4,x[40]),Q=E(Q,g,c,M,G,11,x[41]),M=E(M,Q,g,c,$,16,x[42]),c=E(c,M,Q,g,U,23,x[43]),g=E(g,c,M,Q,s,4,x[44]),Q=E(Q,g,c,M,L,11,x[45]),M=E(M,Q,g,c,q,16,x[46]),c=E(c,M,Q,g,_,23,x[47]),g=N(g,c,M,Q,G,6,x[48]),Q=N(Q,g,c,M,Z,10,x[49]),M=N(M,Q,g,c,D,15,x[50]),c=N(c,M,Q,g,S,21,x[51]),g=N(g,c,M,Q,L,6,x[52]),Q=N(Q,g,c,M,$,10,x[53]),M=N(M,Q,g,c,d,15,x[54]),c=N(c,M,Q,g,Y,21,x[55]),g=N(g,c,M,Q,b,6,x[56]),Q=N(Q,g,c,M,q,10,x[57]),M=N(M,Q,g,c,U,15,x[58]),c=N(c,M,Q,g,A,21,x[59]),g=N(g,c,M,Q,ie,6,x[60]),Q=N(Q,g,c,M,z,10,x[61]),M=N(M,Q,g,c,_,15,x[62]),c=N(c,M,Q,g,s,21,x[63]),F[0]=F[0]+g|0,F[1]=F[1]+c|0,F[2]=F[2]+M|0,F[3]=F[3]+Q|0},_doFinalize:function(){var O=this._data,C=O.words,V=this._nDataBytes*8,j=O.sigBytes*8;C[j>>>5]|=128<<24-j%32;var X=n.floor(V/4294967296),F=V;C[(j+64>>>9<<4)+15]=(X<<8|X>>>24)&16711935|(X<<24|X>>>8)&4278255360,C[(j+64>>>9<<4)+14]=(F<<8|F>>>24)&16711935|(F<<24|F>>>8)&4278255360,O.sigBytes=(C.length+1)*4,this._process();for(var G=this._hash,Y=G.words,_=0;_<4;_++){var $=Y[_];Y[_]=($<<8|$>>>24)&16711935|($<<24|$>>>8)&4278255360}return G},clone:function(){var O=f.clone.call(this);return O._hash=this._hash.clone(),O}});function m(O,C,V,j,X,F,G){var Y=O+(C&V|~C&j)+X+G;return(Y<<F|Y>>>32-F)+C}function w(O,C,V,j,X,F,G){var Y=O+(C&j|V&~j)+X+G;return(Y<<F|Y>>>32-F)+C}function E(O,C,V,j,X,F,G){var Y=O+(C^V^j)+X+G;return(Y<<F|Y>>>32-F)+C}function N(O,C,V,j,X,F,G){var Y=O+(V^(C|~j))+X+G;return(Y<<F|Y>>>32-F)+C}o.MD5=f._createHelper(v),o.HmacMD5=f._createHmacHelper(v)}(Math),r.MD5})}(mi)),mi.exports}var wi={exports:{}},ia;function Xo(){return ia||(ia=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=o.Hasher,f=n.algo,y=[],x=f.SHA1=l.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(v,m){for(var w=this._hash.words,E=w[0],N=w[1],O=w[2],C=w[3],V=w[4],j=0;j<80;j++){if(j<16)y[j]=v[m+j]|0;else{var X=y[j-3]^y[j-8]^y[j-14]^y[j-16];y[j]=X<<1|X>>>31}var F=(E<<5|E>>>27)+V+y[j];j<20?F+=(N&O|~N&C)+1518500249:j<40?F+=(N^O^C)+1859775393:j<60?F+=(N&O|N&C|O&C)-1894007588:F+=(N^O^C)-899497514,V=C,C=O,O=N<<30|N>>>2,N=E,E=F}w[0]=w[0]+E|0,w[1]=w[1]+N|0,w[2]=w[2]+O|0,w[3]=w[3]+C|0,w[4]=w[4]+V|0},_doFinalize:function(){var v=this._data,m=v.words,w=this._nDataBytes*8,E=v.sigBytes*8;return m[E>>>5]|=128<<24-E%32,m[(E+64>>>9<<4)+14]=Math.floor(w/4294967296),m[(E+64>>>9<<4)+15]=w,v.sigBytes=m.length*4,this._process(),this._hash},clone:function(){var v=l.clone.call(this);return v._hash=this._hash.clone(),v}});n.SHA1=l._createHelper(x),n.HmacSHA1=l._createHmacHelper(x)}(),r.SHA1})}(wi)),wi.exports}var gi={exports:{}},oa;function gc(){return oa||(oa=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){return function(n){var o=r,i=o.lib,l=i.WordArray,f=i.Hasher,y=o.algo,x=[],v=[];(function(){function E(V){for(var j=n.sqrt(V),X=2;X<=j;X++)if(!(V%X))return!1;return!0}function N(V){return(V-(V|0))*4294967296|0}for(var O=2,C=0;C<64;)E(O)&&(C<8&&(x[C]=N(n.pow(O,1/2))),v[C]=N(n.pow(O,1/3)),C++),O++})();var m=[],w=y.SHA256=f.extend({_doReset:function(){this._hash=new l.init(x.slice(0))},_doProcessBlock:function(E,N){for(var O=this._hash.words,C=O[0],V=O[1],j=O[2],X=O[3],F=O[4],G=O[5],Y=O[6],_=O[7],$=0;$<64;$++){if($<16)m[$]=E[N+$]|0;else{var ie=m[$-15],S=(ie<<25|ie>>>7)^(ie<<14|ie>>>18)^ie>>>3,U=m[$-2],Z=(U<<15|U>>>17)^(U<<13|U>>>19)^U>>>10;m[$]=S+m[$-7]+Z+m[$-16]}var b=F&G^~F&Y,s=C&V^C&j^V&j,d=(C<<30|C>>>2)^(C<<19|C>>>13)^(C<<10|C>>>22),z=(F<<26|F>>>6)^(F<<21|F>>>11)^(F<<7|F>>>25),L=_+z+b+v[$]+m[$],A=d+s;_=Y,Y=G,G=F,F=X+L|0,X=j,j=V,V=C,C=L+A|0}O[0]=O[0]+C|0,O[1]=O[1]+V|0,O[2]=O[2]+j|0,O[3]=O[3]+X|0,O[4]=O[4]+F|0,O[5]=O[5]+G|0,O[6]=O[6]+Y|0,O[7]=O[7]+_|0},_doFinalize:function(){var E=this._data,N=E.words,O=this._nDataBytes*8,C=E.sigBytes*8;return N[C>>>5]|=128<<24-C%32,N[(C+64>>>9<<4)+14]=n.floor(O/4294967296),N[(C+64>>>9<<4)+15]=O,E.sigBytes=N.length*4,this._process(),this._hash},clone:function(){var E=f.clone.call(this);return E._hash=this._hash.clone(),E}});o.SHA256=f._createHelper(w),o.HmacSHA256=f._createHmacHelper(w)}(Math),r.SHA256})}(gi)),gi.exports}var Pi={exports:{}},sa;function zx(){return sa||(sa=1,function(e,t){(function(r,n,o){e.exports=n(st(),gc())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=n.algo,f=l.SHA256,y=l.SHA224=f.extend({_doReset:function(){this._hash=new i.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var x=f._doFinalize.call(this);return x.sigBytes-=4,x}});n.SHA224=f._createHelper(y),n.HmacSHA224=f._createHmacHelper(y)}(),r.SHA224})}(Pi)),Pi.exports}var zi={exports:{}},aa;function Pc(){return aa||(aa=1,function(e,t){(function(r,n,o){e.exports=n(st(),Ln())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.Hasher,l=n.x64,f=l.Word,y=l.WordArray,x=n.algo;function v(){return f.create.apply(f,arguments)}var m=[v(1116352408,3609767458),v(1899447441,602891725),v(3049323471,3964484399),v(3921009573,2173295548),v(961987163,4081628472),v(1508970993,3053834265),v(2453635748,2937671579),v(2870763221,3664609560),v(3624381080,2734883394),v(310598401,1164996542),v(607225278,1323610764),v(1426881987,3590304994),v(1925078388,4068182383),v(2162078206,991336113),v(2614888103,633803317),v(3248222580,3479774868),v(3835390401,2666613458),v(4022224774,944711139),v(264347078,2341262773),v(604807628,2007800933),v(770255983,1495990901),v(1249150122,1856431235),v(1555081692,3175218132),v(1996064986,2198950837),v(2554220882,3999719339),v(2821834349,766784016),v(2952996808,2566594879),v(3210313671,3203337956),v(3336571891,1034457026),v(3584528711,2466948901),v(113926993,3758326383),v(338241895,168717936),v(666307205,1188179964),v(773529912,1546045734),v(1294757372,1522805485),v(1396182291,2643833823),v(1695183700,2343527390),v(1986661051,1014477480),v(2177026350,1206759142),v(2456956037,344077627),v(2730485921,1290863460),v(2820302411,3158454273),v(3259730800,3505952657),v(3345764771,106217008),v(3516065817,3606008344),v(3600352804,1432725776),v(4094571909,1467031594),v(275423344,851169720),v(430227734,3100823752),v(506948616,1363258195),v(659060556,3750685593),v(883997877,3785050280),v(958139571,3318307427),v(1322822218,3812723403),v(1537002063,2003034995),v(1747873779,3602036899),v(1955562222,1575990012),v(2024104815,1125592928),v(2227730452,2716904306),v(2361852424,442776044),v(2428436474,593698344),v(2756734187,3733110249),v(3204031479,2999351573),v(3329325298,3815920427),v(3391569614,3928383900),v(3515267271,566280711),v(3940187606,3454069534),v(4118630271,4000239992),v(116418474,1914138554),v(174292421,2731055270),v(289380356,3203993006),v(460393269,320620315),v(685471733,587496836),v(852142971,1086792851),v(1017036298,365543100),v(1126000580,2618297676),v(1288033470,3409855158),v(1501505948,4234509866),v(1607167915,987167468),v(1816402316,1246189591)],w=[];(function(){for(var N=0;N<80;N++)w[N]=v()})();var E=x.SHA512=i.extend({_doReset:function(){this._hash=new y.init([new f.init(1779033703,4089235720),new f.init(3144134277,2227873595),new f.init(1013904242,4271175723),new f.init(2773480762,1595750129),new f.init(1359893119,2917565137),new f.init(2600822924,725511199),new f.init(528734635,4215389547),new f.init(1541459225,327033209)])},_doProcessBlock:function(N,O){for(var C=this._hash.words,V=C[0],j=C[1],X=C[2],F=C[3],G=C[4],Y=C[5],_=C[6],$=C[7],ie=V.high,S=V.low,U=j.high,Z=j.low,b=X.high,s=X.low,d=F.high,z=F.low,L=G.high,A=G.low,D=Y.high,q=Y.low,g=_.high,c=_.low,M=$.high,Q=$.low,ae=ie,he=S,Je=U,ve=Z,Ke=b,Gt=s,mt=d,tt=z,At=L,Ce=A,wt=D,fr=q,ct=g,pt=c,Qt=M,rt=Q,Ve=0;Ve<80;Ve++){var vt,Qe,ut=w[Ve];if(Ve<16)Qe=ut.high=N[O+Ve*2]|0,vt=ut.low=N[O+Ve*2+1]|0;else{var qt=w[Ve-15],nt=qt.high,P=qt.low,u=(nt>>>1|P<<31)^(nt>>>8|P<<24)^nt>>>7,h=(P>>>1|nt<<31)^(P>>>8|nt<<24)^(P>>>7|nt<<25),T=w[Ve-2],I=T.high,J=T.low,te=(I>>>19|J<<13)^(I<<3|J>>>29)^I>>>6,Ae=(J>>>19|I<<13)^(J<<3|I>>>29)^(J>>>6|I<<26),Be=w[Ve-7],Ne=Be.high,lt=Be.low,Me=w[Ve-16],zt=Me.high,kr=Me.low;vt=h+lt,Qe=u+Ne+(vt>>>0<h>>>0?1:0),vt=vt+Ae,Qe=Qe+te+(vt>>>0<Ae>>>0?1:0),vt=vt+kr,Qe=Qe+zt+(vt>>>0<kr>>>0?1:0),ut.high=Qe,ut.low=vt}var Tt=At&wt^~At&ct,Lt=Ce&fr^~Ce&pt,n0=ae&Je^ae&Ke^Je&Ke,ht=he&ve^he&Gt^ve&Gt,yt=(ae>>>28|he<<4)^(ae<<30|he>>>2)^(ae<<25|he>>>7),cr=(he>>>28|ae<<4)^(he<<30|ae>>>2)^(he<<25|ae>>>7),Mt=(At>>>14|Ce<<18)^(At>>>18|Ce<<14)^(At<<23|Ce>>>9),Et=(Ce>>>14|At<<18)^(Ce>>>18|At<<14)^(Ce<<23|At>>>9),Lr=m[Ve],St=Lr.high,_e=Lr.low,Ct=rt+Et,p=Qt+Mt+(Ct>>>0<rt>>>0?1:0),Ct=Ct+Lt,p=p+Tt+(Ct>>>0<Lt>>>0?1:0),Ct=Ct+_e,p=p+St+(Ct>>>0<_e>>>0?1:0),Ct=Ct+vt,p=p+Qe+(Ct>>>0<vt>>>0?1:0),H=cr+ht,k=yt+n0+(H>>>0<cr>>>0?1:0);Qt=ct,rt=pt,ct=wt,pt=fr,wt=At,fr=Ce,Ce=tt+Ct|0,At=mt+p+(Ce>>>0<tt>>>0?1:0)|0,mt=Ke,tt=Gt,Ke=Je,Gt=ve,Je=ae,ve=he,he=Ct+H|0,ae=p+k+(he>>>0<Ct>>>0?1:0)|0}S=V.low=S+he,V.high=ie+ae+(S>>>0<he>>>0?1:0),Z=j.low=Z+ve,j.high=U+Je+(Z>>>0<ve>>>0?1:0),s=X.low=s+Gt,X.high=b+Ke+(s>>>0<Gt>>>0?1:0),z=F.low=z+tt,F.high=d+mt+(z>>>0<tt>>>0?1:0),A=G.low=A+Ce,G.high=L+At+(A>>>0<Ce>>>0?1:0),q=Y.low=q+fr,Y.high=D+wt+(q>>>0<fr>>>0?1:0),c=_.low=c+pt,_.high=g+ct+(c>>>0<pt>>>0?1:0),Q=$.low=Q+rt,$.high=M+Qt+(Q>>>0<rt>>>0?1:0)},_doFinalize:function(){var N=this._data,O=N.words,C=this._nDataBytes*8,V=N.sigBytes*8;O[V>>>5]|=128<<24-V%32,O[(V+128>>>10<<5)+30]=Math.floor(C/4294967296),O[(V+128>>>10<<5)+31]=C,N.sigBytes=O.length*4,this._process();var j=this._hash.toX32();return j},clone:function(){var N=i.clone.call(this);return N._hash=this._hash.clone(),N},blockSize:1024/32});n.SHA512=i._createHelper(E),n.HmacSHA512=i._createHmacHelper(E)}(),r.SHA512})}(zi)),zi.exports}var Hi={exports:{}},fa;function Hx(){return fa||(fa=1,function(e,t){(function(r,n,o){e.exports=n(st(),Ln(),Pc())})(Ge,function(r){return function(){var n=r,o=n.x64,i=o.Word,l=o.WordArray,f=n.algo,y=f.SHA512,x=f.SHA384=y.extend({_doReset:function(){this._hash=new l.init([new i.init(3418070365,3238371032),new i.init(1654270250,914150663),new i.init(2438529370,812702999),new i.init(355462360,4144912697),new i.init(1731405415,4290775857),new i.init(2394180231,1750603025),new i.init(3675008525,1694076839),new i.init(1203062813,3204075428)])},_doFinalize:function(){var v=y._doFinalize.call(this);return v.sigBytes-=16,v}});n.SHA384=y._createHelper(x),n.HmacSHA384=y._createHmacHelper(x)}(),r.SHA384})}(Hi)),Hi.exports}var ki={exports:{}},ca;function kx(){return ca||(ca=1,function(e,t){(function(r,n,o){e.exports=n(st(),Ln())})(Ge,function(r){return function(n){var o=r,i=o.lib,l=i.WordArray,f=i.Hasher,y=o.x64,x=y.Word,v=o.algo,m=[],w=[],E=[];(function(){for(var C=1,V=0,j=0;j<24;j++){m[C+5*V]=(j+1)*(j+2)/2%64;var X=V%5,F=(2*C+3*V)%5;C=X,V=F}for(var C=0;C<5;C++)for(var V=0;V<5;V++)w[C+5*V]=V+(2*C+3*V)%5*5;for(var G=1,Y=0;Y<24;Y++){for(var _=0,$=0,ie=0;ie<7;ie++){if(G&1){var S=(1<<ie)-1;S<32?$^=1<<S:_^=1<<S-32}G&128?G=G<<1^113:G<<=1}E[Y]=x.create(_,$)}})();var N=[];(function(){for(var C=0;C<25;C++)N[C]=x.create()})();var O=v.SHA3=f.extend({cfg:f.cfg.extend({outputLength:512}),_doReset:function(){for(var C=this._state=[],V=0;V<25;V++)C[V]=new x.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(C,V){for(var j=this._state,X=this.blockSize/2,F=0;F<X;F++){var G=C[V+2*F],Y=C[V+2*F+1];G=(G<<8|G>>>24)&16711935|(G<<24|G>>>8)&4278255360,Y=(Y<<8|Y>>>24)&16711935|(Y<<24|Y>>>8)&4278255360;var _=j[F];_.high^=Y,_.low^=G}for(var $=0;$<24;$++){for(var ie=0;ie<5;ie++){for(var S=0,U=0,Z=0;Z<5;Z++){var _=j[ie+5*Z];S^=_.high,U^=_.low}var b=N[ie];b.high=S,b.low=U}for(var ie=0;ie<5;ie++)for(var s=N[(ie+4)%5],d=N[(ie+1)%5],z=d.high,L=d.low,S=s.high^(z<<1|L>>>31),U=s.low^(L<<1|z>>>31),Z=0;Z<5;Z++){var _=j[ie+5*Z];_.high^=S,_.low^=U}for(var A=1;A<25;A++){var S,U,_=j[A],D=_.high,q=_.low,g=m[A];g<32?(S=D<<g|q>>>32-g,U=q<<g|D>>>32-g):(S=q<<g-32|D>>>64-g,U=D<<g-32|q>>>64-g);var c=N[w[A]];c.high=S,c.low=U}var M=N[0],Q=j[0];M.high=Q.high,M.low=Q.low;for(var ie=0;ie<5;ie++)for(var Z=0;Z<5;Z++){var A=ie+5*Z,_=j[A],ae=N[A],he=N[(ie+1)%5+5*Z],Je=N[(ie+2)%5+5*Z];_.high=ae.high^~he.high&Je.high,_.low=ae.low^~he.low&Je.low}var _=j[0],ve=E[$];_.high^=ve.high,_.low^=ve.low}},_doFinalize:function(){var C=this._data,V=C.words;this._nDataBytes*8;var j=C.sigBytes*8,X=this.blockSize*32;V[j>>>5]|=1<<24-j%32,V[(n.ceil((j+1)/X)*X>>>5)-1]|=128,C.sigBytes=V.length*4,this._process();for(var F=this._state,G=this.cfg.outputLength/8,Y=G/8,_=[],$=0;$<Y;$++){var ie=F[$],S=ie.high,U=ie.low;S=(S<<8|S>>>24)&16711935|(S<<24|S>>>8)&4278255360,U=(U<<8|U>>>24)&16711935|(U<<24|U>>>8)&4278255360,_.push(U),_.push(S)}return new l.init(_,G)},clone:function(){for(var C=f.clone.call(this),V=C._state=this._state.slice(0),j=0;j<25;j++)V[j]=V[j].clone();return C}});o.SHA3=f._createHelper(O),o.HmacSHA3=f._createHmacHelper(O)}(Math),r.SHA3})}(ki)),ki.exports}var Mi={exports:{}},ua;function Mx(){return ua||(ua=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){/** @preserve
			(c) 2012 by Cédric Mesnil. All rights reserved.

			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*/return function(n){var o=r,i=o.lib,l=i.WordArray,f=i.Hasher,y=o.algo,x=l.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),v=l.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),m=l.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),w=l.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),E=l.create([0,1518500249,1859775393,2400959708,2840853838]),N=l.create([1352829926,1548603684,1836072691,2053994217,0]),O=y.RIPEMD160=f.extend({_doReset:function(){this._hash=l.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(Y,_){for(var $=0;$<16;$++){var ie=_+$,S=Y[ie];Y[ie]=(S<<8|S>>>24)&16711935|(S<<24|S>>>8)&4278255360}var U=this._hash.words,Z=E.words,b=N.words,s=x.words,d=v.words,z=m.words,L=w.words,A,D,q,g,c,M,Q,ae,he,Je;M=A=U[0],Q=D=U[1],ae=q=U[2],he=g=U[3],Je=c=U[4];for(var ve,$=0;$<80;$+=1)ve=A+Y[_+s[$]]|0,$<16?ve+=C(D,q,g)+Z[0]:$<32?ve+=V(D,q,g)+Z[1]:$<48?ve+=j(D,q,g)+Z[2]:$<64?ve+=X(D,q,g)+Z[3]:ve+=F(D,q,g)+Z[4],ve=ve|0,ve=G(ve,z[$]),ve=ve+c|0,A=c,c=g,g=G(q,10),q=D,D=ve,ve=M+Y[_+d[$]]|0,$<16?ve+=F(Q,ae,he)+b[0]:$<32?ve+=X(Q,ae,he)+b[1]:$<48?ve+=j(Q,ae,he)+b[2]:$<64?ve+=V(Q,ae,he)+b[3]:ve+=C(Q,ae,he)+b[4],ve=ve|0,ve=G(ve,L[$]),ve=ve+Je|0,M=Je,Je=he,he=G(ae,10),ae=Q,Q=ve;ve=U[1]+q+he|0,U[1]=U[2]+g+Je|0,U[2]=U[3]+c+M|0,U[3]=U[4]+A+Q|0,U[4]=U[0]+D+ae|0,U[0]=ve},_doFinalize:function(){var Y=this._data,_=Y.words,$=this._nDataBytes*8,ie=Y.sigBytes*8;_[ie>>>5]|=128<<24-ie%32,_[(ie+64>>>9<<4)+14]=($<<8|$>>>24)&16711935|($<<24|$>>>8)&4278255360,Y.sigBytes=(_.length+1)*4,this._process();for(var S=this._hash,U=S.words,Z=0;Z<5;Z++){var b=U[Z];U[Z]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360}return S},clone:function(){var Y=f.clone.call(this);return Y._hash=this._hash.clone(),Y}});function C(Y,_,$){return Y^_^$}function V(Y,_,$){return Y&_|~Y&$}function j(Y,_,$){return(Y|~_)^$}function X(Y,_,$){return Y&$|_&~$}function F(Y,_,$){return Y^(_|~$)}function G(Y,_){return Y<<_|Y>>>32-_}o.RIPEMD160=f._createHelper(O),o.HmacRIPEMD160=f._createHmacHelper(O)}(),r.RIPEMD160})}(Mi)),Mi.exports}var Ei={exports:{}},la;function Fo(){return la||(la=1,function(e,t){(function(r,n){e.exports=n(st())})(Ge,function(r){(function(){var n=r,o=n.lib,i=o.Base,l=n.enc,f=l.Utf8,y=n.algo;y.HMAC=i.extend({init:function(x,v){x=this._hasher=new x.init,typeof v=="string"&&(v=f.parse(v));var m=x.blockSize,w=m*4;v.sigBytes>w&&(v=x.finalize(v)),v.clamp();for(var E=this._oKey=v.clone(),N=this._iKey=v.clone(),O=E.words,C=N.words,V=0;V<m;V++)O[V]^=1549556828,C[V]^=909522486;E.sigBytes=N.sigBytes=w,this.reset()},reset:function(){var x=this._hasher;x.reset(),x.update(this._iKey)},update:function(x){return this._hasher.update(x),this},finalize:function(x){var v=this._hasher,m=v.finalize(x);v.reset();var w=v.finalize(this._oKey.clone().concat(m));return w}})})()})}(Ei)),Ei.exports}var Bi={exports:{}},ha;function Ex(){return ha||(ha=1,function(e,t){(function(r,n,o){e.exports=n(st(),Xo(),Fo())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.Base,l=o.WordArray,f=n.algo,y=f.SHA1,x=f.HMAC,v=f.PBKDF2=i.extend({cfg:i.extend({keySize:128/32,hasher:y,iterations:1}),init:function(m){this.cfg=this.cfg.extend(m)},compute:function(m,w){for(var E=this.cfg,N=x.create(E.hasher,m),O=l.create(),C=l.create([1]),V=O.words,j=C.words,X=E.keySize,F=E.iterations;V.length<X;){var G=N.update(w).finalize(C);N.reset();for(var Y=G.words,_=Y.length,$=G,ie=1;ie<F;ie++){$=N.finalize($),N.reset();for(var S=$.words,U=0;U<_;U++)Y[U]^=S[U]}O.concat(G),j[0]++}return O.sigBytes=X*4,O}});n.PBKDF2=function(m,w,E){return v.create(E).compute(m,w)}}(),r.PBKDF2})}(Bi)),Bi.exports}var Ni={exports:{}},da;function r0(){return da||(da=1,function(e,t){(function(r,n,o){e.exports=n(st(),Xo(),Fo())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.Base,l=o.WordArray,f=n.algo,y=f.MD5,x=f.EvpKDF=i.extend({cfg:i.extend({keySize:128/32,hasher:y,iterations:1}),init:function(v){this.cfg=this.cfg.extend(v)},compute:function(v,m){for(var w,E=this.cfg,N=E.hasher.create(),O=l.create(),C=O.words,V=E.keySize,j=E.iterations;C.length<V;){w&&N.update(w),w=N.update(v).finalize(m),N.reset();for(var X=1;X<j;X++)w=N.finalize(w),N.reset();O.concat(w)}return O.sigBytes=V*4,O}});n.EvpKDF=function(v,m,w){return x.create(w).compute(v,m)}}(),r.EvpKDF})}(Ni)),Ni.exports}var Ti={exports:{}},xa;function Jt(){return xa||(xa=1,function(e,t){(function(r,n,o){e.exports=n(st(),r0())})(Ge,function(r){r.lib.Cipher||function(n){var o=r,i=o.lib,l=i.Base,f=i.WordArray,y=i.BufferedBlockAlgorithm,x=o.enc;x.Utf8;var v=x.Base64,m=o.algo,w=m.EvpKDF,E=i.Cipher=y.extend({cfg:l.extend(),createEncryptor:function(S,U){return this.create(this._ENC_XFORM_MODE,S,U)},createDecryptor:function(S,U){return this.create(this._DEC_XFORM_MODE,S,U)},init:function(S,U,Z){this.cfg=this.cfg.extend(Z),this._xformMode=S,this._key=U,this.reset()},reset:function(){y.reset.call(this),this._doReset()},process:function(S){return this._append(S),this._process()},finalize:function(S){S&&this._append(S);var U=this._doFinalize();return U},keySize:128/32,ivSize:128/32,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function S(U){return typeof U=="string"?ie:Y}return function(U){return{encrypt:function(Z,b,s){return S(b).encrypt(U,Z,b,s)},decrypt:function(Z,b,s){return S(b).decrypt(U,Z,b,s)}}}}()});i.StreamCipher=E.extend({_doFinalize:function(){var S=this._process(!0);return S},blockSize:1});var N=o.mode={},O=i.BlockCipherMode=l.extend({createEncryptor:function(S,U){return this.Encryptor.create(S,U)},createDecryptor:function(S,U){return this.Decryptor.create(S,U)},init:function(S,U){this._cipher=S,this._iv=U}}),C=N.CBC=function(){var S=O.extend();S.Encryptor=S.extend({processBlock:function(Z,b){var s=this._cipher,d=s.blockSize;U.call(this,Z,b,d),s.encryptBlock(Z,b),this._prevBlock=Z.slice(b,b+d)}}),S.Decryptor=S.extend({processBlock:function(Z,b){var s=this._cipher,d=s.blockSize,z=Z.slice(b,b+d);s.decryptBlock(Z,b),U.call(this,Z,b,d),this._prevBlock=z}});function U(Z,b,s){var d,z=this._iv;z?(d=z,this._iv=n):d=this._prevBlock;for(var L=0;L<s;L++)Z[b+L]^=d[L]}return S}(),V=o.pad={},j=V.Pkcs7={pad:function(S,U){for(var Z=U*4,b=Z-S.sigBytes%Z,s=b<<24|b<<16|b<<8|b,d=[],z=0;z<b;z+=4)d.push(s);var L=f.create(d,b);S.concat(L)},unpad:function(S){var U=S.words[S.sigBytes-1>>>2]&255;S.sigBytes-=U}};i.BlockCipher=E.extend({cfg:E.cfg.extend({mode:C,padding:j}),reset:function(){var S;E.reset.call(this);var U=this.cfg,Z=U.iv,b=U.mode;this._xformMode==this._ENC_XFORM_MODE?S=b.createEncryptor:(S=b.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==S?this._mode.init(this,Z&&Z.words):(this._mode=S.call(b,this,Z&&Z.words),this._mode.__creator=S)},_doProcessBlock:function(S,U){this._mode.processBlock(S,U)},_doFinalize:function(){var S,U=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(U.pad(this._data,this.blockSize),S=this._process(!0)):(S=this._process(!0),U.unpad(S)),S},blockSize:128/32});var X=i.CipherParams=l.extend({init:function(S){this.mixIn(S)},toString:function(S){return(S||this.formatter).stringify(this)}}),F=o.format={},G=F.OpenSSL={stringify:function(S){var U,Z=S.ciphertext,b=S.salt;return b?U=f.create([1398893684,1701076831]).concat(b).concat(Z):U=Z,U.toString(v)},parse:function(S){var U,Z=v.parse(S),b=Z.words;return b[0]==1398893684&&b[1]==1701076831&&(U=f.create(b.slice(2,4)),b.splice(0,4),Z.sigBytes-=16),X.create({ciphertext:Z,salt:U})}},Y=i.SerializableCipher=l.extend({cfg:l.extend({format:G}),encrypt:function(S,U,Z,b){b=this.cfg.extend(b);var s=S.createEncryptor(Z,b),d=s.finalize(U),z=s.cfg;return X.create({ciphertext:d,key:Z,iv:z.iv,algorithm:S,mode:z.mode,padding:z.padding,blockSize:S.blockSize,formatter:b.format})},decrypt:function(S,U,Z,b){b=this.cfg.extend(b),U=this._parse(U,b.format);var s=S.createDecryptor(Z,b).finalize(U.ciphertext);return s},_parse:function(S,U){return typeof S=="string"?U.parse(S,this):S}}),_=o.kdf={},$=_.OpenSSL={execute:function(S,U,Z,b){b||(b=f.random(64/8));var s=w.create({keySize:U+Z}).compute(S,b),d=f.create(s.words.slice(U),Z*4);return s.sigBytes=U*4,X.create({key:s,iv:d,salt:b})}},ie=i.PasswordBasedCipher=Y.extend({cfg:Y.cfg.extend({kdf:$}),encrypt:function(S,U,Z,b){b=this.cfg.extend(b);var s=b.kdf.execute(Z,S.keySize,S.ivSize);b.iv=s.iv;var d=Y.encrypt.call(this,S,U,s.key,b);return d.mixIn(s),d},decrypt:function(S,U,Z,b){b=this.cfg.extend(b),U=this._parse(U,b.format);var s=b.kdf.execute(Z,S.keySize,S.ivSize,U.salt);b.iv=s.iv;var d=Y.decrypt.call(this,S,U,s.key,b);return d}})}()})}(Ti)),Ti.exports}var Li={exports:{}},pa;function Bx(){return pa||(pa=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.mode.CFB=function(){var n=r.lib.BlockCipherMode.extend();n.Encryptor=n.extend({processBlock:function(i,l){var f=this._cipher,y=f.blockSize;o.call(this,i,l,y,f),this._prevBlock=i.slice(l,l+y)}}),n.Decryptor=n.extend({processBlock:function(i,l){var f=this._cipher,y=f.blockSize,x=i.slice(l,l+y);o.call(this,i,l,y,f),this._prevBlock=x}});function o(i,l,f,y){var x,v=this._iv;v?(x=v.slice(0),this._iv=void 0):x=this._prevBlock,y.encryptBlock(x,0);for(var m=0;m<f;m++)i[l+m]^=x[m]}return n}(),r.mode.CFB})}(Li)),Li.exports}var Oi={exports:{}},va;function Nx(){return va||(va=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.mode.CTR=function(){var n=r.lib.BlockCipherMode.extend(),o=n.Encryptor=n.extend({processBlock:function(i,l){var f=this._cipher,y=f.blockSize,x=this._iv,v=this._counter;x&&(v=this._counter=x.slice(0),this._iv=void 0);var m=v.slice(0);f.encryptBlock(m,0),v[y-1]=v[y-1]+1|0;for(var w=0;w<y;w++)i[l+w]^=m[w]}});return n.Decryptor=o,n}(),r.mode.CTR})}(Oi)),Oi.exports}var Ai={exports:{}},ya;function Tx(){return ya||(ya=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){/** @preserve
 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
 * derived from CryptoJS.mode.CTR
 * Jan Hruby jhruby.web@gmail.com
 */return r.mode.CTRGladman=function(){var n=r.lib.BlockCipherMode.extend();function o(f){if((f>>24&255)===255){var y=f>>16&255,x=f>>8&255,v=f&255;y===255?(y=0,x===255?(x=0,v===255?v=0:++v):++x):++y,f=0,f+=y<<16,f+=x<<8,f+=v}else f+=1<<24;return f}function i(f){return(f[0]=o(f[0]))===0&&(f[1]=o(f[1])),f}var l=n.Encryptor=n.extend({processBlock:function(f,y){var x=this._cipher,v=x.blockSize,m=this._iv,w=this._counter;m&&(w=this._counter=m.slice(0),this._iv=void 0),i(w);var E=w.slice(0);x.encryptBlock(E,0);for(var N=0;N<v;N++)f[y+N]^=E[N]}});return n.Decryptor=l,n}(),r.mode.CTRGladman})}(Ai)),Ai.exports}var Si={exports:{}},ba;function Lx(){return ba||(ba=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.mode.OFB=function(){var n=r.lib.BlockCipherMode.extend(),o=n.Encryptor=n.extend({processBlock:function(i,l){var f=this._cipher,y=f.blockSize,x=this._iv,v=this._keystream;x&&(v=this._keystream=x.slice(0),this._iv=void 0),f.encryptBlock(v,0);for(var m=0;m<y;m++)i[l+m]^=v[m]}});return n.Decryptor=o,n}(),r.mode.OFB})}(Si)),Si.exports}var Xi={exports:{}},ma;function Ox(){return ma||(ma=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.mode.ECB=function(){var n=r.lib.BlockCipherMode.extend();return n.Encryptor=n.extend({processBlock:function(o,i){this._cipher.encryptBlock(o,i)}}),n.Decryptor=n.extend({processBlock:function(o,i){this._cipher.decryptBlock(o,i)}}),n}(),r.mode.ECB})}(Xi)),Xi.exports}var Fi={exports:{}},wa;function Ax(){return wa||(wa=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.pad.AnsiX923={pad:function(n,o){var i=n.sigBytes,l=o*4,f=l-i%l,y=i+f-1;n.clamp(),n.words[y>>>2]|=f<<24-y%4*8,n.sigBytes+=f},unpad:function(n){var o=n.words[n.sigBytes-1>>>2]&255;n.sigBytes-=o}},r.pad.Ansix923})}(Fi)),Fi.exports}var ji={exports:{}},ga;function Sx(){return ga||(ga=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.pad.Iso10126={pad:function(n,o){var i=o*4,l=i-n.sigBytes%i;n.concat(r.lib.WordArray.random(l-1)).concat(r.lib.WordArray.create([l<<24],1))},unpad:function(n){var o=n.words[n.sigBytes-1>>>2]&255;n.sigBytes-=o}},r.pad.Iso10126})}(ji)),ji.exports}var Ui={exports:{}},Pa;function Xx(){return Pa||(Pa=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.pad.Iso97971={pad:function(n,o){n.concat(r.lib.WordArray.create([2147483648],1)),r.pad.ZeroPadding.pad(n,o)},unpad:function(n){r.pad.ZeroPadding.unpad(n),n.sigBytes--}},r.pad.Iso97971})}(Ui)),Ui.exports}var Ri={exports:{}},za;function Fx(){return za||(za=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.pad.ZeroPadding={pad:function(n,o){var i=o*4;n.clamp(),n.sigBytes+=i-(n.sigBytes%i||i)},unpad:function(n){for(var o=n.words,i=n.sigBytes-1,i=n.sigBytes-1;i>=0;i--)if(o[i>>>2]>>>24-i%4*8&255){n.sigBytes=i+1;break}}},r.pad.ZeroPadding})}(Ri)),Ri.exports}var Zi={exports:{}},Ha;function jx(){return Ha||(Ha=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return r.pad.NoPadding={pad:function(){},unpad:function(){}},r.pad.NoPadding})}(Zi)),Zi.exports}var Ci={exports:{}},ka;function Ux(){return ka||(ka=1,function(e,t){(function(r,n,o){e.exports=n(st(),Jt())})(Ge,function(r){return function(n){var o=r,i=o.lib,l=i.CipherParams,f=o.enc,y=f.Hex,x=o.format;x.Hex={stringify:function(v){return v.ciphertext.toString(y)},parse:function(v){var m=y.parse(v);return l.create({ciphertext:m})}}}(),r.format.Hex})}(Ci)),Ci.exports}var Di={exports:{}},Ma;function Rx(){return Ma||(Ma=1,function(e,t){(function(r,n,o){e.exports=n(st(),H0(),k0(),r0(),Jt())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.BlockCipher,l=n.algo,f=[],y=[],x=[],v=[],m=[],w=[],E=[],N=[],O=[],C=[];(function(){for(var X=[],F=0;F<256;F++)F<128?X[F]=F<<1:X[F]=F<<1^283;for(var G=0,Y=0,F=0;F<256;F++){var _=Y^Y<<1^Y<<2^Y<<3^Y<<4;_=_>>>8^_&255^99,f[G]=_,y[_]=G;var $=X[G],ie=X[$],S=X[ie],U=X[_]*257^_*16843008;x[G]=U<<24|U>>>8,v[G]=U<<16|U>>>16,m[G]=U<<8|U>>>24,w[G]=U;var U=S*16843009^ie*65537^$*257^G*16843008;E[_]=U<<24|U>>>8,N[_]=U<<16|U>>>16,O[_]=U<<8|U>>>24,C[_]=U,G?(G=$^X[X[X[S^$]]],Y^=X[X[Y]]):G=Y=1}})();var V=[0,1,2,4,8,16,32,64,128,27,54],j=l.AES=i.extend({_doReset:function(){var X;if(!(this._nRounds&&this._keyPriorReset===this._key)){for(var F=this._keyPriorReset=this._key,G=F.words,Y=F.sigBytes/4,_=this._nRounds=Y+6,$=(_+1)*4,ie=this._keySchedule=[],S=0;S<$;S++)S<Y?ie[S]=G[S]:(X=ie[S-1],S%Y?Y>6&&S%Y==4&&(X=f[X>>>24]<<24|f[X>>>16&255]<<16|f[X>>>8&255]<<8|f[X&255]):(X=X<<8|X>>>24,X=f[X>>>24]<<24|f[X>>>16&255]<<16|f[X>>>8&255]<<8|f[X&255],X^=V[S/Y|0]<<24),ie[S]=ie[S-Y]^X);for(var U=this._invKeySchedule=[],Z=0;Z<$;Z++){var S=$-Z;if(Z%4)var X=ie[S];else var X=ie[S-4];Z<4||S<=4?U[Z]=X:U[Z]=E[f[X>>>24]]^N[f[X>>>16&255]]^O[f[X>>>8&255]]^C[f[X&255]]}}},encryptBlock:function(X,F){this._doCryptBlock(X,F,this._keySchedule,x,v,m,w,f)},decryptBlock:function(X,F){var G=X[F+1];X[F+1]=X[F+3],X[F+3]=G,this._doCryptBlock(X,F,this._invKeySchedule,E,N,O,C,y);var G=X[F+1];X[F+1]=X[F+3],X[F+3]=G},_doCryptBlock:function(X,F,G,Y,_,$,ie,S){for(var U=this._nRounds,Z=X[F]^G[0],b=X[F+1]^G[1],s=X[F+2]^G[2],d=X[F+3]^G[3],z=4,L=1;L<U;L++){var A=Y[Z>>>24]^_[b>>>16&255]^$[s>>>8&255]^ie[d&255]^G[z++],D=Y[b>>>24]^_[s>>>16&255]^$[d>>>8&255]^ie[Z&255]^G[z++],q=Y[s>>>24]^_[d>>>16&255]^$[Z>>>8&255]^ie[b&255]^G[z++],g=Y[d>>>24]^_[Z>>>16&255]^$[b>>>8&255]^ie[s&255]^G[z++];Z=A,b=D,s=q,d=g}var A=(S[Z>>>24]<<24|S[b>>>16&255]<<16|S[s>>>8&255]<<8|S[d&255])^G[z++],D=(S[b>>>24]<<24|S[s>>>16&255]<<16|S[d>>>8&255]<<8|S[Z&255])^G[z++],q=(S[s>>>24]<<24|S[d>>>16&255]<<16|S[Z>>>8&255]<<8|S[b&255])^G[z++],g=(S[d>>>24]<<24|S[Z>>>16&255]<<16|S[b>>>8&255]<<8|S[s&255])^G[z++];X[F]=A,X[F+1]=D,X[F+2]=q,X[F+3]=g},keySize:256/32});n.AES=i._createHelper(j)}(),r.AES})}(Di)),Di.exports}var Ii={exports:{}},Ea;function Zx(){return Ea||(Ea=1,function(e,t){(function(r,n,o){e.exports=n(st(),H0(),k0(),r0(),Jt())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.WordArray,l=o.BlockCipher,f=n.algo,y=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],x=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],v=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],m=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],w=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],E=f.DES=l.extend({_doReset:function(){for(var V=this._key,j=V.words,X=[],F=0;F<56;F++){var G=y[F]-1;X[F]=j[G>>>5]>>>31-G%32&1}for(var Y=this._subKeys=[],_=0;_<16;_++){for(var $=Y[_]=[],ie=v[_],F=0;F<24;F++)$[F/6|0]|=X[(x[F]-1+ie)%28]<<31-F%6,$[4+(F/6|0)]|=X[28+(x[F+24]-1+ie)%28]<<31-F%6;$[0]=$[0]<<1|$[0]>>>31;for(var F=1;F<7;F++)$[F]=$[F]>>>(F-1)*4+3;$[7]=$[7]<<5|$[7]>>>27}for(var S=this._invSubKeys=[],F=0;F<16;F++)S[F]=Y[15-F]},encryptBlock:function(V,j){this._doCryptBlock(V,j,this._subKeys)},decryptBlock:function(V,j){this._doCryptBlock(V,j,this._invSubKeys)},_doCryptBlock:function(V,j,X){this._lBlock=V[j],this._rBlock=V[j+1],N.call(this,4,252645135),N.call(this,16,65535),O.call(this,2,858993459),O.call(this,8,16711935),N.call(this,1,1431655765);for(var F=0;F<16;F++){for(var G=X[F],Y=this._lBlock,_=this._rBlock,$=0,ie=0;ie<8;ie++)$|=m[ie][((_^G[ie])&w[ie])>>>0];this._lBlock=_,this._rBlock=Y^$}var S=this._lBlock;this._lBlock=this._rBlock,this._rBlock=S,N.call(this,1,1431655765),O.call(this,8,16711935),O.call(this,2,858993459),N.call(this,16,65535),N.call(this,4,252645135),V[j]=this._lBlock,V[j+1]=this._rBlock},keySize:64/32,ivSize:64/32,blockSize:64/32});function N(V,j){var X=(this._lBlock>>>V^this._rBlock)&j;this._rBlock^=X,this._lBlock^=X<<V}function O(V,j){var X=(this._rBlock>>>V^this._lBlock)&j;this._lBlock^=X,this._rBlock^=X<<V}n.DES=l._createHelper(E);var C=f.TripleDES=l.extend({_doReset:function(){var V=this._key,j=V.words;if(j.length!==2&&j.length!==4&&j.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var X=j.slice(0,2),F=j.length<4?j.slice(0,2):j.slice(2,4),G=j.length<6?j.slice(0,2):j.slice(4,6);this._des1=E.createEncryptor(i.create(X)),this._des2=E.createEncryptor(i.create(F)),this._des3=E.createEncryptor(i.create(G))},encryptBlock:function(V,j){this._des1.encryptBlock(V,j),this._des2.decryptBlock(V,j),this._des3.encryptBlock(V,j)},decryptBlock:function(V,j){this._des3.decryptBlock(V,j),this._des2.encryptBlock(V,j),this._des1.decryptBlock(V,j)},keySize:192/32,ivSize:64/32,blockSize:64/32});n.TripleDES=l._createHelper(C)}(),r.TripleDES})}(Ii)),Ii.exports}var qi={exports:{}},Ba;function Cx(){return Ba||(Ba=1,function(e,t){(function(r,n,o){e.exports=n(st(),H0(),k0(),r0(),Jt())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.StreamCipher,l=n.algo,f=l.RC4=i.extend({_doReset:function(){for(var v=this._key,m=v.words,w=v.sigBytes,E=this._S=[],N=0;N<256;N++)E[N]=N;for(var N=0,O=0;N<256;N++){var C=N%w,V=m[C>>>2]>>>24-C%4*8&255;O=(O+E[N]+V)%256;var j=E[N];E[N]=E[O],E[O]=j}this._i=this._j=0},_doProcessBlock:function(v,m){v[m]^=y.call(this)},keySize:256/32,ivSize:0});function y(){for(var v=this._S,m=this._i,w=this._j,E=0,N=0;N<4;N++){m=(m+1)%256,w=(w+v[m])%256;var O=v[m];v[m]=v[w],v[w]=O,E|=v[(v[m]+v[w])%256]<<24-N*8}return this._i=m,this._j=w,E}n.RC4=i._createHelper(f);var x=l.RC4Drop=f.extend({cfg:f.cfg.extend({drop:192}),_doReset:function(){f._doReset.call(this);for(var v=this.cfg.drop;v>0;v--)y.call(this)}});n.RC4Drop=i._createHelper(x)}(),r.RC4})}(qi)),qi.exports}var Vi={exports:{}},Na;function Dx(){return Na||(Na=1,function(e,t){(function(r,n,o){e.exports=n(st(),H0(),k0(),r0(),Jt())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.StreamCipher,l=n.algo,f=[],y=[],x=[],v=l.Rabbit=i.extend({_doReset:function(){for(var w=this._key.words,E=this.cfg.iv,N=0;N<4;N++)w[N]=(w[N]<<8|w[N]>>>24)&16711935|(w[N]<<24|w[N]>>>8)&4278255360;var O=this._X=[w[0],w[3]<<16|w[2]>>>16,w[1],w[0]<<16|w[3]>>>16,w[2],w[1]<<16|w[0]>>>16,w[3],w[2]<<16|w[1]>>>16],C=this._C=[w[2]<<16|w[2]>>>16,w[0]&4294901760|w[1]&65535,w[3]<<16|w[3]>>>16,w[1]&4294901760|w[2]&65535,w[0]<<16|w[0]>>>16,w[2]&4294901760|w[3]&65535,w[1]<<16|w[1]>>>16,w[3]&4294901760|w[0]&65535];this._b=0;for(var N=0;N<4;N++)m.call(this);for(var N=0;N<8;N++)C[N]^=O[N+4&7];if(E){var V=E.words,j=V[0],X=V[1],F=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360,G=(X<<8|X>>>24)&16711935|(X<<24|X>>>8)&4278255360,Y=F>>>16|G&4294901760,_=G<<16|F&65535;C[0]^=F,C[1]^=Y,C[2]^=G,C[3]^=_,C[4]^=F,C[5]^=Y,C[6]^=G,C[7]^=_;for(var N=0;N<4;N++)m.call(this)}},_doProcessBlock:function(w,E){var N=this._X;m.call(this),f[0]=N[0]^N[5]>>>16^N[3]<<16,f[1]=N[2]^N[7]>>>16^N[5]<<16,f[2]=N[4]^N[1]>>>16^N[7]<<16,f[3]=N[6]^N[3]>>>16^N[1]<<16;for(var O=0;O<4;O++)f[O]=(f[O]<<8|f[O]>>>24)&16711935|(f[O]<<24|f[O]>>>8)&4278255360,w[E+O]^=f[O]},blockSize:128/32,ivSize:64/32});function m(){for(var w=this._X,E=this._C,N=0;N<8;N++)y[N]=E[N];E[0]=E[0]+1295307597+this._b|0,E[1]=E[1]+3545052371+(E[0]>>>0<y[0]>>>0?1:0)|0,E[2]=E[2]+886263092+(E[1]>>>0<y[1]>>>0?1:0)|0,E[3]=E[3]+1295307597+(E[2]>>>0<y[2]>>>0?1:0)|0,E[4]=E[4]+3545052371+(E[3]>>>0<y[3]>>>0?1:0)|0,E[5]=E[5]+886263092+(E[4]>>>0<y[4]>>>0?1:0)|0,E[6]=E[6]+1295307597+(E[5]>>>0<y[5]>>>0?1:0)|0,E[7]=E[7]+3545052371+(E[6]>>>0<y[6]>>>0?1:0)|0,this._b=E[7]>>>0<y[7]>>>0?1:0;for(var N=0;N<8;N++){var O=w[N]+E[N],C=O&65535,V=O>>>16,j=((C*C>>>17)+C*V>>>15)+V*V,X=((O&4294901760)*O|0)+((O&65535)*O|0);x[N]=j^X}w[0]=x[0]+(x[7]<<16|x[7]>>>16)+(x[6]<<16|x[6]>>>16)|0,w[1]=x[1]+(x[0]<<8|x[0]>>>24)+x[7]|0,w[2]=x[2]+(x[1]<<16|x[1]>>>16)+(x[0]<<16|x[0]>>>16)|0,w[3]=x[3]+(x[2]<<8|x[2]>>>24)+x[1]|0,w[4]=x[4]+(x[3]<<16|x[3]>>>16)+(x[2]<<16|x[2]>>>16)|0,w[5]=x[5]+(x[4]<<8|x[4]>>>24)+x[3]|0,w[6]=x[6]+(x[5]<<16|x[5]>>>16)+(x[4]<<16|x[4]>>>16)|0,w[7]=x[7]+(x[6]<<8|x[6]>>>24)+x[5]|0}n.Rabbit=i._createHelper(v)}(),r.Rabbit})}(Vi)),Vi.exports}var Wi={exports:{}},Ta;function Ix(){return Ta||(Ta=1,function(e,t){(function(r,n,o){e.exports=n(st(),H0(),k0(),r0(),Jt())})(Ge,function(r){return function(){var n=r,o=n.lib,i=o.StreamCipher,l=n.algo,f=[],y=[],x=[],v=l.RabbitLegacy=i.extend({_doReset:function(){var w=this._key.words,E=this.cfg.iv,N=this._X=[w[0],w[3]<<16|w[2]>>>16,w[1],w[0]<<16|w[3]>>>16,w[2],w[1]<<16|w[0]>>>16,w[3],w[2]<<16|w[1]>>>16],O=this._C=[w[2]<<16|w[2]>>>16,w[0]&4294901760|w[1]&65535,w[3]<<16|w[3]>>>16,w[1]&4294901760|w[2]&65535,w[0]<<16|w[0]>>>16,w[2]&4294901760|w[3]&65535,w[1]<<16|w[1]>>>16,w[3]&4294901760|w[0]&65535];this._b=0;for(var C=0;C<4;C++)m.call(this);for(var C=0;C<8;C++)O[C]^=N[C+4&7];if(E){var V=E.words,j=V[0],X=V[1],F=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360,G=(X<<8|X>>>24)&16711935|(X<<24|X>>>8)&4278255360,Y=F>>>16|G&4294901760,_=G<<16|F&65535;O[0]^=F,O[1]^=Y,O[2]^=G,O[3]^=_,O[4]^=F,O[5]^=Y,O[6]^=G,O[7]^=_;for(var C=0;C<4;C++)m.call(this)}},_doProcessBlock:function(w,E){var N=this._X;m.call(this),f[0]=N[0]^N[5]>>>16^N[3]<<16,f[1]=N[2]^N[7]>>>16^N[5]<<16,f[2]=N[4]^N[1]>>>16^N[7]<<16,f[3]=N[6]^N[3]>>>16^N[1]<<16;for(var O=0;O<4;O++)f[O]=(f[O]<<8|f[O]>>>24)&16711935|(f[O]<<24|f[O]>>>8)&4278255360,w[E+O]^=f[O]},blockSize:128/32,ivSize:64/32});function m(){for(var w=this._X,E=this._C,N=0;N<8;N++)y[N]=E[N];E[0]=E[0]+1295307597+this._b|0,E[1]=E[1]+3545052371+(E[0]>>>0<y[0]>>>0?1:0)|0,E[2]=E[2]+886263092+(E[1]>>>0<y[1]>>>0?1:0)|0,E[3]=E[3]+1295307597+(E[2]>>>0<y[2]>>>0?1:0)|0,E[4]=E[4]+3545052371+(E[3]>>>0<y[3]>>>0?1:0)|0,E[5]=E[5]+886263092+(E[4]>>>0<y[4]>>>0?1:0)|0,E[6]=E[6]+1295307597+(E[5]>>>0<y[5]>>>0?1:0)|0,E[7]=E[7]+3545052371+(E[6]>>>0<y[6]>>>0?1:0)|0,this._b=E[7]>>>0<y[7]>>>0?1:0;for(var N=0;N<8;N++){var O=w[N]+E[N],C=O&65535,V=O>>>16,j=((C*C>>>17)+C*V>>>15)+V*V,X=((O&4294901760)*O|0)+((O&65535)*O|0);x[N]=j^X}w[0]=x[0]+(x[7]<<16|x[7]>>>16)+(x[6]<<16|x[6]>>>16)|0,w[1]=x[1]+(x[0]<<8|x[0]>>>24)+x[7]|0,w[2]=x[2]+(x[1]<<16|x[1]>>>16)+(x[0]<<16|x[0]>>>16)|0,w[3]=x[3]+(x[2]<<8|x[2]>>>24)+x[1]|0,w[4]=x[4]+(x[3]<<16|x[3]>>>16)+(x[2]<<16|x[2]>>>16)|0,w[5]=x[5]+(x[4]<<8|x[4]>>>24)+x[3]|0,w[6]=x[6]+(x[5]<<16|x[5]>>>16)+(x[4]<<16|x[4]>>>16)|0,w[7]=x[7]+(x[6]<<8|x[6]>>>24)+x[5]|0}n.RabbitLegacy=i._createHelper(v)}(),r.RabbitLegacy})}(Wi)),Wi.exports}(function(e,t){(function(r,n,o){e.exports=n(st(),Ln(),wx(),gx(),H0(),Px(),k0(),Xo(),gc(),zx(),Pc(),Hx(),kx(),Mx(),Fo(),Ex(),r0(),Jt(),Bx(),Nx(),Tx(),Lx(),Ox(),Ax(),Sx(),Xx(),Fx(),jx(),Ux(),Rx(),Zx(),Cx(),Dx(),Ix())})(Ge,function(r){return r})})(So);var Z0=globalThis&&globalThis.__awaiter||function(e,t,r,n){function o(i){return i instanceof r?i:new r(function(l){l(i)})}return new(r||(r=Promise))(function(i,l){function f(v){try{x(n.next(v))}catch(m){l(m)}}function y(v){try{x(n.throw(v))}catch(m){l(m)}}function x(v){v.done?i(v.value):o(v.value).then(f,y)}x((n=n.apply(e,t||[])).next())})};function La(e){return e.length>1?"Http client does not support multi destinations":e.length?"":"The message destination is empty"}var g0;(function(e){e.sr25519="sr25519",e.ed25519="ed25519"})(g0||(g0={}));function zc(e){let t="";t+=e.ver,t+=e.uid,t+=e.cmd,t+=e.dat,t+=e.src;for(const r of e.dst)t+=r;return t+=e.ret,t+=e.now,t+=e.pxy,t}function qx(e,t,r){return Z0(this,void 0,void 0,function*(){const n=So.exports.MD5(e).toString(),o=_r.Buffer.from(n,"hex"),i=new wc({type:r});yield Mh();const f=i.addFromMnemonic(t).sign(o),y=_r.Buffer.from(f).toString("hex"),x=r==g0.sr25519?"s":"e";return _r.Buffer.from(x).toString("hex")+y})}function Vx(e,t){return Z0(this,void 0,void 0,function*(){const r=`query getTwinAccountId($twinId: Int!){
        twins(where: {twinID_eq: $twinId}) {
          accountID
        }
      }
      `,n=JSON.stringify({query:r,variables:{twinId:e}}),o={"Content-Type":"application/json"};try{const l=(yield Ki.post(t,n,{headers:o})).data.data.twins;if(l.length===0)throw new Error(`Couldn't find a twin with id: ${e}`);return l[0].accountID}catch(i){throw new Error(i.message)}})}function Wx(e,t){return Z0(this,void 0,void 0,function*(){const r=yield Vx(e.src,t),n=zc(e),o=So.exports.MD5(n).toString(),i=_r.Buffer.from(o,"hex"),l=e.sig.slice(2),f=_r.Buffer.from(l,"hex"),y=e.sig.slice(0,2),v=_r.Buffer.from(y,"hex").toString()=="s"?g0.sr25519:g0.ed25519,w=new wc({type:v}).addFromAddress(r);if(!w.verify(i,f,w.publicKey))throw new Error("Couldn't verify the response signature")})}class Jx{constructor(t,r,n,o,i=g0.sr25519,l=!1){this.proxyURL=r,this.twinId=t,this.graphqlURL=n,this.mnemonic=o,this.keypairType=i,this.verifyResponse=l}prepare(t,r,n,o){return{ver:1,uid:"",cmd:t,exp:n,dat:"",src:this.twinId,dst:r,ret:"",try:o,shm:"",now:Math.floor(new Date().getTime()/1e3),err:"",sig:"",pxy:!0}}send(t,r){return Z0(this,void 0,void 0,function*(){try{t.dat=Tu.encode(r);const n=t.dst,o=t.try,i=La(n);if(i)throw new Error(i);const l=`${this.proxyURL}/twin/${n[0]}`;let f;for(let y=1;y<=o;y++)try{t.now=Math.floor(new Date().getTime()/1e3);const x=zc(t);t.sig=yield qx(x,this.mnemonic,this.keypairType);const v=JSON.stringify(t);console.log(`Sending {try ${y}}: ${l}`);const m=yield Ki.post(l,v);return console.log(`Sending {try ${y}}: Success`),f=JSON.parse(JSON.stringify(m.data)),console.log(f),t.ret=f.retqueue,t}catch(x){if(y<o)console.log(`try ${y}: cannot send the message, Message: ${x.message}`);else{let v=x.message;throw x.response.data&&(v=`${v} due to ${x.response.data.Message}`),new Error(v)}}}catch(n){throw new Error(n.message)}})}read(t){return Z0(this,void 0,void 0,function*(){try{const r=t.dst,n=t.try,o=La(r),i=t.ret,l=`${this.proxyURL}/twin/${r[0]}/${i}`;if(o)throw new Error(o);if(!i)throw new Error("The Message retqueue is null");const f=new Date().getTime();for(;new Date().getTime()<f+1e3*60;)try{console.log(`Reading: ${l}`);const y=yield Ki.post(l);if(!y.data[0])throw Error("Couldn't get the response");return this.verifyResponse&&(yield Wx(y.data[0],this.graphqlURL)),y.data}catch(y){console.log(y.message),yield new Promise(x=>setTimeout(x,1e3))}throw Error(`Failed to get a response from twin ${r[0]} after a minute or couldn't verify the response`)}catch(r){let n=r.message;throw r.response.data&&(n=`${n} due to ${r.response.data.Message}`),new Error(r.message)}})}}export{Jx as H};
